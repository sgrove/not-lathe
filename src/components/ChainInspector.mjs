// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Debug from "../Debug.mjs";
import * as Icons from "../Icons.mjs";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChannelChat from "./ChannelChat.mjs";
import * as InspectorOverview from "./InspectorOverview.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as ChainResultsHelpers from "../lib/ChainResultsHelpers.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ChainInspector_packageChain_graphql from "../__generated__/ChainInspector_packageChain_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(ChainInspector_packageChain_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ChainInspector_packageChain_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ChainInspector_packageChain_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ChainInspector_packageChain_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function ChainInspector(Props) {
  var chainExecutionResults = Props.chainExecutionResults;
  var onInspectAction = Props.onInspectAction;
  var onClose = Props.onClose;
  var fragmentRefs = Props.nothingRef;
  var chain = use(fragmentRefs);
  Belt_Option.getWithDefault(Belt_Option.map(chainExecutionResults, ChainResultsHelpers.findMissingAuthServicesFromChainResult), []);
  React.useState(function () {
        return {};
      });
  var match = React.useState(function () {
        return "chat";
      });
  var setOpenedTab = match[1];
  var openedTab = match[0];
  React.useState(function () {
        return "";
      });
  Belt_Array.some(chain.actions, (function (request) {
          return request.graphqlOperationKind === "SUBSCRIPTION";
        }));
  var isChainViable = chain.actions.length !== 0;
  React.useState(function () {
        
      });
  var inspectorTab = React.createElement(React.Fragment, undefined, React.createElement(InspectorOverview.make, {
            fragmentRefs: chain.fragmentRefs,
            onInspectAction: onInspectAction,
            onDeleteAction: (function (param) {
                
              })
          }), React.createElement("br", undefined), isChainViable ? null : React.createElement("div", {
              className: "m-2 w-full text-center flex flex-1 flex-grow flex-col justify-items-center justify-center items-center justify-items align-middle",
              style: {
                color: Comps.colors["gray-4"],
                height: "50%"
              }
            }, React.createElement(Icons.MonoAddBlocks.make, {
                  color: Comps.colors["gray-13"]
                }), React.createElement("span", {
                  className: "mt-2"
                }, "Add some blocks to get started")), React.createElement(Comps.Button.make, {
            onClick: (function (param) {
                return Curry._1(onClose, undefined);
              }),
            children: "Exit"
          }), React.createElement(Comps.CollapsableSection.make, {
            title: "Internal Debug info",
            defaultOpen: false,
            children: React.createElement(Comps.Pre.make, {
                  children: Debug.Relay.stringify(chain),
                  selectAll: true
                })
          }));
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "w-full flex ml-2 border-b justify-around",
                  style: {
                    borderColor: Comps.colors["gray-1"]
                  }
                }, React.createElement("button", {
                      className: "flex justify-center flex-grow cursor-pointer p-1 outline-none " + (
                        openedTab === "general" ? " inspector-tab-active" : " inspector-tab-inactive"
                      ),
                      onClick: (function (param) {
                          return Curry._1(setOpenedTab, (function (param) {
                                        return "general";
                                      }));
                        })
                    }, React.createElement(Icons.Link.make, {
                          className: "",
                          color: openedTab === "general" ? Comps.colors["blue-1"] : Comps.colors["gray-6"],
                          width: "24px",
                          height: "24px"
                        }), React.createElement("span", {
                          className: "mx-2"
                        }, "Chain")), React.createElement("button", {
                      className: "flex justify-center flex-grow cursor-pointer p-1 rounded-sm outline-none " + (
                        openedTab === "chat" ? " inspector-tab-active" : " inspector-tab-inactive"
                      ),
                      onClick: (function (param) {
                          return Curry._1(setOpenedTab, (function (param) {
                                        return "chat";
                                      }));
                        })
                    }, React.createElement(Icons.Chats.make, {
                          color: openedTab === "chat" ? Comps.colors["blue-1"] : Comps.colors["gray-6"],
                          width: "24px",
                          height: "24px"
                        }), React.createElement("span", {
                          className: "mx-2"
                        }, "Chat"))), openedTab === "general" ? inspectorTab : React.createElement(ChannelChat.make, {
                    channelId: chain.id
                  }), React.createElement(Comps.Pre.make, {
                  children: "tst"
                }));
}

var make = ChainInspector;

export {
  Fragment ,
  make ,
  
}
/* Comps Not a pure module */
