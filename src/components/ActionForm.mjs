// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Graphql from "graphql";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GraphQLForm from "./GraphQLForm.mjs";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ActionForm_oneGraphStudioChainAction_graphql from "../__generated__/ActionForm_oneGraphStudioChainAction_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(ActionForm_oneGraphStudioChainAction_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ActionForm_oneGraphStudioChainAction_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ActionForm_oneGraphStudioChainAction_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ActionForm_oneGraphStudioChainAction_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function ActionForm(Props) {
  var schema = Props.schema;
  var actionRef = Props.actionRef;
  var onExecuteAction = Props.onExecuteAction;
  var action = use(actionRef);
  var match = React.useState(function () {
        return {};
      });
  var setFormVariables = match[1];
  var formVariables = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setCurrentAuthToken = match$1[1];
  var currentAuthToken = match$1[0];
  var connectionDrag = React.useContext(ConnectionContext.context);
  var inputs = Belt_Array.map(action.actionVariables, (function (param) {
          var def_variable = {
            name: {
              kind: "Name",
              value: param.name,
              loc: undefined
            }
          };
          var def_type = Graphql.parseType(param.graphqlType);
          var def = {
            variable: def_variable,
            type: def_type
          };
          return GraphQLForm.formInput(schema, def, setFormVariables, {
                      labelClassname: "text-underline pl-2 m-2 mt-0 mb-0 font-thin text-sm font-mono",
                      onMouseUp: (function ($$event) {
                          var element = $$event.target;
                          var clientX = $$event.clientX;
                          var clientY = $$event.clientY;
                          var mouseClientPosition = [
                            clientX,
                            clientY
                          ];
                          var match = connectionDrag.value;
                          if (typeof match === "number" || match.TAG !== /* StartedSource */0) {
                            return ;
                          } else {
                            return Curry._1(connectionDrag.onPotentialVariableSourceConnect, {
                                        TAG: 3,
                                        sourceActionId: match.sourceActionId,
                                        sourceDom: match.sourceDom,
                                        target: {
                                          TAG: 3,
                                          inputDom: element,
                                          [Symbol.for("name")]: "Input"
                                        },
                                        windowPosition: mouseClientPosition,
                                        [Symbol.for("name")]: "Completed"
                                      });
                          }
                        })
                    });
        }));
  var match$2 = connectionDrag.value;
  var tmp;
  tmp = typeof match$2 === "number" || match$2.TAG !== /* StartedSource */0 ? "" : "drag-enabled";
  var form = React.createElement("form", {
        className: tmp + " flex flex-col",
        onSubmit: (function ($$event) {
            $$event.preventDefault();
            $$event.stopPropagation();
            Curry._3(onExecuteAction, action.id, formVariables, currentAuthToken);
            
          })
      }, inputs.length !== 0 ? inputs : null, React.createElement(Comps.Select.make, {
            children: React.createElement("option", {
                  value: "TEMP"
                }, "Use current scratchpad auth"),
            className: "w-full select-button comp-select my-4 mx-2",
            onChange: (function ($$event) {
                var value = $$event.target.value;
                var token = value === "TEMP" ? undefined : value;
                return Curry._1(setCurrentAuthToken, (function (param) {
                              return token;
                            }));
              })
          }), React.createElement(Comps.Button.make, {
            className: "w-full",
            type_: "submit",
            children: "Execute"
          }));
  return React.createElement(React.Fragment, undefined, form, React.createElement(Comps.Pre.make, {
                  children: JSON.stringify(formVariables, null, 2)
                }));
}

var make = ActionForm;

export {
  Fragment ,
  make ,
  
}
/* Comps Not a pure module */
