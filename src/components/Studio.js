// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.js";
import * as Uuid from "../bindings/Uuid.js";
import * as Uuid$1 from "uuid";
import * as Acorn from "../bindings/Acorn.js";
import * as Chain from "../Chain.js";
import * as Comps from "./Comps.js";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Dagre from "../bindings/Dagre.js";
import * as Icons from "../Icons.js";
import * as Utils from "../bindings/Utils.js";
import * as Acorn$1 from "acorn";
import * as React from "react";
import * as $$String from "bs-platform/lib/es6/string.mjs";
import * as Js_dict from "bs-platform/lib/es6/js_dict.mjs";
import * as Graphql from "graphql";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.mjs";
import * as Prettier from "prettier";
import * as GraphQLJs from "../bindings/GraphQLJs.js";
import * as Inspector from "./Inspector.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.mjs";
import * as Caml_array from "bs-platform/lib/es6/caml_array.mjs";
import * as OneGraphRe from "../OneGraphRe.js";
import * as TypeScript from "../bindings/TypeScript.js";
import * as Typescript from "typescript";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as BlockEditor from "./BlockEditor.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
import * as GraphQLUtils from "../bindings/GraphQLUtils.js";
import * as BsReactMonaco from "../bindings/BsReactMonaco.js";
import * as Belt_SetString from "bs-platform/lib/es6/belt_SetString.mjs";
import FragmentNodeJs from "./FragmentNode.js";
import CopyToClipboard from "copy-to-clipboard";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.mjs";
import ReactFlowRenderer from "react-flow-renderer";
import * as ReactFlowRenderer$1 from "react-flow-renderer";
import ParserBabel from "prettier/parser-babel";

var SimpleTooltip = {};

var make = FragmentNodeJs;

var FragmentNodeComponent = {
  make: make
};

function makeBlankBlock(param) {
  return {
          id: Uuid$1.v4(),
          title: "Untitled",
          description: "TODO",
          body: "query Untitled { __typename }",
          kind: /* Query */0,
          contributedBy: undefined,
          services: []
        };
}

function compileChain(schema, chain) {
  try {
    var compiled = Chain.compileAsObj(chain);
    var parsedOperationDoc = Graphql.parse(compiled.operationDoc);
    var mockedVariables = GraphQLJs.Mock.mockOperationDocVariables(schema, parsedOperationDoc);
    return {
            compiled: compiled,
            variables: mockedVariables
          };
  }
  catch (_ex){
    return ;
  }
}

function Studio$BlockSearch(Props) {
  var onAdd = Props.onAdd;
  var onInspect = Props.onInspect;
  var blocks = Props.blocks;
  var onCreate = Props.onCreate;
  var match = React.useState(function () {
        return {
                search: undefined,
                results: blocks.slice(0).sort(function (a, b) {
                      return $$String.compare(a.title.toLocaleLowerCase(), b.title.toLocaleLowerCase());
                    })
              };
      });
  var setState = match[1];
  var state = match[0];
  var searchBlocks = function (blocks, term) {
    return Belt_Array.keep(blocks, (function (block) {
                    var titleMatch = Belt_Option.isSome(Caml_option.null_to_opt(block.title.match(new RegExp(term, "ig"))));
                    var servicesMatch = Belt_Array.some(block.services, (function (service) {
                            return Belt_Option.isSome(Caml_option.null_to_opt(service.match(new RegExp(term, "ig"))));
                          }));
                    if (titleMatch) {
                      return true;
                    } else {
                      return servicesMatch;
                    }
                  })).sort(function (a, b) {
                return $$String.compare(a.title.toLocaleLowerCase(), b.title.toLocaleLowerCase());
              });
  };
  React.useEffect((function () {
          var term = state.search;
          if (term !== undefined) {
            var results = searchBlocks(blocks, term);
            Curry._1(setState, (function (oldState) {
                    return {
                            search: oldState.search,
                            results: results
                          };
                  }));
          }
          
        }), [blocks.length]);
  var match$1 = state.search;
  return React.createElement("div", {
              className: "flex w-full m-0 max-h-full block bg-gray-900"
            }, React.createElement("div", {
                  className: "w-full max-h-full"
                }, React.createElement(Comps.Header.make, {
                      children: "Block Library"
                    }), React.createElement("div", {
                      className: "shadow-md rounded-lg px-3 py-2 h-full overflow-y-hidden"
                    }, React.createElement("div", {
                          className: "flex items-center bg-gray-200 rounded-md inline-block"
                        }, React.createElement("div", {
                              className: "pl-2"
                            }, React.createElement("svg", {
                                  className: "fill-current text-gray-500 w-6 h-6",
                                  viewBox: "0 0 24 24"
                                }, React.createElement("path", {
                                      d: "M16.32 14.9l5.39 5.4a1 1 0 0 1-1.42 1.4l-5.38-5.38a8 8 0 1 1 1.41-1.41zM10 16a6 6 0 1 0 0-12 6 6 0 0 0 0 12z"
                                    }))), React.createElement("input", {
                              className: "w-full rounded-md bg-gray-200 text-gray-700 leading-tight focus:outline-none py-2 px-2 border-0",
                              id: "search",
                              placeholder: "Search for GraphQL blocks",
                              type: "text",
                              onChange: (function ($$event) {
                                  var query = $$event.target.value;
                                  var search = query === "" ? undefined : query;
                                  var results = search !== undefined ? searchBlocks(blocks, search) : blocks;
                                  return Curry._1(setState, (function (_oldState) {
                                                return {
                                                        search: search,
                                                        results: results
                                                      };
                                              }));
                                })
                            }), React.createElement("div", {
                              className: "flex items-center bg-gray-200 rounded-md inline "
                            }, React.createElement("button", {
                                  className: "p-2 hover:bg-blue-200 rounded-md",
                                  onClick: (function (param) {
                                      return Curry._1(onCreate, undefined);
                                    })
                                }, "+"))), React.createElement("div", {
                          className: "py-3 text-sm h-full overflow-y-scroll"
                        }, Belt_Array.map((
                                  match$1 !== undefined ? state.results : blocks
                                ).slice(0).sort(function (a, b) {
                                  return $$String.compare(a.title.toLocaleLowerCase(), b.title.toLocaleLowerCase());
                                }), (function (block) {
                                var match = block.kind;
                                var tmp;
                                switch (match) {
                                  case /* Query */0 :
                                      tmp = "bg-green-400";
                                      break;
                                  case /* Mutation */1 :
                                      tmp = "bg-red-400";
                                      break;
                                  case /* Subscription */2 :
                                      tmp = "bg-yellow-400";
                                      break;
                                  case /* Fragment */3 :
                                      tmp = "bg-gray-400";
                                      break;
                                  
                                }
                                return React.createElement("div", {
                                            key: block.title,
                                            className: "flex justify-start cursor-grab text-gray-700 hover:text-blue-400 hover:bg-blue-200 bg-blue-100 rounded-md px-2 py-2 mt-2 mb-2",
                                            onClick: (function (param) {
                                                return Curry._1(onInspect, block);
                                              }),
                                            onDoubleClick: (function (param) {
                                                return Curry._1(onAdd, block);
                                              })
                                          }, React.createElement("span", {
                                                className: tmp + " h-2 w-2 m-2 rounded-full"
                                              }), React.createElement("div", {
                                                className: "flex-grow font-medium px-2 truncate"
                                              }, block.title), Belt_Array.keepMap(block.services, (function (service) {
                                                  return Belt_Option.map(Utils.serviceImageUrl(undefined, undefined, service), (function (param) {
                                                                var friendlyServiceName = param[1];
                                                                return React.createElement("img", {
                                                                            className: "rounded-full",
                                                                            style: {
                                                                              pointerEvents: "none"
                                                                            },
                                                                            title: friendlyServiceName,
                                                                            alt: friendlyServiceName,
                                                                            src: param[0]
                                                                          });
                                                              }));
                                                })));
                              }))))));
}

var BlockSearch = {
  make: Studio$BlockSearch
};

function Studio$NodeLabel(Props) {
  var onInspectBlock = Props.onInspectBlock;
  var block = Props.block;
  var onEditBlock = Props.onEditBlock;
  var schema = Props.schema;
  var match = React.useState(function () {
        return {
                isOpen: false
              };
      });
  var setState = match[1];
  var parsedOperation = Graphql.parse(block.body);
  var definition = Belt_Array.getExn(parsedOperation.definitions, 0);
  var services = Belt_Array.keepMap(block.services, (function (service) {
          return Belt_Option.map(Utils.serviceImageUrl(undefined, undefined, service), (function (param) {
                        var friendlyServiceName = param[1];
                        return React.createElement("img", {
                                    className: "shadow-lg rounded-full",
                                    style: {
                                      pointerEvents: "none"
                                    },
                                    title: friendlyServiceName,
                                    alt: friendlyServiceName,
                                    src: param[0]
                                  });
                      }));
        }));
  return React.createElement("div", {
              className: "flex align-middle items-center min-w-max flex-col",
              onContextMenu: (function ($$event) {
                  $$event.preventDefault();
                  return Belt_Option.forEach(onInspectBlock, (function (fn) {
                                return Curry._1(fn, block);
                              }));
                })
            }, React.createElement("div", {
                  className: "flex flex-row items-center justify-end"
                }, React.createElement("div", {
                      className: "p-2 hover:shadow-lg rounded-md border hover:border-gray-300 cursor-pointer m-2",
                      onClick: (function ($$event) {
                          $$event.stopPropagation();
                          $$event.preventDefault();
                          return Curry._1(setState, (function (oldState) {
                                        return {
                                                isOpen: !oldState.isOpen
                                              };
                                      }));
                        })
                    }, React.createElement(Icons.Inspect.make, {
                          color: "black"
                        })), React.createElement("div", {
                      className: "m-2"
                    }, services), React.createElement("div", {
                      className: "flex-1 inline-block"
                    }, block.title), React.createElement("div", {
                      className: "p-2 hover:shadow-lg rounded-md border hover:border-gray-300 cursor-pointer m-0",
                      onClick: (function ($$event) {
                          $$event.preventDefault();
                          return Curry._1(onEditBlock, block);
                        })
                    }, React.createElement(Icons.GraphQL.make, {
                          color: "black"
                        }))), React.createElement("div", undefined, React.createElement("div", {
                      className: "m-2 p-2 bg-gray-600 rounded-sm text-gray-200 " + (
                        match[0].isOpen ? "" : "hidden"
                      )
                    }, React.createElement(Inspector.GraphQLPreview.make, {
                          requestId: block.title,
                          schema: schema,
                          definition: definition,
                          onCopy: (function (path) {
                              var dataPath = path.join("?.");
                              var fullPath = "payload." + dataPath;
                              CopyToClipboard(fullPath);
                              
                            })
                        }))));
}

var NodeLabel = {
  make: Studio$NodeLabel
};

function diagramFromChain(chain, onEditBlock, onInspectBlock, schema, param) {
  var nodes = Belt_Array.map(chain.blocks, (function (block) {
          var variables = Card.getFirstVariables(block);
          var hasVariables = variables.length !== 0;
          var match = block.kind;
          var typ = match >= 3 ? "fragment" : (
              hasVariables ? "default" : "input"
            );
          return {
                  id: block.id.toString(),
                  type: typ,
                  data: {
                    label: React.createElement(Studio$NodeLabel, {
                          onInspectBlock: onInspectBlock,
                          block: block,
                          onEditBlock: onEditBlock,
                          schema: schema
                        })
                  },
                  position: {
                    x: 0,
                    y: 0
                  },
                  draggable: true,
                  connectable: typ !== "fragment",
                  style: {
                    width: "unset"
                  },
                  onClick: (function (param) {
                      alert("Clicked");
                      
                    })
                };
        }));
  var argDepEdges = Belt_Array.concatMany(Belt_Array.map(chain.blocks, (function (block) {
              var req = Belt_Array.getBy(chain.requests, (function (req) {
                      return req.id === block.title;
                    }));
              var target = block.id.toString();
              return Belt_Array.concatMany(Belt_Option.getWithDefault(Belt_Option.map(req, (function (req) {
                                    var ast = Graphql.parse(req.operation.body);
                                    var variables = Belt_Option.getWithDefault(Belt_Option.getExn(Belt_Array.get(ast.definitions, 0)).variableDefinitions, []);
                                    return Belt_Array.map(variables, (function (varDef) {
                                                  var varName = varDef.variable.name.value;
                                                  var argDep = Belt_Option.flatMap(Belt_Array.getBy(req.variableDependencies, (function (argDep) {
                                                              var match = argDep.name === varName;
                                                              var match$1 = argDep.dependency;
                                                              if (match && match$1.TAG === /* ArgumentDependency */0) {
                                                                return true;
                                                              } else {
                                                                return false;
                                                              }
                                                            })), (function (argDep) {
                                                          var dep = argDep.dependency;
                                                          if (dep.TAG === /* ArgumentDependency */0) {
                                                            return dep._0;
                                                          }
                                                          
                                                        }));
                                                  if (argDep === undefined) {
                                                    return [];
                                                  }
                                                  var edges = Belt_Array.keepMap(argDep.fromRequestIds, (function (requestId) {
                                                          var requestDependency = Belt_Array.getBy(chain.requests, (function (existingRequest) {
                                                                  return existingRequest.id === requestId;
                                                                }));
                                                          return Belt_Option.map(requestDependency, (function (requestDependency) {
                                                                        var source = requestDependency.operation.id.toString();
                                                                        var id = source + "-" + target;
                                                                        var edge = {
                                                                          id: id,
                                                                          source: source,
                                                                          target: target
                                                                        };
                                                                        return [
                                                                                id,
                                                                                edge
                                                                              ];
                                                                      }));
                                                        }));
                                                  return Belt_Array.reduce(edges, [
                                                                undefined,
                                                                []
                                                              ], (function (param, param$1) {
                                                                  var id = param$1[0];
                                                                  var edges = param[1];
                                                                  var distinct = param[0];
                                                                  if (Belt_SetString.has(distinct, id)) {
                                                                    return [
                                                                            distinct,
                                                                            edges
                                                                          ];
                                                                  } else {
                                                                    return [
                                                                            Belt_SetString.add(distinct, id),
                                                                            Belt_Array.concat(edges, [param$1[1]])
                                                                          ];
                                                                  }
                                                                }))[1];
                                                }));
                                  })), []));
            })));
  var reqEdge = Belt_Array.concatMany(Belt_Array.map(chain.requests, (function (request) {
              var target = request.operation.id.toString();
              return Belt_Array.keepMap(request.dependencyRequestIds, (function (requestId) {
                            var reifiedRequest = Belt_Array.getBy(chain.requests, (function (req) {
                                    return req.id === requestId;
                                  }));
                            return Belt_Option.map(reifiedRequest, (function (requestDependency) {
                                          var source = requestDependency.operation.id.toString();
                                          var id = source + "-" + target;
                                          return {
                                                  id: id,
                                                  source: source,
                                                  target: target
                                                };
                                        }));
                          }));
            })));
  var match = Belt_Array.reduce(Belt_Array.concat(argDepEdges, reqEdge), [
        undefined,
        []
      ], (function (param, edge) {
          var edges = param[1];
          var distinct = param[0];
          if (Belt_SetString.has(distinct, edge.id)) {
            return [
                    distinct,
                    edges
                  ];
          } else {
            return [
                    Belt_SetString.add(distinct, edge.id),
                    Belt_Array.concat(edges, [edge])
                  ];
          }
        }));
  var edges = Belt_Array.map(match[1], (function (param) {
          return {
                  id: param.id,
                  source: param.source,
                  target: param.target,
                  animated: true,
                  type: "step"
                };
        }));
  var layoutedElements = Dagre.getLayoutedElements(nodes, edges, 10, 50);
  return {
          nodes: nodes,
          edges: edges,
          elements: layoutedElements
        };
}

var backgroundStyle = {
  backgroundColor: "rgb(60, 60, 60)",
  backgroundImage: "linear-gradient(0deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, rgba(255, 255, 255, 0.05) 25%, rgba(255, 255, 255, 0.05) 26%, transparent 27%, transparent 74%, rgba(255, 255, 255, 0.05) 75%, rgba(255, 255, 255, 0.05) 76%, transparent 77%, transparent)",
  display: "flex",
  height: "100%",
  backgroundSize: "50px 50px",
  borderRadius: "0px"
};

function requestScriptTypeScriptSignature(request, schema, chain) {
  var upstreamArgDepRequestIds = Belt_Array.concatMany(Belt_Array.keepMap(request.variableDependencies, (function (varDep) {
              var argDep = varDep.dependency;
              if (argDep.TAG === /* ArgumentDependency */0) {
                return argDep._0.fromRequestIds;
              }
              
            })));
  var upstreamRequestDependencyIds = request.dependencyRequestIds;
  var upstreamRequestIds = Utils.distinctStrings(Belt_Array.concat(upstreamArgDepRequestIds, upstreamRequestDependencyIds));
  var dependencyRequests = Belt_Array.keepMap(chain.requests, (function (request) {
          var match = upstreamRequestIds.indexOf(request.id);
          if (match === -1) {
            return ;
          }
          var ast = Graphql.parse(request.operation.body);
          var dependencyRequest = Belt_Array.get(ast.definitions, 0);
          return Belt_Option.map(dependencyRequest, (function (dependencyRequest) {
                        var tsSignature = GraphQLJs.Mock.typeScriptForOperation(schema, dependencyRequest);
                        return [
                                request.id,
                                tsSignature
                              ];
                      }));
        }));
  Belt_Array.reduce(dependencyRequests, {}, (function (acc, param) {
          acc[param[0]] = param[1];
          return acc;
        }));
  var fields = Belt_Array.map(dependencyRequests, (function (param) {
            return "\"" + param[0] + "\": " + param[1];
          })).join(", ");
  var inputType = "{" + fields + "}";
  var inputType$1;
  switch (inputType) {
    case "" :
    case "{}" :
        inputType$1 = "null";
        break;
    default:
      inputType$1 = inputType;
  }
  var operationDef = Belt_Array.get(Graphql.parse(request.operation.body).definitions, 0);
  var outputTypeForVariables = Belt_Option.getWithDefault(Belt_Option.map(operationDef, (function (operationDef) {
              var signature = GraphQLJs.Mock.typeScriptSignatureForOperationVariables(Belt_Array.keepMap(request.variableDependencies, (function (varDep) {
                          var argDep = varDep.dependency;
                          if (argDep.TAG === /* ArgumentDependency */0) {
                            return argDep._0.name;
                          }
                          
                        })), schema, operationDef);
              if (signature === "{}") {
                return "EmptyObject";
              } else {
                return signature;
              }
            })), "// No operation definition for request");
  var names = Chain.requestScriptNames(request);
  var outputType = "export type " + names.returnTypeName + " = " + outputTypeForVariables;
  var inputType$2 = "export type " + names.inputTypeName + " = " + inputType$1;
  return {
          functionFromScriptInputType: inputType$2,
          functionFromScriptOutputType: outputType,
          functionFromScriptName: names.functionName
        };
}

function monacoTypelibForChain(schema, chain) {
  var types = Belt_Array.map(chain.requests, (function (request) {
          return requestScriptTypeScriptSignature(request, schema, chain);
        }));
  var dDotTsDefs = Belt_Array.map(types, (function (typeSigs) {
            return typeSigs.functionFromScriptInputType + "\n" + typeSigs.functionFromScriptOutputType + "\n";
          })).join("\n\n");
  var dDotTs = "type EmptyObject = Record<any, never>\n\n" + dDotTsDefs;
  var names = Belt_Array.map(chain.requests, Chain.requestScriptNames);
  var importedNames = Belt_Array.concatMany(Belt_Array.map(names, (function (param) {
                return [
                        param.inputTypeName,
                        param.returnTypeName
                      ];
              }))).join(", ");
  var importLine = "import { " + importedNames + " } from 'oneGraphStudio';";
  return {
          importLine: importLine,
          dDotTs: dDotTs
        };
}

function Studio$Script(Props) {
  var schema = Props.schema;
  var chain = Props.chain;
  var onChange = Props.onChange;
  var className = Props.className;
  var onMount = Props.onMount;
  var content = chain.script;
  var editor = React.useRef(undefined);
  var monaco = React.useRef(undefined);
  var match = monacoTypelibForChain(schema, chain);
  var types = match.dDotTs;
  React.useEffect((function () {
          Belt_Option.forEach(editor.current, (function (editor) {
                  var position = editor.getPosition();
                  editor.setValue(content);
                  editor.setPosition(position);
                  
                }));
          
        }), [content]);
  React.useEffect((function () {
          Belt_Option.forEach(monaco.current, (function (monaco) {
                  var match = monacoTypelibForChain(schema, chain);
                  var importLine = match.importLine;
                  BsReactMonaco.TypeScript.addLib(monaco, match.dDotTs, content);
                  var hasImport = Belt_Option.isSome(Caml_option.null_to_opt(chain.script.match(new RegExp("import[\\s\\S.]+from[\\s\\S]+'oneGraphStudio';"))));
                  return Curry._1(onChange, hasImport ? chain.script.replace(new RegExp("import[\\s\\S.]+from[\\s\\S]+'oneGraphStudio';"), importLine) : importLine + "\n\n" + chain.script);
                }));
          
        }), [types]);
  var filename = "file:///main.tsx";
  var tmp = {
    defaultValue: content,
    language: "typescript",
    theme: "vs-dark",
    options: {
      minimap: {
        enabled: false
      }
    },
    onChange: (function (newScript, param) {
        return Curry._1(onChange, newScript);
      }),
    onMount: (function (editorHandle, monacoInstance) {
        BsReactMonaco.TypeScript.addLib(monacoInstance, types, content);
        BsReactMonaco.registerPrettier(monacoInstance);
        var modelOptions = {
          tabSize: 2
        };
        editor.current = Caml_option.some(editorHandle);
        monaco.current = Caml_option.some(monacoInstance);
        editorHandle.getModel(filename).updateOptions(modelOptions);
        return Curry._2(onMount, editorHandle, monacoInstance);
      }),
    path: filename
  };
  if (className !== undefined) {
    tmp.className = Caml_option.valFromOption(className);
  }
  var editor$1 = React.createElement(BsReactMonaco.Editor.make, tmp);
  return React.createElement(React.Fragment, undefined, editor$1);
}

var Script = {
  make: Studio$Script
};

function Studio$Modal(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "flex items-center justify-center fixed left-0 bottom-0 w-full h-full bg-gray-800 bg-opacity-60",
              style: {
                zIndex: "9999"
              }
            }, React.createElement("div", {
                  className: "bg-white rounded-lg w-4/5 h-4/5"
                }, React.createElement("div", {
                      className: "flex flex-col p-1 h-full"
                    }, React.createElement("div", {
                          className: "flex h-full"
                        }, children))));
}

var Modal = {
  make: Studio$Modal
};

function Studio$Main(Props) {
  var schema = Props.schema;
  var initialChain = Props.initialChain;
  var config = Props.config;
  var match = React.useState(function () {
        return [];
      });
  var setMissingAuthServices = match[1];
  var match$1 = React.useState(function () {
        var scriptFunctions;
        try {
          scriptFunctions = Acorn.collectExportedFunctionNames(Acorn$1.parse(initialChain.script, {
                    ecmaVersion: 2020,
                    sourceType: "module"
                  }));
        }
        catch (exn){
          scriptFunctions = [];
        }
        var diagram = diagramFromChain(initialChain, (function (_block) {
                
              }), (function (_block) {
                
              }), schema, undefined);
        var inspected = {
          TAG: 0,
          _0: initialChain,
          [Symbol.for("name")]: "Nothing"
        };
        return {
                diagram: diagram,
                card: Card.watchTwitterFollower,
                schema: schema,
                chain: initialChain,
                compiledChain: compileChain(schema, initialChain),
                chainResult: undefined,
                scriptFunctions: scriptFunctions,
                chainExecutionResults: undefined,
                blocks: Card.blocks,
                inspected: inspected,
                blockEdit: /* Nothing */0,
                scriptEditor: {
                  isOpen: true,
                  editor: undefined,
                  monaco: undefined
                },
                savedChainId: undefined,
                requestValueCache: {},
                debugUIItems: []
              };
      });
  var setState = match$1[1];
  var state = match$1[0];
  var selectRequestFunctionScript = function (request) {
    var names = Chain.requestScriptNames(request);
    var functionName = names.functionName;
    var source = state.chain.script;
    var sourceFile = Typescript.createSourceFile("main.ts", source, 99, true);
    var pos = TypeScript.findFnPos(sourceFile, functionName);
    return Belt_Option.forEach(pos, (function (param) {
                  var end = param[1];
                  var start = param[0];
                  return Belt_Option.forEach(state.scriptEditor.editor, (function (editor) {
                                var model = editor.getModel("file://main.tsx");
                                var start$1 = model.getPositionAt(start);
                                var end$1 = model.getPositionAt(end);
                                editor.revealLineInCenter(start$1.lineNumber, 1);
                                editor.setSelection({
                                      startLineNumber: start$1.lineNumber,
                                      startColumn: start$1.column,
                                      endLineNumber: end$1.lineNumber,
                                      endColumn: end$1.column
                                    });
                                
                              }));
                }));
  };
  var diagramFromChain$1 = function (chain) {
    return diagramFromChain(chain, (function (block) {
                  return Curry._1(setState, (function (oldState) {
                                return {
                                        diagram: oldState.diagram,
                                        card: oldState.card,
                                        schema: oldState.schema,
                                        chain: oldState.chain,
                                        compiledChain: oldState.compiledChain,
                                        chainResult: oldState.chainResult,
                                        scriptFunctions: oldState.scriptFunctions,
                                        chainExecutionResults: oldState.chainExecutionResults,
                                        blocks: oldState.blocks,
                                        inspected: oldState.inspected,
                                        blockEdit: {
                                          TAG: 1,
                                          _0: block,
                                          [Symbol.for("name")]: "Edit"
                                        },
                                        scriptEditor: oldState.scriptEditor,
                                        savedChainId: oldState.savedChainId,
                                        requestValueCache: oldState.requestValueCache,
                                        debugUIItems: oldState.debugUIItems
                                      };
                              }));
                }), undefined, schema, undefined);
  };
  var match$2 = ReactFlowRenderer$1.useZoomPanHelper();
  var fitView = match$2.fitView;
  React.useEffect((function () {
          try {
            var parsedScript = Acorn$1.parse(state.chain.script, {
                  ecmaVersion: 2020,
                  sourceType: "module"
                });
            var functionNames = Acorn.collectExportedFunctionNames(parsedScript);
            Curry._1(setState, (function (oldState) {
                    return {
                            diagram: oldState.diagram,
                            card: oldState.card,
                            schema: oldState.schema,
                            chain: oldState.chain,
                            compiledChain: oldState.compiledChain,
                            chainResult: oldState.chainResult,
                            scriptFunctions: functionNames,
                            chainExecutionResults: oldState.chainExecutionResults,
                            blocks: oldState.blocks,
                            inspected: oldState.inspected,
                            blockEdit: oldState.blockEdit,
                            scriptEditor: oldState.scriptEditor,
                            savedChainId: oldState.savedChainId,
                            requestValueCache: oldState.requestValueCache,
                            debugUIItems: oldState.debugUIItems
                          };
                  }));
          }
          catch (exn){
            
          }
          
        }), [state.chain.script]);
  React.useEffect((function () {
          if (state.chain.requests.length > 3) {
            Curry._1(fitView, {
                  padding: 0.2,
                  includeHiddenNodes: false
                });
          }
          
        }), [state.chain.requests.length]);
  var onExecuteRequest = function (request, variables) {
    var ast = Graphql.parse(request.operation.body);
    var operationName = Caml_array.get(ast.definitions, 0).name.value;
    var promise = OneGraphRe.fetchOneGraph(OneGraphRe.auth, request.operation.body, operationName, Caml_option.some(variables));
    promise.then(function (result) {
          return Promise.resolve(Curry._1(setState, (function (oldState) {
                            oldState.requestValueCache[request.id] = result;
                            var newOne = Js_dict.fromArray(Js_dict.entries(oldState.requestValueCache));
                            return {
                                    diagram: oldState.diagram,
                                    card: oldState.card,
                                    schema: oldState.schema,
                                    chain: oldState.chain,
                                    compiledChain: oldState.compiledChain,
                                    chainResult: oldState.chainResult,
                                    scriptFunctions: oldState.scriptFunctions,
                                    chainExecutionResults: oldState.chainExecutionResults,
                                    blocks: oldState.blocks,
                                    inspected: oldState.inspected,
                                    blockEdit: oldState.blockEdit,
                                    scriptEditor: oldState.scriptEditor,
                                    savedChainId: oldState.savedChainId,
                                    requestValueCache: newOne,
                                    debugUIItems: oldState.debugUIItems
                                  };
                          })));
        });
    
  };
  var addBlock = function (superBlock) {
    var ast = Graphql.parse(superBlock.body);
    var blocks = Belt_Array.map(ast.definitions, (function (definition) {
            var services = Belt_Array.map(GraphQLUtils.gatherAllReferencedServices(schema, definition), (function (service) {
                    return service.slug;
                  }));
            var blank = makeBlankBlock(undefined);
            var match = definition.operation;
            return {
                    id: Uuid$1.v4(),
                    title: definition.name.value,
                    description: blank.description,
                    body: Graphql.print(definition),
                    kind: match !== undefined ? (
                        match === "mutation" ? /* Mutation */1 : (
                            match === "subscription" ? /* Subscription */2 : /* Query */0
                          )
                      ) : /* Fragment */3,
                    contributedBy: blank.contributedBy,
                    services: services
                  };
          }));
    console.log("Adding Blocks: ", blocks, blocks.length);
    var inspectedReq = {
      contents: undefined
    };
    var newChain = Belt_Array.reduce(blocks, state.chain, (function (newChain, block) {
            var match = block.kind;
            if (match >= 3) {
              return {
                      name: newChain.name,
                      script: newChain.script,
                      requests: newChain.requests,
                      blocks: Belt_Array.concat(newChain.blocks, [block])
                    };
            }
            var operationDoc = Graphql.parse(block.body);
            var definition = Caml_array.get(operationDoc.definitions, 0);
            var variableNames = GraphQLUtils.getOperationVariables(definition);
            var variableDependencies = Belt_Array.map(variableNames, (function (param) {
                    var variableName = param[0];
                    return {
                            name: variableName,
                            dependency: {
                              TAG: 1,
                              _0: {
                                name: variableName,
                                value: {
                                  TAG: 1,
                                  _0: variableName,
                                  [Symbol.for("name")]: "Variable"
                                }
                              },
                              [Symbol.for("name")]: "Direct"
                            }
                          };
                  }));
            var newReq_id = block.title;
            var newReq_dependencyRequestIds = [];
            var newReq = {
              id: newReq_id,
              variableDependencies: variableDependencies,
              operation: block,
              dependencyRequestIds: newReq_dependencyRequestIds
            };
            inspectedReq.contents = newReq;
            var names = Chain.requestScriptNames(newReq);
            var nameExistsInScript = Belt_Option.isSome(Caml_option.null_to_opt(newChain.script.match(new RegExp("export function " + names.functionName))));
            var newScript = nameExistsInScript ? newChain.script : newChain.script + ("\n\nexport function " + names.functionName + " (payload : " + names.inputTypeName + ") : " + names.returnTypeName + " {\n  return {}\n}");
            var newChain_name = newChain.name;
            var newChain_requests = Belt_Array.concat(newChain.requests, [newReq]);
            var newChain_blocks = Belt_Array.concat(newChain.blocks, [block]);
            var newChain$1 = {
              name: newChain_name,
              script: newScript,
              requests: newChain_requests,
              blocks: newChain_blocks
            };
            console.log("\tNew req/block count: ", newChain_blocks.length, newChain_requests.length);
            var match$1 = monacoTypelibForChain(schema, newChain$1);
            var importLine = match$1.importLine;
            var hasImport = Belt_Option.isSome(Caml_option.null_to_opt(newScript.match(new RegExp("import[\\s\\S.]+from[\\s\\S]+'oneGraphStudio';"))));
            var newScript$1 = hasImport ? newScript.replace(new RegExp("import[\\s\\S.]+from[\\s\\S]+'oneGraphStudio';"), importLine) : importLine + "\n\n" + newScript;
            return {
                    name: newChain_name,
                    script: newScript$1,
                    requests: newChain_requests,
                    blocks: newChain_blocks
                  };
          }));
    var diagram = diagramFromChain$1(newChain);
    var inspected = Belt_Option.getWithDefault(Belt_Option.map(inspectedReq.contents, (function (request) {
                return {
                        TAG: 2,
                        chain: newChain,
                        request: request,
                        [Symbol.for("name")]: "Request"
                      };
              })), state.inspected);
    return Curry._1(setState, (function (oldState) {
                  return {
                          diagram: diagram,
                          card: oldState.card,
                          schema: oldState.schema,
                          chain: newChain,
                          compiledChain: oldState.compiledChain,
                          chainResult: oldState.chainResult,
                          scriptFunctions: oldState.scriptFunctions,
                          chainExecutionResults: oldState.chainExecutionResults,
                          blocks: oldState.blocks,
                          inspected: inspected,
                          blockEdit: oldState.blockEdit,
                          scriptEditor: oldState.scriptEditor,
                          savedChainId: oldState.savedChainId,
                          requestValueCache: oldState.requestValueCache,
                          debugUIItems: oldState.debugUIItems
                        };
                }));
  };
  var removeRequest = function (oldChain, targetRequest) {
    var newRequests = Belt_Array.keepMap(oldChain.requests, (function (request) {
            if (request.id === targetRequest.id) {
              return ;
            }
            var varDeps = Belt_Array.map(request.variableDependencies, (function (varDep) {
                    var argDep = varDep.dependency;
                    var dependency;
                    if (argDep.TAG === /* ArgumentDependency */0) {
                      var argDep$1 = argDep._0;
                      dependency = {
                        TAG: 0,
                        _0: {
                          functionFromScript: argDep$1.functionFromScript,
                          maxRecur: argDep$1.maxRecur,
                          ifMissing: argDep$1.ifMissing,
                          ifList: argDep$1.ifList,
                          fromRequestIds: Belt_Array.keep(argDep$1.fromRequestIds, (function (id) {
                                  return id !== targetRequest.id;
                                })),
                          name: argDep$1.name
                        },
                        [Symbol.for("name")]: "ArgumentDependency"
                      };
                    } else {
                      dependency = argDep;
                    }
                    return {
                            name: varDep.name,
                            dependency: dependency
                          };
                  }));
            return {
                    id: request.id,
                    variableDependencies: varDeps,
                    operation: request.operation,
                    dependencyRequestIds: Belt_Array.keep(request.dependencyRequestIds, (function (id) {
                            return id !== targetRequest.id;
                          }))
                  };
          }));
    return {
            name: oldChain.name,
            script: oldChain.script,
            requests: newRequests,
            blocks: Belt_Array.keep(oldChain.blocks, (function (oldBlock) {
                    return Caml_obj.caml_notequal(oldBlock, targetRequest.operation);
                  }))
          };
  };
  var removeEdge = function (oldChain, dependencyId, targetRequestId) {
    var newRequests = Belt_Array.map(oldChain.requests, (function (request) {
            if (request.id !== targetRequestId) {
              return request;
            }
            var varDeps = Belt_Array.map(request.variableDependencies, (function (varDep) {
                    var argDep = varDep.dependency;
                    var dependency;
                    if (argDep.TAG === /* ArgumentDependency */0) {
                      var argDep$1 = argDep._0;
                      dependency = {
                        TAG: 0,
                        _0: {
                          functionFromScript: argDep$1.functionFromScript,
                          maxRecur: argDep$1.maxRecur,
                          ifMissing: argDep$1.ifMissing,
                          ifList: argDep$1.ifList,
                          fromRequestIds: Belt_Array.keep(argDep$1.fromRequestIds, (function (id) {
                                  return id !== dependencyId;
                                })),
                          name: argDep$1.name
                        },
                        [Symbol.for("name")]: "ArgumentDependency"
                      };
                    } else {
                      dependency = argDep;
                    }
                    return {
                            name: varDep.name,
                            dependency: dependency
                          };
                  }));
            var newRequest_id = request.id;
            var newRequest_operation = request.operation;
            var newRequest_dependencyRequestIds = Belt_Array.keep(request.dependencyRequestIds, (function (id) {
                    return id !== dependencyId;
                  }));
            var newRequest = {
              id: newRequest_id,
              variableDependencies: varDeps,
              operation: newRequest_operation,
              dependencyRequestIds: newRequest_dependencyRequestIds
            };
            console.log("Removed edge for request: ", request, newRequest, dependencyId);
            return newRequest;
          }));
    return {
            name: oldChain.name,
            script: oldChain.script,
            requests: newRequests,
            blocks: oldChain.blocks
          };
  };
  var blockSearch = React.createElement(Studio$BlockSearch, {
        onAdd: addBlock,
        onInspect: (function (block) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  diagram: oldState.diagram,
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chain: oldState.chain,
                                  compiledChain: oldState.compiledChain,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  blocks: oldState.blocks,
                                  inspected: {
                                    TAG: 1,
                                    _0: block,
                                    [Symbol.for("name")]: "Block"
                                  },
                                  blockEdit: oldState.blockEdit,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems
                                };
                        }));
          }),
        blocks: state.blocks,
        onCreate: (function (param) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  diagram: oldState.diagram,
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chain: oldState.chain,
                                  compiledChain: oldState.compiledChain,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  blocks: oldState.blocks,
                                  inspected: oldState.inspected,
                                  blockEdit: {
                                    TAG: 0,
                                    _0: makeBlankBlock(undefined),
                                    [Symbol.for("name")]: "Create"
                                  },
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems
                                };
                        }));
          })
      });
  var sidebar = React.createElement(Inspector.make, {
        inspected: state.inspected,
        onAddBlock: addBlock,
        onChainUpdated: (function (newChain) {
            var block = state.inspected;
            var inspected;
            switch (block.TAG | 0) {
              case /* Nothing */0 :
                  inspected = {
                    TAG: 0,
                    _0: newChain,
                    [Symbol.for("name")]: "Nothing"
                  };
                  break;
              case /* Block */1 :
                  inspected = {
                    TAG: 1,
                    _0: block._0,
                    [Symbol.for("name")]: "Block"
                  };
                  break;
              case /* Request */2 :
                  var request = Belt_Option.getWithDefault(Belt_Array.getBy(newChain.requests, (function (existingRequest) {
                              return existingRequest.id === block.request.id;
                            })), block.request);
                  inspected = {
                    TAG: 2,
                    chain: newChain,
                    request: request,
                    [Symbol.for("name")]: "Request"
                  };
                  break;
              case /* RequestArgument */3 :
                  var request$1 = block.request;
                  var request$2 = Belt_Option.getWithDefault(Belt_Array.getBy(newChain.requests, (function (existingRequest) {
                              return existingRequest.id === request$1.id;
                            })), request$1);
                  inspected = {
                    TAG: 3,
                    chain: newChain,
                    request: request$2,
                    variableName: block.variableName,
                    [Symbol.for("name")]: "RequestArgument"
                  };
                  break;
              
            }
            var diagram = diagramFromChain$1(newChain);
            return Curry._1(setState, (function (oldState) {
                          return {
                                  diagram: diagram,
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chain: newChain,
                                  compiledChain: oldState.compiledChain,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  blocks: oldState.blocks,
                                  inspected: inspected,
                                  blockEdit: oldState.blockEdit,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems
                                };
                        }));
          }),
        onReset: (function (param) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  diagram: oldState.diagram,
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chain: oldState.chain,
                                  compiledChain: oldState.compiledChain,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  blocks: oldState.blocks,
                                  inspected: {
                                    TAG: 0,
                                    _0: state.chain,
                                    [Symbol.for("name")]: "Nothing"
                                  },
                                  blockEdit: oldState.blockEdit,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems
                                };
                        }));
          }),
        chain: state.chain,
        schema: state.schema,
        chainExecutionResults: state.chainExecutionResults,
        onLogin: (function (service) {
            var __x = OneGraphRe.auth.login(service);
            __x.then(function (param) {
                  var __x = OneGraphRe.auth.isLoggedIn(service);
                  return __x.then(function (isLoggedIn) {
                              return Promise.resolve(isLoggedIn ? Curry._1(setMissingAuthServices, (function (oldMissingAuthServices) {
                                                  return Belt_Array.keep(oldMissingAuthServices, (function (oldService) {
                                                                return oldService !== service;
                                                              }));
                                                })) : undefined);
                            });
                });
            
          }),
        transformAndExecuteChain: (function (variables) {
            var __x = Inspector.transformAndExecuteChain(state.chain, variables);
            __x.then(function (result) {
                  return Promise.resolve(Curry._1(setState, (function (oldState) {
                                    return {
                                            diagram: oldState.diagram,
                                            card: oldState.card,
                                            schema: oldState.schema,
                                            chain: oldState.chain,
                                            compiledChain: oldState.compiledChain,
                                            chainResult: oldState.chainResult,
                                            scriptFunctions: oldState.scriptFunctions,
                                            chainExecutionResults: result,
                                            blocks: oldState.blocks,
                                            inspected: oldState.inspected,
                                            blockEdit: oldState.blockEdit,
                                            scriptEditor: oldState.scriptEditor,
                                            savedChainId: oldState.savedChainId,
                                            requestValueCache: oldState.requestValueCache,
                                            debugUIItems: oldState.debugUIItems
                                          };
                                  })));
                });
            
          }),
        onPersistChain: (function (param) {
            var compiled = Inspector.transformChain(state.chain);
            var targetChain = compiled.chains[0];
            var freeVariables = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
                    return exposed.exposedName;
                  }));
            return OneGraphRe.persistQuery(config.oneGraphAppId, config.persistQueryToken, compiled.operationDoc, freeVariables, config.chainAccessToken, undefined, (function (results) {
                          try {
                            var docId = results.data.oneGraph.createPersistedQuery.persistedQuery.id;
                            Chain.saveToLocalStorage(state.chain, docId);
                            return Curry._1(setState, (function (oldState) {
                                          return {
                                                  diagram: oldState.diagram,
                                                  card: oldState.card,
                                                  schema: oldState.schema,
                                                  chain: oldState.chain,
                                                  compiledChain: oldState.compiledChain,
                                                  chainResult: oldState.chainResult,
                                                  scriptFunctions: oldState.scriptFunctions,
                                                  chainExecutionResults: oldState.chainExecutionResults,
                                                  blocks: oldState.blocks,
                                                  inspected: oldState.inspected,
                                                  blockEdit: oldState.blockEdit,
                                                  scriptEditor: oldState.scriptEditor,
                                                  savedChainId: docId,
                                                  requestValueCache: oldState.requestValueCache,
                                                  debugUIItems: oldState.debugUIItems
                                                };
                                        }));
                          }
                          catch (raw_ex){
                            var ex = Caml_js_exceptions.internalToOCamlException(raw_ex);
                            console.log("Error saving chain locally", ex);
                            return ;
                          }
                        }));
          }),
        savedChainId: state.savedChainId,
        onRequestCodeInspected: selectRequestFunctionScript,
        onExecuteRequest: onExecuteRequest,
        requestValueCache: state.requestValueCache,
        onDeleteRequest: (function (targetRequest) {
            return Curry._1(setState, (function (oldState) {
                          var newChain = removeRequest(oldState.chain, targetRequest);
                          var diagram = diagramFromChain$1(newChain);
                          return {
                                  diagram: diagram,
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chain: newChain,
                                  compiledChain: oldState.compiledChain,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  blocks: oldState.blocks,
                                  inspected: {
                                    TAG: 0,
                                    _0: newChain,
                                    [Symbol.for("name")]: "Nothing"
                                  },
                                  blockEdit: oldState.blockEdit,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems
                                };
                        }));
          }),
        onDeleteEdge: (function (targetRequestId, dependencyId) {
            return Curry._1(setState, (function (oldState) {
                          console.log("Remove id from", dependencyId, targetRequestId);
                          var newChain = removeEdge(oldState.chain, dependencyId, targetRequestId);
                          var diagram = diagramFromChain$1(newChain);
                          return {
                                  diagram: diagram,
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chain: newChain,
                                  compiledChain: oldState.compiledChain,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  blocks: oldState.blocks,
                                  inspected: {
                                    TAG: 0,
                                    _0: newChain,
                                    [Symbol.for("name")]: "Nothing"
                                  },
                                  blockEdit: oldState.blockEdit,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems
                                };
                        }));
          })
      });
  var tmp = {
    schema: state.schema,
    chain: state.chain,
    onChange: (function (newScript) {
        try {
          var init = state.chain;
          var newChain_name = init.name;
          var newChain_requests = init.requests;
          var newChain_blocks = init.blocks;
          var newChain = {
            name: newChain_name,
            script: newScript,
            requests: newChain_requests,
            blocks: newChain_blocks
          };
          var functionNames = [];
          var block = state.inspected;
          var inspected;
          switch (block.TAG | 0) {
            case /* Nothing */0 :
                inspected = {
                  TAG: 0,
                  _0: newChain,
                  [Symbol.for("name")]: "Nothing"
                };
                break;
            case /* Block */1 :
                inspected = {
                  TAG: 1,
                  _0: block._0,
                  [Symbol.for("name")]: "Block"
                };
                break;
            case /* Request */2 :
                var request = Belt_Option.getWithDefault(Belt_Array.getBy(newChain_requests, (function (existingRequest) {
                            return existingRequest.id === block.request.id;
                          })), block.request);
                inspected = {
                  TAG: 2,
                  chain: newChain,
                  request: request,
                  [Symbol.for("name")]: "Request"
                };
                break;
            case /* RequestArgument */3 :
                var request$1 = block.request;
                var request$2 = Belt_Option.getWithDefault(Belt_Array.getBy(newChain_requests, (function (existingRequest) {
                            return existingRequest.id === request$1.id;
                          })), request$1);
                inspected = {
                  TAG: 3,
                  chain: newChain,
                  request: request$2,
                  variableName: block.variableName,
                  [Symbol.for("name")]: "RequestArgument"
                };
                break;
            
          }
          return Curry._1(setState, (function (oldState) {
                        return {
                                diagram: oldState.diagram,
                                card: oldState.card,
                                schema: oldState.schema,
                                chain: newChain,
                                compiledChain: oldState.compiledChain,
                                chainResult: oldState.chainResult,
                                scriptFunctions: functionNames,
                                chainExecutionResults: oldState.chainExecutionResults,
                                blocks: oldState.blocks,
                                inspected: inspected,
                                blockEdit: oldState.blockEdit,
                                scriptEditor: oldState.scriptEditor,
                                savedChainId: oldState.savedChainId,
                                requestValueCache: oldState.requestValueCache,
                                debugUIItems: oldState.debugUIItems
                              };
                      }));
        }
        catch (raw_err){
          var err = Caml_js_exceptions.internalToOCamlException(raw_err);
          console.log("Error updating script from editor: ", err);
          return ;
        }
      }),
    onMount: (function (editor, monaco) {
        return Curry._1(setState, (function (oldState) {
                      var init = oldState.scriptEditor;
                      return {
                              diagram: oldState.diagram,
                              card: oldState.card,
                              schema: oldState.schema,
                              chain: oldState.chain,
                              compiledChain: oldState.compiledChain,
                              chainResult: oldState.chainResult,
                              scriptFunctions: oldState.scriptFunctions,
                              chainExecutionResults: oldState.chainExecutionResults,
                              blocks: oldState.blocks,
                              inspected: oldState.inspected,
                              blockEdit: oldState.blockEdit,
                              scriptEditor: {
                                isOpen: init.isOpen,
                                editor: Caml_option.some(editor),
                                monaco: Caml_option.some(monaco)
                              },
                              savedChainId: oldState.savedChainId,
                              requestValueCache: oldState.requestValueCache,
                              debugUIItems: oldState.debugUIItems
                            };
                    }));
      })
  };
  var tmp$1 = state.scriptEditor.isOpen ? undefined : "none";
  if (tmp$1 !== undefined) {
    tmp.className = Caml_option.valFromOption(tmp$1);
  }
  var match$3 = state.blockEdit;
  var tmp$2;
  if (typeof match$3 === "number") {
    tmp$2 = null;
  } else {
    var editor = React.createElement(BlockEditor.make, {
          schema: state.schema,
          block: match$3._0,
          onClose: (function (param) {
              return Curry._1(setState, (function (oldState) {
                            return {
                                    diagram: oldState.diagram,
                                    card: oldState.card,
                                    schema: oldState.schema,
                                    chain: oldState.chain,
                                    compiledChain: oldState.compiledChain,
                                    chainResult: oldState.chainResult,
                                    scriptFunctions: oldState.scriptFunctions,
                                    chainExecutionResults: oldState.chainExecutionResults,
                                    blocks: oldState.blocks,
                                    inspected: oldState.inspected,
                                    blockEdit: /* Nothing */0,
                                    scriptEditor: oldState.scriptEditor,
                                    savedChainId: oldState.savedChainId,
                                    requestValueCache: oldState.requestValueCache,
                                    debugUIItems: oldState.debugUIItems
                                  };
                          }));
            }),
          onSave: (function (initial, superBlock) {
              var ast = Graphql.parse(superBlock.body);
              var initialAst = Caml_array.get(Graphql.parse(initial.body).definitions, 0);
              var newOperationDefinitionCount = Belt_Array.keep(ast.definitions, (function (definition) {
                      var match = definition.kind;
                      if (match === "FragmentDefinition") {
                        return false;
                      } else {
                        return true;
                      }
                    })).length;
              console.log("Initial block: ", initialAst.name.value, initial.id);
              var blocks = Belt_Array.mapWithIndex(ast.definitions, (function (_idx, definition) {
                      var match = definition.kind;
                      var kind = match === "FragmentDefinition" ? "fragment" : definition.operation;
                      var sameNameAsInitial = initialAst.name.value === definition.name.value;
                      var match$1 = initial.kind;
                      var sameOperationKindChanged = newOperationDefinitionCount !== 0 ? (
                          newOperationDefinitionCount !== 1 ? false : kind !== "fragment"
                        ) : (
                          match$1 >= 3 ? kind === "fragment" : false
                        );
                      var sameOperationAsInitial = sameNameAsInitial || sameOperationKindChanged ? true : false;
                      console.log("sameOperationAsInitial", sameNameAsInitial, sameOperationKindChanged, definition.name.value);
                      var services = Belt_Array.map(GraphQLUtils.gatherAllReferencedServices(schema, definition), (function (service) {
                              return service.slug;
                            }));
                      var blank = makeBlankBlock(undefined);
                      var title = Belt_Option.getWithDefault(definition.name.value, "Untitled");
                      return {
                              id: sameOperationAsInitial ? initial.id : Uuid$1.v4(),
                              title: title,
                              description: blank.description,
                              body: Graphql.print(definition),
                              kind: kind === "mutation" ? /* Mutation */1 : (
                                  kind === "fragment" ? /* Fragment */3 : (
                                      kind === "subscription" ? /* Subscription */2 : /* Query */0
                                    )
                                ),
                              contributedBy: blank.contributedBy,
                              services: services
                            };
                    }));
              try {
                return Curry._1(setState, (function (oldState) {
                              var newChain = Belt_Array.reduce(blocks, oldState.chain, (function (newChain, block) {
                                      var match = block.kind;
                                      if (match >= 3) {
                                        return {
                                                name: newChain.name,
                                                script: newChain.script,
                                                requests: newChain.requests,
                                                blocks: Belt_Array.concat(Belt_Array.keep(newChain.blocks, (function (existingBlock) {
                                                            return Caml_obj.caml_notequal(existingBlock.id, block.id);
                                                          })), [block])
                                              };
                                      }
                                      var doc = Graphql.parse(block.body);
                                      var variableNames = GraphQLUtils.getOperationVariables(Caml_array.get(doc.definitions, 0));
                                      var variableDependencies = Belt_Array.map(variableNames, (function (param) {
                                              var variableName = param[0];
                                              var variableDep = {
                                                TAG: 1,
                                                _0: {
                                                  name: variableName,
                                                  value: {
                                                    TAG: 1,
                                                    _0: variableName,
                                                    [Symbol.for("name")]: "Variable"
                                                  }
                                                },
                                                [Symbol.for("name")]: "Direct"
                                              };
                                              return {
                                                      name: variableName,
                                                      dependency: variableDep
                                                    };
                                            }));
                                      var newReq_id = block.title;
                                      var newReq_dependencyRequestIds = [];
                                      var newReq = {
                                        id: newReq_id,
                                        variableDependencies: variableDependencies,
                                        operation: block,
                                        dependencyRequestIds: newReq_dependencyRequestIds
                                      };
                                      console.log("NewReq VarDeps: ", doc, variableNames, variableDependencies);
                                      var names = Chain.requestScriptNames(newReq);
                                      var nameExistsInScript = Belt_Option.isSome(Caml_option.null_to_opt(newChain.script.match(new RegExp("export function " + names.functionName))));
                                      var newScript = nameExistsInScript ? newChain.script : newChain.script + ("\n\nexport function " + names.functionName + " (payload : " + names.inputTypeName + ") : " + names.returnTypeName + " {\n  return {}\n}");
                                      var newChain_name = newChain.name;
                                      var newChain_requests = Belt_Array.concat(Belt_Array.keep(newChain.requests, (function (existingRequest) {
                                                  return existingRequest.id !== newReq_id;
                                                })), [newReq]);
                                      var newChain_blocks = Belt_Array.concat(Belt_Array.keep(newChain.blocks, (function (existingBlock) {
                                                  return Caml_obj.caml_notequal(existingBlock.id, block.id);
                                                })), [block]);
                                      var newChain$1 = {
                                        name: newChain_name,
                                        script: newScript,
                                        requests: newChain_requests,
                                        blocks: newChain_blocks
                                      };
                                      var match$1 = monacoTypelibForChain(schema, newChain$1);
                                      var importLine = match$1.importLine;
                                      var hasImport = Belt_Option.isSome(Caml_option.null_to_opt(newScript.match(new RegExp("import[\\s\\S.]+from[\\s\\S]+'oneGraphStudio';"))));
                                      var newScript$1 = hasImport ? newScript.replace(new RegExp("import[\\s\\S.]+from[\\s\\S]+'oneGraphStudio';"), importLine) : importLine + "\n\n" + newScript;
                                      return {
                                              name: newChain_name,
                                              script: newScript$1,
                                              requests: newChain_requests,
                                              blocks: newChain_blocks
                                            };
                                    }));
                              var newInitialBlock = Belt_Option.getWithDefault(Belt_Array.getBy(newChain.blocks, (function (block) {
                                          return Caml_obj.caml_equal(block.id, initial.id);
                                        })), Caml_array.get(blocks, 0));
                              var match = oldState.inspected;
                              var inspected;
                              switch (match.TAG | 0) {
                                case /* Nothing */0 :
                                    inspected = {
                                      TAG: 0,
                                      _0: newChain,
                                      [Symbol.for("name")]: "Nothing"
                                    };
                                    break;
                                case /* Block */1 :
                                    inspected = {
                                      TAG: 1,
                                      _0: newInitialBlock,
                                      [Symbol.for("name")]: "Block"
                                    };
                                    break;
                                case /* Request */2 :
                                    var request = match.request;
                                    var newRequest_id = request.id;
                                    var newRequest_variableDependencies = request.variableDependencies;
                                    var newRequest_dependencyRequestIds = request.dependencyRequestIds;
                                    var newRequest = {
                                      id: newRequest_id,
                                      variableDependencies: newRequest_variableDependencies,
                                      operation: newInitialBlock,
                                      dependencyRequestIds: newRequest_dependencyRequestIds
                                    };
                                    inspected = {
                                      TAG: 2,
                                      chain: newChain,
                                      request: newRequest,
                                      [Symbol.for("name")]: "Request"
                                    };
                                    break;
                                case /* RequestArgument */3 :
                                    var request$1 = match.request;
                                    var newRequest_id$1 = request$1.id;
                                    var newRequest_variableDependencies$1 = request$1.variableDependencies;
                                    var newRequest_dependencyRequestIds$1 = request$1.dependencyRequestIds;
                                    var newRequest$1 = {
                                      id: newRequest_id$1,
                                      variableDependencies: newRequest_variableDependencies$1,
                                      operation: newInitialBlock,
                                      dependencyRequestIds: newRequest_dependencyRequestIds$1
                                    };
                                    inspected = {
                                      TAG: 3,
                                      chain: newChain,
                                      request: newRequest$1,
                                      variableName: match.variableName,
                                      [Symbol.for("name")]: "RequestArgument"
                                    };
                                    break;
                                
                              }
                              var allBlocks = Belt_Array.concat(oldState.blocks, blocks);
                              var diagram = diagramFromChain$1(newChain);
                              return {
                                      diagram: diagram,
                                      card: oldState.card,
                                      schema: oldState.schema,
                                      chain: newChain,
                                      compiledChain: oldState.compiledChain,
                                      chainResult: oldState.chainResult,
                                      scriptFunctions: oldState.scriptFunctions,
                                      chainExecutionResults: oldState.chainExecutionResults,
                                      blocks: allBlocks,
                                      inspected: inspected,
                                      blockEdit: /* Nothing */0,
                                      scriptEditor: oldState.scriptEditor,
                                      savedChainId: oldState.savedChainId,
                                      requestValueCache: oldState.requestValueCache,
                                      debugUIItems: oldState.debugUIItems
                                    };
                            }));
              }
              catch (exn){
                return ;
              }
            })
        });
    tmp$2 = React.createElement(Studio$Modal, {
          children: editor
        });
  }
  return React.createElement("div", undefined, React.createElement("div", {
                  className: "flex"
                }, React.createElement("div", {
                      className: "w-1/6 h-screen 2xl:w-1/6 bg-gray-800"
                    }, blockSearch), React.createElement("div", {
                      className: "w-1/2"
                    }, React.createElement("div", {
                          className: "h-1/2"
                        }, React.createElement(ReactFlowRenderer, {
                              elements: state.diagram.elements,
                              onElementClick: (function (param, node) {
                                  var id = node.id;
                                  var request = Belt_Option.map(Belt_Array.getBy(state.chain.requests, (function (req) {
                                              return req.operation.id.toString() === id;
                                            })), (function (req) {
                                          return {
                                                  TAG: 2,
                                                  chain: state.chain,
                                                  request: req,
                                                  [Symbol.for("name")]: "Request"
                                                };
                                        }));
                                  var inspected;
                                  if (request !== undefined) {
                                    inspected = request;
                                  } else {
                                    var block = Belt_Array.getBy(state.chain.blocks, (function (block) {
                                            return block.id.toString() === id;
                                          }));
                                    inspected = Belt_Option.map(block, (function (block) {
                                            return {
                                                    TAG: 1,
                                                    _0: block,
                                                    [Symbol.for("name")]: "Block"
                                                  };
                                          }));
                                  }
                                  return Belt_Option.forEach(inspected, (function (inspected) {
                                                return Curry._1(setState, (function (oldState) {
                                                              return {
                                                                      diagram: oldState.diagram,
                                                                      card: oldState.card,
                                                                      schema: oldState.schema,
                                                                      chain: oldState.chain,
                                                                      compiledChain: oldState.compiledChain,
                                                                      chainResult: oldState.chainResult,
                                                                      scriptFunctions: oldState.scriptFunctions,
                                                                      chainExecutionResults: oldState.chainExecutionResults,
                                                                      blocks: oldState.blocks,
                                                                      inspected: inspected,
                                                                      blockEdit: oldState.blockEdit,
                                                                      scriptEditor: oldState.scriptEditor,
                                                                      savedChainId: oldState.savedChainId,
                                                                      requestValueCache: oldState.requestValueCache,
                                                                      debugUIItems: oldState.debugUIItems
                                                                    };
                                                            }));
                                              }));
                                }),
                              onElementsRemove: (function (elements) {
                                  return Curry._1(setState, (function (oldState) {
                                                var newChain = Belt_Array.reduce(elements, oldState.chain, (function (accChain, element) {
                                                        var match = element.source;
                                                        var match$1 = element.target;
                                                        var typ = match !== undefined && match$1 !== undefined ? ({
                                                              NAME: "edge",
                                                              VAL: [
                                                                match,
                                                                match$1
                                                              ]
                                                            }) : ({
                                                              NAME: "node",
                                                              VAL: element.id
                                                            });
                                                        var newChain;
                                                        if (typ.NAME === "node") {
                                                          var source = typ.VAL;
                                                          var targetRequest = Belt_Array.getBy(accChain.requests, (function (request) {
                                                                  console.log("Removing node:  ", source, request.id);
                                                                  return Caml_obj.caml_equal(request.operation.id, source);
                                                                }));
                                                          newChain = Belt_Option.getWithDefault(Belt_Option.map(targetRequest, (function (targetRequest) {
                                                                      return removeRequest(accChain, targetRequest);
                                                                    })), accChain);
                                                        } else {
                                                          var match$2 = typ.VAL;
                                                          var targetRequestId = match$2[1];
                                                          var source$1 = match$2[0];
                                                          console.log("Removing edge: ", source$1, targetRequestId);
                                                          newChain = removeEdge(accChain, source$1, targetRequestId);
                                                        }
                                                        console.log("New chain req count: ", accChain.requests.length, newChain.requests.length);
                                                        return newChain;
                                                      }));
                                                var diagram = diagramFromChain$1(newChain);
                                                console.log("New chain: ", newChain);
                                                return {
                                                        diagram: diagram,
                                                        card: oldState.card,
                                                        schema: oldState.schema,
                                                        chain: newChain,
                                                        compiledChain: oldState.compiledChain,
                                                        chainResult: oldState.chainResult,
                                                        scriptFunctions: oldState.scriptFunctions,
                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                        blocks: oldState.blocks,
                                                        inspected: oldState.inspected,
                                                        blockEdit: oldState.blockEdit,
                                                        scriptEditor: oldState.scriptEditor,
                                                        savedChainId: oldState.savedChainId,
                                                        requestValueCache: oldState.requestValueCache,
                                                        debugUIItems: oldState.debugUIItems
                                                      };
                                              }));
                                }),
                              connectionLineType: "smoothstep",
                              onPaneClick: (function (param) {
                                  return Curry._1(setState, (function (oldState) {
                                                return {
                                                        diagram: oldState.diagram,
                                                        card: oldState.card,
                                                        schema: oldState.schema,
                                                        chain: oldState.chain,
                                                        compiledChain: oldState.compiledChain,
                                                        chainResult: oldState.chainResult,
                                                        scriptFunctions: oldState.scriptFunctions,
                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                        blocks: oldState.blocks,
                                                        inspected: {
                                                          TAG: 0,
                                                          _0: oldState.chain,
                                                          [Symbol.for("name")]: "Nothing"
                                                        },
                                                        blockEdit: oldState.blockEdit,
                                                        scriptEditor: oldState.scriptEditor,
                                                        savedChainId: oldState.savedChainId,
                                                        requestValueCache: oldState.requestValueCache,
                                                        debugUIItems: oldState.debugUIItems
                                                      };
                                              }));
                                }),
                              onConnect: (function (info) {
                                  var source = info.source;
                                  var target = info.target;
                                  var sourceRequest = Belt_Array.getBy(state.chain.requests, (function (request) {
                                          return request.operation.id.toString() === source;
                                        }));
                                  var targetRequest = Belt_Array.getBy(state.chain.requests, (function (request) {
                                          return request.operation.id.toString() === target;
                                        }));
                                  if (sourceRequest !== undefined && targetRequest !== undefined) {
                                    return Curry._1(setState, (function (oldState) {
                                                  var newRequests = Belt_Array.map(oldState.chain.requests, (function (request) {
                                                          if (targetRequest.id !== request.id) {
                                                            return request;
                                                          }
                                                          var varDeps = Belt_Array.map(request.variableDependencies, (function (varDep) {
                                                                  var argDep = varDep.dependency;
                                                                  var dependency;
                                                                  if (argDep.TAG === /* ArgumentDependency */0) {
                                                                    var argDep$1 = argDep._0;
                                                                    var newArgDep_functionFromScript = argDep$1.functionFromScript;
                                                                    var newArgDep_maxRecur = argDep$1.maxRecur;
                                                                    var newArgDep_ifMissing = argDep$1.ifMissing;
                                                                    var newArgDep_ifList = argDep$1.ifList;
                                                                    var newArgDep_fromRequestIds = Utils.distinctStrings(Belt_Array.concat(argDep$1.fromRequestIds, [sourceRequest.id]));
                                                                    var newArgDep_name = argDep$1.name;
                                                                    var newArgDep = {
                                                                      functionFromScript: newArgDep_functionFromScript,
                                                                      maxRecur: newArgDep_maxRecur,
                                                                      ifMissing: newArgDep_ifMissing,
                                                                      ifList: newArgDep_ifList,
                                                                      fromRequestIds: newArgDep_fromRequestIds,
                                                                      name: newArgDep_name
                                                                    };
                                                                    dependency = {
                                                                      TAG: 0,
                                                                      _0: newArgDep,
                                                                      [Symbol.for("name")]: "ArgumentDependency"
                                                                    };
                                                                  } else {
                                                                    dependency = argDep;
                                                                  }
                                                                  return {
                                                                          name: varDep.name,
                                                                          dependency: dependency
                                                                        };
                                                                }));
                                                          return {
                                                                  id: request.id,
                                                                  variableDependencies: varDeps,
                                                                  operation: request.operation,
                                                                  dependencyRequestIds: Utils.distinctStrings(Belt_Array.concat(request.dependencyRequestIds, [sourceRequest.id]))
                                                                };
                                                        }));
                                                  var init = oldState.chain;
                                                  var newChain_name = init.name;
                                                  var newChain_script = init.script;
                                                  var newChain_blocks = init.blocks;
                                                  var newChain = {
                                                    name: newChain_name,
                                                    script: newChain_script,
                                                    requests: newRequests,
                                                    blocks: newChain_blocks
                                                  };
                                                  var diagram = diagramFromChain$1(newChain);
                                                  return {
                                                          diagram: diagram,
                                                          card: oldState.card,
                                                          schema: oldState.schema,
                                                          chain: newChain,
                                                          compiledChain: oldState.compiledChain,
                                                          chainResult: oldState.chainResult,
                                                          scriptFunctions: oldState.scriptFunctions,
                                                          chainExecutionResults: oldState.chainExecutionResults,
                                                          blocks: oldState.blocks,
                                                          inspected: oldState.inspected,
                                                          blockEdit: oldState.blockEdit,
                                                          scriptEditor: oldState.scriptEditor,
                                                          savedChainId: oldState.savedChainId,
                                                          requestValueCache: oldState.requestValueCache,
                                                          debugUIItems: oldState.debugUIItems
                                                        };
                                                }));
                                  } else {
                                    console.log("Couldn't find source or target request to connect");
                                    return ;
                                  }
                                }),
                              zoomOnScroll: false,
                              panOnScroll: true,
                              onNodeContextMenu: (function ($$event, node) {
                                  $$event.preventDefault();
                                  var block = Belt_Array.getBy(state.blocks, (function (block) {
                                          return Caml_obj.caml_equal(block.id, Uuid.parseExn(node.id));
                                        }));
                                  return Belt_Option.forEach(block, (function (block) {
                                                var request = Belt_Array.getBy(state.chain.requests, (function (req) {
                                                        return req.id === block.title;
                                                      }));
                                                return Belt_Option.forEach(request, selectRequestFunctionScript);
                                              }));
                                }),
                              onPaneContextMenu: (function ($$event) {
                                  $$event.preventDefault();
                                  
                                }),
                              children: null,
                              nodeTypes: {
                                fragment: make
                              }
                            }, React.createElement(ReactFlowRenderer$1.Controls, {
                                  showZoom: false,
                                  showFitView: true,
                                  showInteractive: false
                                }), React.createElement(ReactFlowRenderer$1.Background, {
                                  variant: "lines",
                                  gap: 20,
                                  size: 1,
                                  color: "#666666",
                                  style: {
                                    backgroundColor: "rgb(60, 60, 60)"
                                  }
                                }))), React.createElement("div", {
                          className: "h-1/2"
                        }, React.createElement("div", {
                              className: "border-t border-gray-500 bg-gray-900",
                              onClick: (function (param) {
                                  return Curry._1(setState, (function (oldState) {
                                                var init = oldState.scriptEditor;
                                                return {
                                                        diagram: oldState.diagram,
                                                        card: oldState.card,
                                                        schema: oldState.schema,
                                                        chain: oldState.chain,
                                                        compiledChain: oldState.compiledChain,
                                                        chainResult: oldState.chainResult,
                                                        scriptFunctions: oldState.scriptFunctions,
                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                        blocks: oldState.blocks,
                                                        inspected: oldState.inspected,
                                                        blockEdit: oldState.blockEdit,
                                                        scriptEditor: {
                                                          isOpen: !oldState.scriptEditor.isOpen,
                                                          editor: init.editor,
                                                          monaco: init.monaco
                                                        },
                                                        savedChainId: oldState.savedChainId,
                                                        requestValueCache: oldState.requestValueCache,
                                                        debugUIItems: oldState.debugUIItems
                                                      };
                                              }));
                                })
                            }, React.createElement("nav", undefined, React.createElement(Comps.Header.make, {
                                      children: null
                                    }, "Chain JavaScript", React.createElement("button", {
                                          className: "ml-2 mr-2",
                                          title: "Format code",
                                          onClick: (function (param) {
                                              return Belt_Option.forEach(state.scriptEditor.editor, (function (editor) {
                                                            var script = editor.getValue();
                                                            var newScript = Prettier.format(script, {
                                                                  parser: "babel",
                                                                  plugins: [ParserBabel],
                                                                  singleQuote: true
                                                                });
                                                            return Curry._1(setState, (function (oldState) {
                                                                          var init = oldState.chain;
                                                                          return {
                                                                                  diagram: oldState.diagram,
                                                                                  card: oldState.card,
                                                                                  schema: oldState.schema,
                                                                                  chain: {
                                                                                    name: init.name,
                                                                                    script: newScript,
                                                                                    requests: init.requests,
                                                                                    blocks: init.blocks
                                                                                  },
                                                                                  compiledChain: oldState.compiledChain,
                                                                                  chainResult: oldState.chainResult,
                                                                                  scriptFunctions: oldState.scriptFunctions,
                                                                                  chainExecutionResults: oldState.chainExecutionResults,
                                                                                  blocks: oldState.blocks,
                                                                                  inspected: oldState.inspected,
                                                                                  blockEdit: oldState.blockEdit,
                                                                                  scriptEditor: oldState.scriptEditor,
                                                                                  savedChainId: oldState.savedChainId,
                                                                                  requestValueCache: oldState.requestValueCache,
                                                                                  debugUIItems: oldState.debugUIItems
                                                                                };
                                                                        }));
                                                          }));
                                            })
                                        }, React.createElement(Icons.PureScript.make, {}))))), React.createElement(Studio$Script, tmp))), React.createElement("div", {
                      className: "w-1/3"
                    }, sidebar)), tmp$2);
}

var Main = {
  make: Studio$Main
};

function Studio(Props) {
  var schema = Props.schema;
  var initialChain = Props.initialChain;
  var config = Props.config;
  return React.createElement(ReactFlowRenderer$1.ReactFlowProvider, {
              children: React.createElement(Studio$Main, {
                    schema: schema,
                    initialChain: initialChain,
                    config: config
                  })
            });
}

var make$1 = Studio;

export {
  SimpleTooltip ,
  FragmentNodeComponent ,
  makeBlankBlock ,
  compileChain ,
  BlockSearch ,
  NodeLabel ,
  diagramFromChain ,
  backgroundStyle ,
  requestScriptTypeScriptSignature ,
  monacoTypelibForChain ,
  Script ,
  Modal ,
  Main ,
  make$1 as make,
  
}
/* make Not a pure module */
