// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Debug from "../Debug.mjs";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function DragConnectorLine(Props) {
  var source = Props.source;
  var onDragEnd = Props.onDragEnd;
  var invert = Props.invert;
  var match = React.useState(function () {
        var rect = source.getBoundingClientRect();
        return {
                mousePosition: [
                  rect.x + (rect.width / 2 | 0) | 0,
                  rect.y + (rect.height / 2 | 0) | 0
                ]
              };
      });
  var setState = match[1];
  var onMouseMove = function ($$event) {
    var x = $$event.pageX;
    var y = $$event.pageY;
    return Curry._1(setState, (function (_oldState) {
                  return {
                          mousePosition: [
                            x,
                            y
                          ]
                        };
                }));
  };
  var onMouseUp = function ($$event) {
    Debug.assignToWindowForDeveloperDebug("mouseupevent", $$event);
    return Curry._1(onDragEnd, undefined);
  };
  React.useEffect((function () {
          Belt_Option.forEach(Caml_option.undefined_to_opt(typeof window === "undefined" ? undefined : window), (function ($$window) {
                  Curry._2($$window.document.addEventListener, "mousemove", onMouseMove);
                  return Curry._2($$window.document.addEventListener, "mouseup", onMouseUp);
                }));
          return Belt_Option.map(Caml_option.undefined_to_opt(typeof window === "undefined" ? undefined : window), (function ($$window, param) {
                        Curry._2($$window.document.removeEventListener, "mousemove", onMouseMove);
                        return Curry._2($$window.document.removeEventListener, "mouseup", onMouseUp);
                      }));
        }), []);
  var match$1 = match[0].mousePosition;
  var mouseY = match$1[1];
  var mouseX = match$1[0];
  var rect = source.getBoundingClientRect();
  var scrollY = Belt_Option.getWithDefault(Utils.$$Window.scrollY(undefined), 0);
  var anchorX = rect.x + (rect.width / 2 | 0) | 0;
  var anchorY = (rect.y + (rect.height / 2 | 0) | 0) + scrollY | 0;
  var match$2 = invert ? [
      mouseX - 2 | 0,
      mouseY - 2 | 0,
      anchorX,
      anchorY
    ] : [
      anchorX,
      anchorY,
      mouseX - 2 | 0,
      mouseY - 2 | 0
    ];
  var endY = match$2[3];
  var endX = match$2[2];
  var startY = match$2[1];
  var startX = match$2[0];
  return React.createElement("div", {
              className: "absolute w-full h-full pointer-events-none",
              style: {
                cursor: "none",
                left: "0px",
                top: "0px",
                zIndex: "9999"
              },
              onMouseMove: (function ($$event) {
                  var x = $$event.clientX;
                  var y = $$event.clientY;
                  return Curry._1(setState, (function (_oldState) {
                                return {
                                        mousePosition: [
                                          x,
                                          y
                                        ]
                                      };
                              }));
                })
            }, React.createElement("svg", {
                  className: "relative w-full h-full pointer-events-none",
                  style: {
                    cursor: "none",
                    left: "0px",
                    top: "0px",
                    zIndex: "9999"
                  },
                  xmlns: "http://www.w3.org/2000/svg"
                }, React.createElement("filter", {
                      id: "blurMe"
                    }, React.createElement("feGaussianBlur", {
                          in: "SourceGraphic",
                          stdDeviation: "5"
                        })), React.createElement("marker", {
                      id: "connectMarker",
                      markerHeight: "4",
                      markerWidth: "2",
                      orient: "auto",
                      refX: "0.1",
                      refY: "2"
                    }, React.createElement("path", {
                          d: "M0 0v4l2-2z",
                          fill: "green"
                        })), React.createElement("line", {
                      className: "pointer-events-none",
                      style: {
                        cursor: "none"
                      },
                      markerEnd: "url(#connectMarker)",
                      stroke: Comps.colors["green-6"],
                      strokeWidth: "3",
                      x1: String(startX),
                      x2: String(endX),
                      y1: String(startY),
                      y2: String(endY)
                    }), React.createElement("line", {
                      className: "moving-path pointer-events-none",
                      style: {
                        cursor: "none"
                      },
                      markerEnd: "url(#connectMarker)",
                      stroke: Comps.colors["green-3"],
                      strokeDasharray: "50",
                      strokeWidth: "3",
                      x1: String(startX),
                      x2: String(endX),
                      y1: String(startY),
                      y2: String(endY)
                    })));
}

var make = DragConnectorLine;

export {
  make ,
  
}
/* Comps Not a pure module */
