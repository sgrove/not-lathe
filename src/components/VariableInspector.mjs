// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Chain from "../Chain.mjs";
import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as RelayRuntime from "relay-runtime";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as VariableInspector_OneGraphMutation_graphql from "../__generated__/VariableInspector_OneGraphMutation_graphql.mjs";
import * as VariableInspector_oneGraphStudioChainActionVariable_graphql from "../__generated__/VariableInspector_oneGraphStudioChainActionVariable_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(VariableInspector_oneGraphStudioChainActionVariable_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(VariableInspector_oneGraphStudioChainActionVariable_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(VariableInspector_oneGraphStudioChainActionVariable_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return VariableInspector_oneGraphStudioChainActionVariable_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: VariableInspector_OneGraphMutation_graphql.node,
              variables: VariableInspector_OneGraphMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, VariableInspector_OneGraphMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? VariableInspector_OneGraphMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, VariableInspector_OneGraphMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(VariableInspector_OneGraphMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, VariableInspector_OneGraphMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? VariableInspector_OneGraphMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, VariableInspector_OneGraphMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: VariableInspector_OneGraphMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var UpdateVariableMutation_make_oneGraphUpdateChainActionVariableInput = VariableInspector_OneGraphMutation_graphql.Utils.make_oneGraphUpdateChainActionVariableInput;

var UpdateVariableMutation_makeVariables = VariableInspector_OneGraphMutation_graphql.Utils.makeVariables;

var UpdateVariableMutation_make_response_oneGraph_updateChainActionVariable_variable = VariableInspector_OneGraphMutation_graphql.Utils.make_response_oneGraph_updateChainActionVariable_variable;

var UpdateVariableMutation_make_response_oneGraph_updateChainActionVariable = VariableInspector_OneGraphMutation_graphql.Utils.make_response_oneGraph_updateChainActionVariable;

var UpdateVariableMutation_make_response_oneGraph = VariableInspector_OneGraphMutation_graphql.Utils.make_response_oneGraph;

var UpdateVariableMutation_makeOptimisticResponse = VariableInspector_OneGraphMutation_graphql.Utils.makeOptimisticResponse;

var UpdateVariableMutation = {
  make_oneGraphUpdateChainActionVariableInput: UpdateVariableMutation_make_oneGraphUpdateChainActionVariableInput,
  makeVariables: UpdateVariableMutation_makeVariables,
  make_response_oneGraph_updateChainActionVariable_variable: UpdateVariableMutation_make_response_oneGraph_updateChainActionVariable_variable,
  make_response_oneGraph_updateChainActionVariable: UpdateVariableMutation_make_response_oneGraph_updateChainActionVariable,
  make_response_oneGraph: UpdateVariableMutation_make_response_oneGraph,
  makeOptimisticResponse: UpdateVariableMutation_makeOptimisticResponse,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function VariableInspector(Props) {
  var variableRef = Props.variableRef;
  var actionId = Props.actionId;
  var variable = use(variableRef);
  var inputVariable_probePath = variable.probePath;
  var inputVariable_maxRecur = variable.maxRecur;
  var inputVariable_ifList = variable.ifList;
  var inputVariable_ifMissing = variable.ifMissing;
  var inputVariable_graphqlType = variable.graphqlType;
  var inputVariable_method = variable.computeMethod;
  var inputVariable_description = variable.description;
  var inputVariable_name = variable.name;
  var inputVariable_id = variable.id;
  var match = use$1(undefined);
  var mutate = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setPotentialConnection = match$1[1];
  var potentialConnection = match$1[0];
  var connectionDrag = React.useContext(ConnectionContext.context);
  var match$2 = connectionDrag.value;
  var dragClassName;
  if (typeof match$2 === "number") {
    dragClassName = "";
  } else {
    switch (match$2.TAG | 0) {
      case /* StartedSource */0 :
          dragClassName = "drag-target";
          break;
      case /* StartedTarget */1 :
          var match$3 = match$2.target;
          dragClassName = match$3.TAG === /* Variable */0 && match$3._0.variableId === variable.id ? "drag-source" : "";
          break;
      default:
        dragClassName = "";
    }
  }
  var match$4 = variable.computeMethod;
  var match$5 = variable.computeMethod;
  return React.createElement("article", {
              key: variable.name,
              className: "m-2 variable-settings " + dragClassName + (
                Belt_SetString.has(potentialConnection, variable.name) ? " drop-ready" : ""
              ),
              id: "inspector-variable-" + variable.name,
              disabled: true,
              onMouseDown: (function ($$event) {
                  if (!$$event.altKey) {
                    return ;
                  }
                  $$event.preventDefault();
                  $$event.stopPropagation();
                  var match = connectionDrag.value;
                  if (typeof match !== "number") {
                    return ;
                  }
                  var sourceDom = $$event.target;
                  return Curry._1(connectionDrag.onDragStart, {
                              TAG: 1,
                              target: {
                                TAG: 0,
                                _0: {
                                  actionId: actionId,
                                  variableId: variable.id
                                },
                                [Symbol.for("name")]: "Variable"
                              },
                              sourceDom: sourceDom,
                              [Symbol.for("name")]: "StartedTarget"
                            });
                }),
              onMouseEnter: (function ($$event) {
                  var match = connectionDrag.value;
                  if (typeof match === "number" || match.TAG !== /* StartedSource */0) {
                    return ;
                  } else {
                    return Curry._1(setPotentialConnection, (function (s) {
                                  return Belt_SetString.add(s, variable.name);
                                }));
                  }
                }),
              onMouseLeave: (function ($$event) {
                  var match = connectionDrag.value;
                  if (typeof match === "number") {
                    return ;
                  }
                  switch (match.TAG | 0) {
                    case /* StartedSource */0 :
                    case /* StartedTarget */1 :
                        break;
                    default:
                      return ;
                  }
                  return Curry._1(setPotentialConnection, (function (s) {
                                return Belt_SetString.remove(s, variable.name);
                              }));
                }),
              onMouseUp: (function ($$event) {
                  var clientX = $$event.clientX;
                  var clientY = $$event.clientY;
                  var mouseClientPosition = [
                    clientX,
                    clientY
                  ];
                  Curry._1(setPotentialConnection, (function (s) {
                          return Belt_SetString.remove(s, variable.name);
                        }));
                  var match = connectionDrag.value;
                  if (typeof match === "number") {
                    return ;
                  }
                  if (match.TAG !== /* StartedSource */0) {
                    return ;
                  }
                  var newConnectionDrag_0 = match.sourceActionId;
                  var newConnectionDrag_1 = match.sourceDom;
                  var newConnectionDrag_2 = {
                    TAG: 0,
                    _0: {
                      actionId: actionId,
                      variableId: variable.id
                    },
                    [Symbol.for("name")]: "Variable"
                  };
                  var newConnectionDrag = {
                    TAG: 3,
                    sourceActionId: newConnectionDrag_0,
                    sourceDom: newConnectionDrag_1,
                    target: newConnectionDrag_2,
                    windowPosition: mouseClientPosition,
                    [Symbol.for("name")]: "Completed"
                  };
                  Curry._1(connectionDrag.onPotentialVariableSourceConnect, newConnectionDrag);
                  
                })
            }, React.createElement("div", {
                  className: "flex justify-between items-center cursor-pointer p-1  text-gray-200 rounded-t-sm" + (
                    Belt_SetString.has(potentialConnection, variable.name) ? " border-blue-900" : ""
                  )
                }, React.createElement("div", {
                      className: " font-semibold text-sm font-mono inline-block flex-grow",
                      style: {
                        color: Comps.colors["green-4"]
                      }
                    }, "\$" + variable.name, React.createElement("span", {
                          className: "font-thin",
                          style: {
                            color: Comps.colors["gray-4"]
                          }
                        }, ": " + variable.graphqlType)), React.createElement(Comps.Select.make, {
                      children: null,
                      onChange: (function ($$event) {
                          var value = $$event.target.value;
                          var newVariable_probePath = inputVariable_probePath;
                          var newVariable_maxRecur = inputVariable_maxRecur;
                          var newVariable_ifList = inputVariable_ifList;
                          var newVariable_ifMissing = inputVariable_ifMissing;
                          var newVariable_graphqlType = inputVariable_graphqlType;
                          var newVariable_description = inputVariable_description;
                          var newVariable_name = inputVariable_name;
                          var newVariable_id = inputVariable_id;
                          var newVariable = {
                            probePath: newVariable_probePath,
                            maxRecur: newVariable_maxRecur,
                            ifList: newVariable_ifList,
                            ifMissing: newVariable_ifMissing,
                            graphqlType: newVariable_graphqlType,
                            method: value,
                            description: newVariable_description,
                            name: newVariable_name,
                            id: newVariable_id
                          };
                          Curry.app(mutate, [
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                                {
                                  variable: newVariable
                                },
                                undefined,
                                undefined
                              ]);
                          
                        }),
                      style: {
                        paddingRight: "40px"
                      },
                      value: Belt_Option.getWithDefault(match$4 === "COMPUTED" ? "COMPUTED" : (
                              match$4 === "DIRECT" ? "DIRECT" : undefined
                            ), "")
                    }, React.createElement("option", {
                          value: "variable"
                        }, "Variable Input"), React.createElement("option", {
                          value: "COMPUTED"
                        }, "Computed Value"), React.createElement("option", {
                          disabled: true,
                          value: "DIRECT"
                        }, "Direct Connection"))), React.createElement("label", {
                  className: "m-0"
                }, React.createElement("div", {
                      className: "flex rounded-md"
                    }, React.createElement("div", {
                          className: "flex-1 flex-grow"
                        }), React.createElement("div", {
                          className: "inline-flex justify-end items-center text-right px-3 rounded-l-md text-sm",
                          style: {
                            backgroundColor: Comps.colors["brown-1"],
                            color: Comps.colors["gray-4"]
                          }
                        }, "ifMissing:"), React.createElement(Comps.Select.make, {
                          children: null,
                          onChange: (function ($$event) {
                              var ifMissing = Chain.ifMissingOfString($$event.target.value);
                              if (ifMissing.TAG !== /* Ok */0) {
                                return ;
                              }
                              var newVariable_probePath = inputVariable_probePath;
                              var newVariable_maxRecur = inputVariable_maxRecur;
                              var newVariable_ifList = inputVariable_ifList;
                              var newVariable_ifMissing = ifMissing._0;
                              var newVariable_graphqlType = inputVariable_graphqlType;
                              var newVariable_method = inputVariable_method;
                              var newVariable_description = inputVariable_description;
                              var newVariable_name = inputVariable_name;
                              var newVariable_id = inputVariable_id;
                              var newVariable = {
                                probePath: newVariable_probePath,
                                maxRecur: newVariable_maxRecur,
                                ifList: newVariable_ifList,
                                ifMissing: newVariable_ifMissing,
                                graphqlType: newVariable_graphqlType,
                                method: newVariable_method,
                                description: newVariable_description,
                                name: newVariable_name,
                                id: newVariable_id
                              };
                              Curry.app(mutate, [
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    {
                                      variable: newVariable
                                    },
                                    undefined,
                                    undefined
                                  ]);
                              
                            }),
                          style: {
                            borderTopLeftRadius: "0px",
                            borderBottomLeftRadius: "0px"
                          },
                          value: variable.ifMissing
                        }, React.createElement("option", {
                              value: Chain.stringOfIfMissing("ERROR")
                            }, "Error"), React.createElement("option", {
                              value: Chain.stringOfIfMissing("ALLOW")
                            }, "Allow"), React.createElement("option", {
                              value: Chain.stringOfIfMissing("SKIP")
                            }, "Skip"))), React.createElement("div", {
                      className: "flex rounded-md"
                    }, React.createElement("div", {
                          className: "flex-1 flex-grow"
                        }), React.createElement("div", {
                          className: "inline-flex justify-end items-center text-right px-3 rounded-l-md text-sm",
                          style: {
                            backgroundColor: Comps.colors["brown-1"],
                            color: Comps.colors["gray-4"]
                          }
                        }, "ifList:"), React.createElement(Comps.Select.make, {
                          children: null,
                          onChange: (function ($$event) {
                              var ifList = $$event.target.value;
                              var newVariable_probePath = inputVariable_probePath;
                              var newVariable_maxRecur = inputVariable_maxRecur;
                              var newVariable_ifMissing = inputVariable_ifMissing;
                              var newVariable_graphqlType = inputVariable_graphqlType;
                              var newVariable_method = inputVariable_method;
                              var newVariable_description = inputVariable_description;
                              var newVariable_name = inputVariable_name;
                              var newVariable_id = inputVariable_id;
                              var newVariable = {
                                probePath: newVariable_probePath,
                                maxRecur: newVariable_maxRecur,
                                ifList: ifList,
                                ifMissing: newVariable_ifMissing,
                                graphqlType: newVariable_graphqlType,
                                method: newVariable_method,
                                description: newVariable_description,
                                name: newVariable_name,
                                id: newVariable_id
                              };
                              Curry.app(mutate, [
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    {
                                      variable: newVariable
                                    },
                                    undefined,
                                    undefined
                                  ]);
                              
                            }),
                          style: {
                            borderTopLeftRadius: "0px",
                            borderBottomLeftRadius: "0px"
                          },
                          value: variable.ifList
                        }, React.createElement("option", {
                              value: "FIRST"
                            }, "First item"), React.createElement("option", {
                              value: "LAST"
                            }, "Last item"), React.createElement("option", {
                              value: "ALL"
                            }, "All items as an array"), React.createElement("option", {
                              value: "EACH"
                            }, "Run once for each item")))), match$5 === "COMPUTED" ? null : (
                match$5 === "DIRECT" ? variable.probePath.join("->") : "Unknown Variable Type"
              ));
}

var make = VariableInspector;

export {
  Fragment ,
  UpdateVariableMutation ,
  make ,
  
}
/* Chain Not a pure module */
