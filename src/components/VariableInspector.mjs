// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Chain from "../Chain.mjs";
import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as VariableInspector_oneGraphStudioChainActionVariable_graphql from "../__generated__/VariableInspector_oneGraphStudioChainActionVariable_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(VariableInspector_oneGraphStudioChainActionVariable_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(VariableInspector_oneGraphStudioChainActionVariable_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(VariableInspector_oneGraphStudioChainActionVariable_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return VariableInspector_oneGraphStudioChainActionVariable_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var OneGraphStudioChainActionVariableFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function VariableInspector(Props) {
  var variableRef = Props.variableRef;
  var variable = use(variableRef);
  var match = React.useState(function () {
        
      });
  var setPotentialConnection = match[1];
  var potentialConnection = match[0];
  var connectionDrag = React.useContext(ConnectionContext.context);
  var match$1 = variable.computeMethod;
  var match$2 = variable.computeMethod;
  return React.createElement("article", {
              key: variable.name,
              className: "m-2 variable-settings " + (
                Belt_SetString.has(potentialConnection, variable.name) ? " drop-ready" : ""
              ),
              id: "inspector-variable-" + variable.name,
              onMouseDown: (function ($$event) {
                  if ($$event.altKey) {
                    $$event.preventDefault();
                    $$event.stopPropagation();
                    if (typeof connectionDrag === "number") {
                      return Curry._1(setPotentialConnection, (function (s) {
                                    return Belt_SetString.add(s, variable.name);
                                  }));
                    } else {
                      return ;
                    }
                  }
                  
                }),
              onMouseEnter: (function ($$event) {
                  if (typeof connectionDrag === "number" || connectionDrag.TAG !== /* StartedSource */0) {
                    return ;
                  } else {
                    return Curry._1(setPotentialConnection, (function (s) {
                                  return Belt_SetString.add(s, variable.name);
                                }));
                  }
                }),
              onMouseLeave: (function ($$event) {
                  if (typeof connectionDrag === "number") {
                    return ;
                  }
                  switch (connectionDrag.TAG | 0) {
                    case /* StartedSource */0 :
                    case /* StartedTarget */1 :
                        break;
                    default:
                      return ;
                  }
                  return Curry._1(setPotentialConnection, (function (s) {
                                return Belt_SetString.remove(s, variable.name);
                              }));
                }),
              onMouseUp: (function ($$event) {
                  Curry._1(setPotentialConnection, (function (s) {
                          return Belt_SetString.remove(s, variable.name);
                        }));
                  
                })
            }, React.createElement("div", {
                  className: "flex justify-between items-center cursor-pointer p-1  text-gray-200 rounded-t-sm" + (
                    Belt_SetString.has(potentialConnection, variable.name) ? " border-blue-900" : ""
                  ),
                  onClick: (function (param) {
                      
                    })
                }, React.createElement("div", {
                      className: " font-semibold text-sm font-mono inline-block flex-grow",
                      style: {
                        color: Comps.colors["green-4"]
                      }
                    }, "\$" + variable.name, React.createElement("span", {
                          className: "font-thin",
                          style: {
                            color: Comps.colors["gray-4"]
                          }
                        }, ": " + variable.graphqlType)), React.createElement(Comps.Select.make, {
                      children: null,
                      style: {
                        paddingRight: "40px"
                      },
                      value: Belt_Option.getWithDefault(match$1 === "COMPUTED" ? "compute" : (
                              match$1 === "DIRECT" ? "direct" : undefined
                            ), "")
                    }, React.createElement("option", {
                          value: "variable"
                        }, "Variable Input"), React.createElement("option", {
                          value: "computed"
                        }, "Computed Value"), React.createElement("option", {
                          disabled: true,
                          value: "direct"
                        }, "Direct Connection"))), React.createElement("label", {
                  className: "m-0"
                }, React.createElement("div", {
                      className: "flex rounded-md"
                    }, React.createElement("div", {
                          className: "flex-1 flex-grow"
                        }), React.createElement("div", {
                          className: "inline-flex justify-end items-center text-right px-3 rounded-l-md text-sm",
                          style: {
                            backgroundColor: Comps.colors["brown-1"],
                            color: Comps.colors["gray-4"]
                          }
                        }, "ifMissing:"), React.createElement(Comps.Select.make, {
                          children: null,
                          onChange: (function ($$event) {
                              Chain.ifMissingOfString($$event.target.value);
                              
                            }),
                          style: {
                            borderTopLeftRadius: "0px",
                            borderBottomLeftRadius: "0px"
                          },
                          value: variable.ifMissing
                        }, React.createElement("option", {
                              value: Chain.stringOfIfMissing("ERROR")
                            }, "Error"), React.createElement("option", {
                              value: Chain.stringOfIfMissing("ALLOW")
                            }, "Allow"), React.createElement("option", {
                              value: Chain.stringOfIfMissing("SKIP")
                            }, "Skip"))), React.createElement("div", {
                      className: "flex rounded-md"
                    }, React.createElement("div", {
                          className: "flex-1 flex-grow"
                        }), React.createElement("div", {
                          className: "inline-flex justify-end items-center text-right px-3 rounded-l-md text-sm",
                          style: {
                            backgroundColor: Comps.colors["brown-1"],
                            color: Comps.colors["gray-4"]
                          }
                        }, "ifList:"), React.createElement(Comps.Select.make, {
                          children: null,
                          onChange: (function ($$event) {
                              Chain.ifListOfString($$event.target.value);
                              
                            }),
                          style: {
                            borderTopLeftRadius: "0px",
                            borderBottomLeftRadius: "0px"
                          },
                          value: variable.ifList
                        }, React.createElement("option", {
                              value: Chain.stringOfIfList("FIRST")
                            }, "First item"), React.createElement("option", {
                              value: Chain.stringOfIfList("LAST")
                            }, "Last item"), React.createElement("option", {
                              value: Chain.stringOfIfList("ALL")
                            }, "All items as an array"), React.createElement("option", {
                              value: Chain.stringOfIfList("EACH")
                            }, "Run once for each item")))), match$2 === "COMPUTED" ? null : (
                match$2 === "DIRECT" ? variable.probePath.join("->") : "Unknown Variable Type"
              ));
}

var make = VariableInspector;

export {
  OneGraphStudioChainActionVariableFragment ,
  make ,
  
}
/* Chain Not a pure module */
