// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "../Card.js";
import * as Chain from "../Chain.js";
import * as Comps from "./Comps.js";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Debug from "../Debug.js";
import * as Icons from "../Icons.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.mjs";
import * as Graphql from "graphql";
import * as Caml_obj from "bs-platform/lib/es6/caml_obj.mjs";
import * as Prettier from "prettier";
import * as GraphQLJs from "../bindings/GraphQLJs.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.mjs";
import * as Caml_array from "bs-platform/lib/es6/caml_array.mjs";
import * as OneGraphRe from "../OneGraphRe.js";
import * as Typescript from "typescript";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
import * as OneGraphAuth from "../bindings/OneGraphAuth.js";
import * as BsReactMonaco from "../bindings/BsReactMonaco.js";
import * as OnegraphAuth from "onegraph-auth";
import * as Belt_SetString from "bs-platform/lib/es6/belt_SetString.mjs";
import * as GraphQLFormJs from "../GraphQLForm.js";
import * as ConnectionContext from "./ConnectionContext.js";
import CopyToClipboard from "copy-to-clipboard";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.mjs";
import * as QuickjsEmscripten from "quickjs-emscripten";
import ParserBabel from "prettier/parser-babel";
import * as GraphQLMockInputTypeJs from "../GraphQLMockInputType.js";

var AdvancedMode = {
  enabled: false
};

var Clipboard = {};

var make = GraphQLMockInputTypeJs.GraphQLPreview;

var GraphQLPreview = {
  make: make
};

function formInput(prim, prim$1, prim$2, prim$3) {
  return GraphQLFormJs.formInput(prim, prim$1, prim$2, prim$3);
}

function transpileFullChainScript(chain) {
  var baseTranspiled = Typescript.transpile(chain.script, {
        target: "ES2020"
      });
  var allCalls = Belt_Array.map(chain.requests, (function (request) {
            var requestCalls = Belt_Array.keepMap(request.variableDependencies, (function (varDep) {
                    var _argDep = varDep.dependency;
                    switch (_argDep.TAG | 0) {
                      case /* ArgumentDependency */0 :
                          return Chain.callForVariable(request, varDep.name);
                      case /* Direct */1 :
                          return ;
                      case /* GraphQLProbe */2 :
                          return Chain.callForProbe(request, varDep.name, _argDep._0);
                      
                    }
                  }));
            return requestCalls.join("\n\n");
          })).join("\n\n");
  return baseTranspiled + "\n\n" + allCalls;
}

function patchRequestArgDeps(request) {
  var variableDependencies = Belt_Array.map(request.variableDependencies, (function (varDep) {
          var argDep = varDep.dependency;
          var dependency;
          switch (argDep.TAG | 0) {
            case /* ArgumentDependency */0 :
                var argDep$1 = argDep._0;
                var requestScriptName = Chain.requestScriptNames(request).functionName;
                var functionFromScript = requestScriptName + "_" + varDep.name;
                var newArgDep_maxRecur = argDep$1.maxRecur;
                var newArgDep_ifMissing = argDep$1.ifMissing;
                var newArgDep_ifList = argDep$1.ifList;
                var newArgDep_fromRequestIds = request.dependencyRequestIds;
                var newArgDep_name = argDep$1.name;
                var newArgDep = {
                  functionFromScript: functionFromScript,
                  maxRecur: newArgDep_maxRecur,
                  ifMissing: newArgDep_ifMissing,
                  ifList: newArgDep_ifList,
                  fromRequestIds: newArgDep_fromRequestIds,
                  name: newArgDep_name
                };
                dependency = {
                  TAG: 0,
                  _0: newArgDep,
                  [Symbol.for("name")]: "ArgumentDependency"
                };
                break;
            case /* Direct */1 :
                dependency = argDep;
                break;
            case /* GraphQLProbe */2 :
                var probe = argDep._0;
                var requestScriptName$1 = Chain.requestScriptNames(request).functionName;
                var functionFromScript$1 = requestScriptName$1 + "_" + varDep.name;
                var newProbe_name = probe.name;
                var newProbe_ifMissing = probe.ifMissing;
                var newProbe_ifList = probe.ifList;
                var newProbe_fromRequestId = probe.fromRequestId;
                var newProbe_path = probe.path;
                var newProbe = {
                  name: newProbe_name,
                  ifMissing: newProbe_ifMissing,
                  ifList: newProbe_ifList,
                  fromRequestId: newProbe_fromRequestId,
                  path: newProbe_path,
                  functionFromScript: functionFromScript$1
                };
                dependency = {
                  TAG: 2,
                  _0: newProbe,
                  [Symbol.for("name")]: "GraphQLProbe"
                };
                break;
            
          }
          return {
                  name: varDep.name,
                  dependency: dependency
                };
        }));
  return {
          id: request.id,
          variableDependencies: variableDependencies,
          operation: request.operation,
          dependencyRequestIds: request.dependencyRequestIds
        };
}

function patchChainRequestsArgDeps(chain) {
  return Belt_Array.map(chain.requests, patchRequestArgDeps);
}

function evalRequest(schema, chain, request, requestValueCache) {
  var __x = QuickjsEmscripten.getQuickJS();
  var __x$1 = __x.then(function (quickjs) {
        var payload = Belt_Array.reduce(Belt_Array.keepMap(Belt_Array.concatMany(Belt_Array.keepMap(request.variableDependencies, (function (varDep) {
                            var argDep = varDep.dependency;
                            switch (argDep.TAG | 0) {
                              case /* ArgumentDependency */0 :
                                  return argDep._0.fromRequestIds;
                              case /* Direct */1 :
                              case /* GraphQLProbe */2 :
                                  return ;
                              
                            }
                          }))), (function (upstreamRequestId) {
                    return Belt_Array.getBy(chain.requests, (function (request) {
                                  return request.id === upstreamRequestId;
                                }));
                  })), {}, (function (acc, nextRequest) {
                var match = Js_dict.get(acc, nextRequest.id);
                if (match !== undefined) {
                  return acc;
                }
                var parsedOperation = Graphql.parse(nextRequest.operation.body);
                var definition = Belt_Array.getExn(parsedOperation.definitions, 0);
                var variables = GraphQLJs.Mock.mockOperationVariables(schema, definition);
                var results = Js_dict.get(requestValueCache, nextRequest.id);
                if (results !== undefined) {
                  acc[nextRequest.id] = {
                    variables: variables,
                    graphQLResult: Caml_option.valFromOption(results)
                  };
                  return acc;
                }
                var results$1 = Graphql.graphqlSync(schema, nextRequest.operation.body, undefined, undefined, Caml_option.some(variables));
                acc[nextRequest.id] = {
                  variables: variables,
                  graphQLResult: results$1
                };
                return acc;
              }));
        var transpiled = transpileFullChainScript(chain);
        var payload$1 = JSON.stringify(Js_dict.fromArray(Belt_Array.map(Js_dict.entries(payload), (function (param) {
                        return [
                                param[0],
                                param[1].graphQLResult
                              ];
                      }))));
        var operationDoc = request.operation.body;
        var parsedOperation = Graphql.parse(request.operation.body);
        var definition = Belt_Array.getExn(parsedOperation.definitions, 0);
        var mockedVariables = GraphQLJs.Mock.mockOperationVariables(schema, definition);
        var variables = Belt_Array.reduce(request.variableDependencies, mockedVariables, (function (acc, nextVarDependency) {
                var argDep = nextVarDependency.dependency;
                switch (argDep.TAG | 0) {
                  case /* ArgumentDependency */0 :
                      var call = argDep._0.functionFromScript + "(" + payload$1 + ")";
                      var script = transpiled + "\n\n" + call;
                      var fullScript = script.replace(new RegExp("export ", "g"), "");
                      var result = quickjs.evalCode(fullScript);
                      acc[nextVarDependency.name] = result;
                      return acc;
                  case /* Direct */1 :
                  case /* GraphQLProbe */2 :
                      return acc;
                  
                }
              }));
        var graphQLResult = Graphql.graphqlSync(schema, operationDoc, undefined, undefined, Caml_option.some(variables));
        return Promise.resolve({
                    TAG: 0,
                    _0: {
                      variables: variables,
                      graphQLResult: graphQLResult
                    },
                    [Symbol.for("name")]: "Ok"
                  });
      });
  return __x$1.catch(function (err) {
              console.warn("Error evalRequest: ", err);
              return Promise.resolve({
                          TAG: 1,
                          _0: err,
                          [Symbol.for("name")]: "Error"
                        });
            });
}

function findMissingAuthServicesFromChainResult(result) {
  try {
    var chainResults = result.data.oneGraph.executeChain.results;
    return OneGraphAuth.distinctServices(Belt_Array.concatMany(Belt_Array.map(chainResults, (function (operation) {
                          var errors;
                          try {
                            errors = Belt_Array.concatMany(Belt_Array.map(operation.result, (function (result) {
                                        return result.errors;
                                      })));
                          }
                          catch (exn){
                            errors = [];
                          }
                          return OnegraphAuth.findMissingAuthServices(errors);
                        }))));
  }
  catch (exn){
    return [];
  }
}

function internallyPatchChain(chain) {
  var transpiled = transpileFullChainScript(chain);
  var requestsWithLockedVariables = patchChainRequestsArgDeps(chain);
  return {
          name: chain.name,
          script: transpiled,
          scriptDependencies: chain.scriptDependencies,
          requests: requestsWithLockedVariables,
          blocks: chain.blocks
        };
}

function transformChain(chain) {
  return Chain.compileOperationDoc(internallyPatchChain(chain));
}

function remoteChainCalls(appId, chainId, chain) {
  var compiled = Chain.compileOperationDoc(internallyPatchChain(chain));
  var targetChain = compiled.chains[0];
  var freeVariables = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            var key = exposed.exposedName;
            var _other = exposed.upstreamType;
            var value;
            switch (_other) {
              case "Float" :
              case "Float!" :
                  value = "42.0";
                  break;
              case "Int" :
              case "Int!" :
                  value = "42";
                  break;
              case "String" :
              case "String!" :
                  value = "\"\"";
                  break;
              default:
                value = "{}";
            }
            return "\"" + key + "\": " + value;
          })).join(", ");
  var variableParams = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            return exposed.exposedName;
          })).join(", ");
  var curl = "curl -X POST \"https://serve.onegraph.com/graphql?app_id=" + appId + "\" --data '{\"doc_id\": \"" + chainId + "\", \"operationName\": \"" + targetChain.operationName + "\", \"variables\": {" + freeVariables + "}}'";
  var $$fetch = "async function " + chain.name + " ({" + variableParams + "}) {\n  await fetch(\"https://serve.onegraph.com/graphql?app_id=" + appId + "\",\n    {\n      method: \"POST\",\n      \"Content-Type\": \"application/json\",\n      body: JSON.stringify({\n        \"doc_id\": \"" + chainId + "\",\n        \"operationName\": \"" + targetChain.operationName + "\",\n        \"variables\": {" + freeVariables + "}\n        }\n      )\n    }\n  )\n}";
  var htmlInputs = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            var key = exposed.exposedName;
            var _other = exposed.upstreamType;
            var exit = 0;
            switch (_other) {
              case "Float" :
              case "Float!" :
                  exit = 3;
                  break;
              case "Int" :
              case "Int!" :
                  exit = 2;
                  break;
              case "String" :
              case "String!" :
                  exit = 1;
                  break;
              default:
                return "";
            }
            switch (exit) {
              case 1 :
                  return "\n  <label>\n    " + key + "\n    <input type=\"text\" name=\"" + key + "\">\n  </label>";
              case 2 :
                  return "\n  <label>\n    " + key + "\n    <input type=\"number\" name=\"" + key + "\" step=1>\n  </label>";
              case 3 :
                  return "\n  <label>\n    " + key + "\n    <input type=\"number\" name=\"" + key + "\" step=0.1>\n  </label>";
              
            }
          })).join("\n");
  var netlifyHtml = "<form class=\"" + chain.name + "-form\" action=\"/.netlify/functions/" + chain.name + "\" method=\"POST\">" + htmlInputs + "\n  <button class=\"button\" type=\"submit\">Say hello!</button>\n</form>";
  var netlifyVariables = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            var key = exposed.exposedName;
            var _other = exposed.upstreamType;
            var coerce;
            switch (_other) {
              case "Boolean" :
              case "Boolean!" :
                  coerce = "params[\"" + key + "\"]?.trim() === \"true\"";
                  break;
              case "Float" :
              case "Float!" :
                  coerce = "parseFloat(params[\"" + key + "\"])";
                  break;
              case "Int" :
              case "Int!" :
                  coerce = "parseInt(params[\"" + key + "\"])";
                  break;
              case "JSON" :
              case "JSON!" :
                  coerce = "JSON.parse(params[\"" + key + "\"])";
                  break;
              case "String" :
              case "String!" :
                  coerce = "params[\"" + key + "\"]";
                  break;
              default:
                coerce = "params[\"" + key + "\"]";
            }
            return "const " + key + " = " + coerce;
          })).join("\n\t");
  var netlifyVariablesObject = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            var key = exposed.exposedName;
            return "\"" + key + "\": " + key;
          })).join(", ");
  var netlifyScript = "// ./functions/" + chain.name + ".js\nconst fetch = require(\"node-fetch\");\nconst querystring = require(\"querystring\");\n\nexports.handler = async (event, context) => {\n  // Only allow POST\n  if (event.httpMethod !== \"POST\") {\n    return { statusCode: 405, body: \"Method Not Allowed\" };\n  }\n\n  // When the method is POST, the name will no longer be in the event’s\n  // queryStringParameters – it’ll be in the event body encoded as a query string\n  const params = querystring.parse(event.body);\n  " + netlifyVariables + "\n\n  // Execute chain\n  await fetch(\n    \"https://serve.onegraph.com/graphql?app_id=" + appId + "\",\n  {\n    method: \"POST\",\n    \"Content-Type\": \"application/json\",\n    body: JSON.stringify({\n      \"doc_id\": \"" + chainId + "\",\n      \"operationName\": \"" + targetChain.operationName + "\",\n      \"variables\": {" + netlifyVariablesObject + "}\n      }\n    )\n  })\n\n  return {\n    statusCode: 200,\n    body: \"Finished executing chain!\",\n  };\n};\n";
  var netlify_path = "functions/" + chain.name + ".js";
  var netlify = {
    path: netlify_path,
    form: netlifyHtml,
    code: netlifyScript
  };
  var scriptKitArgs = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            var key = exposed.exposedName;
            var _other = exposed.upstreamType;
            var coerce;
            switch (_other) {
              case "Float" :
              case "Float!" :
                  coerce = "parseFloat(await arg(\"" + key + "\"))";
                  break;
              case "Int" :
              case "Int!" :
                  coerce = "parseInt(await arg(\"" + key + "\"))";
                  break;
              case "JSON" :
              case "JSON!" :
                  coerce = "JSON.parse(await arg(\"" + key + "\"))";
                  break;
              case "String" :
              case "String!" :
                  coerce = "await arg(\"" + key + "\")";
                  break;
              default:
                coerce = "await arg(\"" + key + "\"\")";
            }
            return "// " + exposed.upstreamType + "\nconst " + key + " = " + coerce;
          })).join("\n");
  var scriptKitVariables = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            var key = exposed.exposedName;
            return "\"" + key + "\": " + key;
          })).join(", ");
  var scriptKit = "\n" + scriptKitArgs + "\n\nlet response = await post(\"https://serve.onegraph.com/graphql?app_id=" + appId + "\",\n  JSON.stringify(\n    {\n     \"doc_id\": \"" + chainId + "\",\n     \"operationName\": \"" + targetChain.operationName + "\",\n     \"variables\": {" + scriptKitVariables + "}\n    }\n  ) \n)\n\nconsole.log(\"Response: \", response.data)\n";
  var nextJsVariableCoerced = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
            var key = exposed.exposedName;
            var _other = exposed.upstreamType;
            var coerce;
            switch (_other) {
              case "Boolean" :
              case "Boolean!" :
                  coerce = key + "?.trim() === \"true\"";
                  break;
              case "Float" :
              case "Float!" :
                  coerce = "parseFloat(" + key + ") || 0.0";
                  break;
              case "Int" :
              case "Int!" :
                  coerce = "parseInt(" + key + ") || 0";
                  break;
              case "JSON" :
              case "JSON!" :
                  coerce = "JSON.parse(" + key + ")";
                  break;
              case "String" :
              case "String!" :
                  coerce = key;
                  break;
              default:
                coerce = key;
            }
            return key + ": " + coerce;
          })).join(",\n\t");
  var nextjsScript = "const fetch = require(\"node-fetch\");\n\nasync function " + chain.name + " ({" + variableParams + "}) {\n  const resp = await fetch(\"https://serve.onegraph.com/graphql?app_id=" + appId + "\",\n    {\n      method: \"POST\",\n      \"Content-Type\": \"application/json\",\n      body: JSON.stringify({\n        \"doc_id\": \"" + chainId + "\",\n        \"operationName\": \"" + targetChain.operationName + "\",\n        \"variables\": {" + nextJsVariableCoerced + "}\n        }\n      )\n    }\n  )\n\n  return resp.json()\n}\n\nexport default async function handler(req, res) {\n  /* If not using GET, be sure to set the header \"Content-Type: application/json\"\n     for requests to your Next.js API */\n  const { query, message, name, positionMs } = req.method === 'GET' ? req.query : req.body\n\n  const result = await " + chain.name + "({ " + variableParams + " })\n\n  let errors = result.errors || [];\n\n  // Gather all of the errors from the nodes in the request chain\n  result?.data?.oneGraph?.executeChain?.results?.forEach((call) => {\n    const requestId = call.request.id\n\n    const requestErrors =\n      call?.result?.flatMap((result) => result?.errors)?.filter(Boolean) || []\n\n    const callArgumentDependencyErrors =\n      call?.argumentDependencies\n        ?.filter((argumentDependency) => !!argumentDependency?.error)\n        ?.map((argumentDependency) => {\n          return {\n            name: requestId + '.' + argumentDependency.name,\n            errors: argumentDependency.error,\n          }\n        })\n        ?.filter(Boolean) || []\n\n    if (requestErrors.length > 0 || callArgumentDependencyErrors.length > 0) {\n      console.warn('Error in requestId=', requestId, requestErrors, errors)\n      errors = errors\n        .concat(requestErrors)\n        .concat(callArgumentDependencyErrors)\n        .filter(Boolean)\n    }\n  })\n\n  // No errors present means the chain executed well\n  if ((errors || []).length === 0) {\n    res.status(200).json({\n      success: true\n    })\n  } else {\n    if ((result.errors || []).length > 0) {\n      console.warning(\"Error in executing chain " + chain.name + "\", errors)\n    }\n    res.status(500).json({ message: \"Error executing chain\" })\n  }\n}";
  var nextjs_path = "pages/api/" + chain.name + ".js";
  var nextjs = {
    path: nextjs_path,
    code: nextjsScript
  };
  return {
          fetch: $$fetch,
          curl: curl,
          scriptKit: scriptKit,
          netlify: netlify,
          nextjs: nextjs
        };
}

function transformAndExecuteChain(chain, oneGraphAuth, variables) {
  var compiled = Chain.compileOperationDoc(internallyPatchChain(chain));
  var targetChain = compiled.chains[0];
  return OneGraphRe.fetchOneGraph(oneGraphAuth, compiled.operationDoc, targetChain.operationName, variables);
}

function Inspector$Block(Props) {
  var block = Props.block;
  var onAddBlock = Props.onAddBlock;
  var match = React.useState(function () {
        return block.body;
      });
  var setOriginalContent = match[1];
  var editor = React.useRef(undefined);
  React.useEffect((function () {
          var value = Belt_Option.map(editor.current, (function (prim) {
                  return prim.getValue();
                }));
          var match = Caml_obj.caml_equal(block.body, value);
          if (value !== undefined && !match) {
            Curry._1(setOriginalContent, (function (param) {
                    return block.body;
                  }));
            Belt_Option.forEach(editor.current, (function (editor) {
                    editor.setValue(block.body);
                    
                  }));
          }
          
        }), [match[0] === block.body]);
  return React.createElement(React.Fragment, undefined, React.createElement(Comps.Pre.make, {
                  children: block.body
                }), React.createElement(Comps.Button.make, {
                  onClick: (function (param) {
                      return Curry._1(onAddBlock, block);
                    }),
                  children: "Add block to chain"
                }));
}

var Block = {
  make: Inspector$Block
};

function Inspector$GitHub(Props) {
  var chain = Props.chain;
  var savedChainId = Props.savedChainId;
  var oneGraphAuth = Props.oneGraphAuth;
  var loadedChain = Chain.loadFromLocalStorage(savedChainId);
  var appId = oneGraphAuth.appId;
  var remoteChainCalls$1 = remoteChainCalls(appId, savedChainId, Belt_Option.getExn(loadedChain));
  var match = React.useState(function () {
        return {
                repoList: undefined,
                selectedRepo: undefined,
                repoProjectGuess: undefined
              };
      });
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          Debug.assignToWindowForDeveloperDebug("guessGitHubProject", OneGraphRe.GitHub.guessProjecType);
          var __x = OneGraphRe.basicFetchOneGraphPersistedQuery("993a3e2d-de45-44fa-bff4-0c58c6150cbf", undefined, "fc839e0e-982b-43fc-b59b-3c080e17480a", undefined, "ExecuteChainMutation_look_ma_connections");
          __x.then(function (result) {
                console.log("Got some repo results: ", result);
                return Promise.resolve(Belt_Option.forEach(Caml_option.undefined_to_opt(result.data), (function (data) {
                                  try {
                                    return Belt_Option.forEach(Belt_Array.getBy(data.oneGraph.executeChain.results, (function (result) {
                                                      return result.request.id === "ListMyRepositories";
                                                    })), (function (request) {
                                                  var repos = Caml_array.get(request.result, 0).data.me.github.repositories.edges;
                                                  return Curry._1(setState, (function (oldState) {
                                                                return {
                                                                        repoList: repos,
                                                                        selectedRepo: oldState.selectedRepo,
                                                                        repoProjectGuess: oldState.repoProjectGuess
                                                                      };
                                                              }));
                                                }));
                                  }
                                  catch (raw_ex){
                                    var ex = Caml_js_exceptions.internalToOCamlException(raw_ex);
                                    console.warn("Exception while fetching GitHub Repo list", ex);
                                    return ;
                                  }
                                })));
              });
          
        }), []);
  return Belt_Option.mapWithDefault(state.repoList, null, (function (repoList) {
                var match = state.selectedRepo;
                var match$1 = state.repoProjectGuess;
                var tmp;
                if (match !== undefined) {
                  if (match$1 !== undefined) {
                    var target = typeof match$1 === "number" ? (
                        match$1 !== 0 ? "next.js project" : "repo"
                      ) : (
                        match$1._0 === "any" ? "Netlify functions" : "next.js project"
                      );
                    tmp = "Push chain to " + target + " on GitHub";
                  } else {
                    tmp = "Determining project type...";
                  }
                } else {
                  tmp = "Select a GitHub repository";
                }
                return React.createElement(React.Fragment, undefined, React.createElement(Comps.Select.make, {
                                children: null,
                                onChange: (function ($$event) {
                                    var id = $$event.target.value;
                                    var repo = Belt_Option.flatMap(state.repoList, (function (repoList) {
                                            return Belt_Array.getBy(repoList, (function (repoEdge) {
                                                          return repoEdge.node.id === id;
                                                        }));
                                          }));
                                    Curry._1(setState, (function (oldState) {
                                            return {
                                                    repoList: oldState.repoList,
                                                    selectedRepo: repo,
                                                    repoProjectGuess: undefined
                                                  };
                                          }));
                                    return Belt_Option.forEach(repo, (function (repo) {
                                                  var match = repo.node.nameWithOwner.split("/");
                                                  if (match.length !== 2) {
                                                    return ;
                                                  }
                                                  var owner = match[0];
                                                  var name = match[1];
                                                  var __x = OneGraphRe.GitHub.guessProjecType(owner, name);
                                                  __x.then(function (result) {
                                                        return Promise.resolve(Curry._1(setState, (function (oldState) {
                                                                          return {
                                                                                  repoList: oldState.repoList,
                                                                                  selectedRepo: oldState.selectedRepo,
                                                                                  repoProjectGuess: result
                                                                                };
                                                                        })));
                                                      });
                                                  
                                                }));
                                  }),
                                value: Belt_Option.mapWithDefault(state.selectedRepo, "", (function (repo) {
                                        return repo.node.id;
                                      }))
                              }, React.createElement("option", {
                                    value: ""
                                  }), Belt_Array.map(repoList, (function (repoEdge) {
                                      return React.createElement("option", {
                                                  value: repoEdge.node.id
                                                }, repoEdge.node.nameWithOwner);
                                    }))), React.createElement(Comps.Button.make, {
                                onClick: (function (param) {
                                    return Belt_Option.forEach(state.repoProjectGuess, (function (repoProjectGuess) {
                                                  return Belt_Option.forEach(state.selectedRepo, (function (repo) {
                                                                var match = repo.node.nameWithOwner.split("/");
                                                                if (match.length !== 2) {
                                                                  return ;
                                                                }
                                                                var owner = match[0];
                                                                var name = match[1];
                                                                var content;
                                                                var exit = 0;
                                                                if (typeof repoProjectGuess === "number") {
                                                                  if (repoProjectGuess !== 0) {
                                                                    exit = 1;
                                                                  } else {
                                                                    content = Prettier.format(remoteChainCalls$1.fetch, {
                                                                          parser: "babel",
                                                                          plugins: [ParserBabel],
                                                                          singleQuote: true
                                                                        });
                                                                  }
                                                                } else if (repoProjectGuess._0 === "any") {
                                                                  var code = remoteChainCalls$1.netlify.code;
                                                                  var fmt = function (s) {
                                                                    return Prettier.format(s, {
                                                                                parser: "babel",
                                                                                plugins: [ParserBabel],
                                                                                singleQuote: true
                                                                              });
                                                                  };
                                                                  Debug.assignToWindowForDeveloperDebug("nextjscode", code);
                                                                  Debug.assignToWindowForDeveloperDebug("pfmt", fmt);
                                                                  content = Prettier.format(code, {
                                                                        parser: "babel",
                                                                        plugins: [ParserBabel],
                                                                        singleQuote: true
                                                                      });
                                                                } else {
                                                                  exit = 1;
                                                                }
                                                                if (exit === 1) {
                                                                  var code$1 = remoteChainCalls$1.nextjs.code;
                                                                  var fmt$1 = function (s) {
                                                                    return Prettier.format(s, {
                                                                                parser: "babel",
                                                                                plugins: [ParserBabel],
                                                                                singleQuote: true
                                                                              });
                                                                  };
                                                                  Debug.assignToWindowForDeveloperDebug("nextjscode", code$1);
                                                                  Debug.assignToWindowForDeveloperDebug("pfmt", fmt$1);
                                                                  content = Prettier.format(code$1, {
                                                                        parser: "babel",
                                                                        plugins: [ParserBabel],
                                                                        singleQuote: true
                                                                      });
                                                                }
                                                                var path = typeof repoProjectGuess === "number" ? (
                                                                    repoProjectGuess !== 0 ? remoteChainCalls$1.nextjs.path : "src/" + chain.name + ".js"
                                                                  ) : (
                                                                    repoProjectGuess._0 === "any" ? remoteChainCalls$1.netlify.path : remoteChainCalls$1.nextjs.path
                                                                  );
                                                                var file = {
                                                                  path: path,
                                                                  content: content,
                                                                  mode: "100644"
                                                                };
                                                                var __x = Curry._1(OneGraphRe.GitHub.pushToRepo, {
                                                                      owner: owner,
                                                                      name: name,
                                                                      branch: "onegraph-studio",
                                                                      treeFiles: [file],
                                                                      message: "Automated push for " + chain.name,
                                                                      acceptOverrides: true
                                                                    });
                                                                __x.then(function (result) {
                                                                      return Promise.resolve((console.log("Got push result: ", result), undefined));
                                                                    });
                                                                
                                                              }));
                                                }));
                                  }),
                                children: tmp,
                                disabled: Belt_Option.isNone(state.repoProjectGuess)
                              }));
              }));
}

var GitHub = {
  make: Inspector$GitHub
};

function Inspector$DirectVariable(Props) {
  var variable = Props.variable;
  var onVariableUpdated = Props.onVariableUpdated;
  return React.createElement("div", {
              className: ""
            }, React.createElement("form", undefined, React.createElement("label", {
                      className: "m-0"
                    }, React.createElement("div", {
                          className: "mt-1 flex rounded-md shadow-sm"
                        }, React.createElement("span", {
                              className: "inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm"
                            }, "$variableName:"), React.createElement("input", {
                              className: "block w-full px-3 text-gray-500 border border-gray-300 bg-white border-l-0 rounded-md shadow-sm focus:outline-none focus:ring-blue-300 focus:border-blue-300 sm:text-sm rounded-l-none",
                              value: variable,
                              onChange: (function ($$event) {
                                  return Curry._1(onVariableUpdated, $$event.target.value);
                                })
                            })))));
}

var DirectVariable = {
  make: Inspector$DirectVariable
};

function Inspector$DirectJSON(Props) {
  var json = Props.json;
  var onJsonUpdated = Props.onJsonUpdated;
  return React.createElement("div", {
              className: ""
            }, React.createElement("form", undefined, React.createElement("label", {
                      className: "m-0"
                    }, React.createElement("div", {
                          className: "mt-1 flex rounded-md shadow-sm"
                        }, React.createElement("span", {
                              className: "inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm"
                            }, "Raw JSON:"), React.createElement("textarea", {
                              defaultValue: JSON.stringify(json),
                              className: "block w-full px-3 text-gray-500 border border-gray-300 bg-white border-l-0 rounded-md shadow-sm focus:outline-none focus:ring-blue-300 focus:border-blue-300 sm:text-sm rounded-l-none",
                              onChange: (function ($$event) {
                                  var value = $$event.target.value;
                                  var newJson;
                                  try {
                                    newJson = Caml_option.some(JSON.parse(value));
                                  }
                                  catch (exn){
                                    newJson = undefined;
                                  }
                                  return Belt_Option.forEach(newJson, onJsonUpdated);
                                })
                            })))));
}

var DirectJSON = {
  make: Inspector$DirectJSON
};

function Inspector$ArgumentDependency(Props) {
  var argDep = Props.argDep;
  var onArgDepUpdated = Props.onArgDepUpdated;
  return React.createElement("div", undefined, React.createElement("form", undefined, React.createElement("label", {
                      className: "m-0"
                    }, React.createElement("div", {
                          className: "flex rounded-md shadow-sm"
                        }, React.createElement("span", {
                              className: "inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm"
                            }, "ifMissing:"), React.createElement("select", {
                              className: "px-4 border border-gray-300 bg-white border-l-0 rounded-md shadow-sm focus:outline-none focus:ring-blue-300 focus:border-blue-300 sm:text-sm rounded-l-none m-0 pt-0 pb-0 pl-4 pr-8",
                              value: argDep.ifMissing,
                              onChange: (function ($$event) {
                                  var ifMissing = Chain.ifMissingOfString($$event.target.value);
                                  if (ifMissing.TAG === /* Ok */0) {
                                    return Curry._1(onArgDepUpdated, {
                                                functionFromScript: argDep.functionFromScript,
                                                maxRecur: argDep.maxRecur,
                                                ifMissing: ifMissing._0,
                                                ifList: argDep.ifList,
                                                fromRequestIds: argDep.fromRequestIds,
                                                name: argDep.name
                                              });
                                  }
                                  
                                })
                            }, React.createElement("option", {
                                  value: Chain.stringOfIfMissing("ERROR")
                                }, "Error"), React.createElement("option", {
                                  value: Chain.stringOfIfMissing("ALLOW")
                                }, "Allow"), React.createElement("option", {
                                  value: Chain.stringOfIfMissing("SKIP")
                                }, "Skip")))), null));
}

var ArgumentDependency = {
  make: Inspector$ArgumentDependency
};

function Inspector$GraphQLProbe(Props) {
  var probe = Props.probe;
  var onArgDepUpdated = Props.onArgDepUpdated;
  return React.createElement("div", undefined, React.createElement("form", undefined, React.createElement("label", {
                      className: "m-0"
                    }, React.createElement("div", {
                          className: "flex rounded-md shadow-sm"
                        }, React.createElement("span", {
                              className: "inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500 text-sm"
                            }, "ifMissing:"), React.createElement("select", {
                              className: "block w-full text-gray-500 px-3 border border-gray-300 bg-white border-l-0 rounded-md shadow-sm focus:outline-none focus:ring-blue-300 focus:border-blue-300 sm:text-sm rounded-l-none m-0 pt-0 pb-0 pl-4 pr-8",
                              value: probe.ifMissing,
                              onChange: (function ($$event) {
                                  var ifMissing = Chain.ifMissingOfString($$event.target.value);
                                  if (ifMissing.TAG === /* Ok */0) {
                                    return Curry._1(onArgDepUpdated, {
                                                name: probe.name,
                                                ifMissing: ifMissing._0,
                                                ifList: probe.ifList,
                                                fromRequestId: probe.fromRequestId,
                                                path: probe.path,
                                                functionFromScript: probe.functionFromScript
                                              });
                                  }
                                  
                                })
                            }, React.createElement("option", {
                                  value: Chain.stringOfIfMissing("ERROR")
                                }, "Error"), React.createElement("option", {
                                  value: Chain.stringOfIfMissing("ALLOW")
                                }, "Allow"), React.createElement("option", {
                                  value: Chain.stringOfIfMissing("SKIP")
                                }, "Skip")))), null));
}

var GraphQLProbe = {
  make: Inspector$GraphQLProbe
};

function emptyArgumentDependency(variableName) {
  return {
          name: variableName,
          dependency: {
            TAG: 0,
            _0: {
              functionFromScript: "INITIAL_UNKNOWN",
              maxRecur: undefined,
              ifMissing: "ERROR",
              ifList: "ALL",
              fromRequestIds: [],
              name: variableName
            },
            [Symbol.for("name")]: "ArgumentDependency"
          }
        };
}

function Inspector$RequestArgument(Props) {
  var request = Props.request;
  var chain = Props.chain;
  var variableName = Props.variableName;
  var onRequestUpdated = Props.onRequestUpdated;
  var defaultRequestArgument = Props.defaultRequestArgument;
  var argDep = Belt_Option.getWithDefault(Belt_Array.getBy(request.variableDependencies, (function (argDep) {
              return argDep.name === variableName;
            })), defaultRequestArgument);
  var argDep$1 = argDep.dependency;
  switch (argDep$1.TAG | 0) {
    case /* ArgumentDependency */0 :
        return React.createElement(Inspector$ArgumentDependency, {
                    request: request,
                    chain: chain,
                    argDep: argDep$1._0,
                    onArgDepUpdated: (function (newArgDep) {
                        return Curry._1(onRequestUpdated, {
                                    id: request.id,
                                    variableDependencies: Belt_Array.keepMap(request.variableDependencies, (function (variableDependency) {
                                            var dependency = variableDependency.name === variableName ? ({
                                                  TAG: 0,
                                                  _0: newArgDep,
                                                  [Symbol.for("name")]: "ArgumentDependency"
                                                }) : variableDependency.dependency;
                                            return {
                                                    name: variableDependency.name,
                                                    dependency: dependency
                                                  };
                                          })),
                                    operation: request.operation,
                                    dependencyRequestIds: request.dependencyRequestIds
                                  });
                      })
                  });
    case /* Direct */1 :
        var variable = argDep$1._0.value;
        if (variable.TAG === /* JSON */0) {
          return React.createElement(Inspector$DirectJSON, {
                      request: request,
                      chain: chain,
                      json: variable._0,
                      onJsonUpdated: (function (newJson) {
                          return Curry._1(onRequestUpdated, {
                                      id: request.id,
                                      variableDependencies: Belt_Array.keepMap(request.variableDependencies, (function (variableDependency) {
                                              var dependency = variableDependency.name === variableName ? ({
                                                    TAG: 1,
                                                    _0: {
                                                      name: variableName,
                                                      value: {
                                                        TAG: 0,
                                                        _0: newJson,
                                                        [Symbol.for("name")]: "JSON"
                                                      }
                                                    },
                                                    [Symbol.for("name")]: "Direct"
                                                  }) : variableDependency.dependency;
                                              return {
                                                      name: variableDependency.name,
                                                      dependency: dependency
                                                    };
                                            })),
                                      operation: request.operation,
                                      dependencyRequestIds: request.dependencyRequestIds
                                    });
                        })
                    });
        } else {
          return React.createElement(Inspector$DirectVariable, {
                      request: request,
                      chain: chain,
                      variable: variable._0,
                      onVariableUpdated: (function (newVariable) {
                          return Curry._1(onRequestUpdated, {
                                      id: request.id,
                                      variableDependencies: Belt_Array.keepMap(request.variableDependencies, (function (variableDependency) {
                                              var dependency = variableDependency.name === variableName ? ({
                                                    TAG: 1,
                                                    _0: {
                                                      name: variableName,
                                                      value: {
                                                        TAG: 1,
                                                        _0: newVariable,
                                                        [Symbol.for("name")]: "Variable"
                                                      }
                                                    },
                                                    [Symbol.for("name")]: "Direct"
                                                  }) : variableDependency.dependency;
                                              return {
                                                      name: variableDependency.name,
                                                      dependency: dependency
                                                    };
                                            })),
                                      operation: request.operation,
                                      dependencyRequestIds: request.dependencyRequestIds
                                    });
                        })
                    });
        }
    case /* GraphQLProbe */2 :
        return React.createElement(Inspector$GraphQLProbe, {
                    request: request,
                    chain: chain,
                    probe: argDep$1._0,
                    onArgDepUpdated: (function (newProbe) {
                        return Curry._1(onRequestUpdated, {
                                    id: request.id,
                                    variableDependencies: Belt_Array.keepMap(request.variableDependencies, (function (variableDependency) {
                                            var dependency = variableDependency.name === variableName ? ({
                                                  TAG: 2,
                                                  _0: newProbe,
                                                  [Symbol.for("name")]: "GraphQLProbe"
                                                }) : variableDependency.dependency;
                                            return {
                                                    name: variableDependency.name,
                                                    dependency: dependency
                                                  };
                                          })),
                                    operation: request.operation,
                                    dependencyRequestIds: request.dependencyRequestIds
                                  });
                      })
                  });
    
  }
}

var RequestArgument = {
  make: Inspector$RequestArgument
};

var openedArrow = React.createElement("div", {
      className: "rounded-full border border border-indigo w-7 h-7 flex items-center justify-center bg-indigo"
    }, React.createElement("svg", {
          "aria-hidden": true,
          height: "24",
          width: "24",
          fill: "none",
          stroke: "white",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "2",
          viewBox: "0 0 24 24",
          xmlns: "http://www.w3.org/2000/svg"
        }, React.createElement("polyline", {
              points: "18 15 12 9 6 15"
            })));

var closedArrow = React.createElement("div", {
      className: "rounded-full border border-grey w-7 h-7 flex items-center justify-center"
    }, React.createElement("svg", {
          "aria-hidden": true,
          className: "",
          height: "24",
          width: "24",
          fill: "none",
          stroke: "#606F7B",
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: "2",
          viewBox: "0 0 24 24",
          xmlns: "http://www.w3.org/2000/svg"
        }, React.createElement("polyline", {
              points: "6 9 12 15 18 9"
            })));

function Inspector$Request(Props) {
  var request = Props.request;
  var chain = Props.chain;
  var onChainUpdated = Props.onChainUpdated;
  var schema = Props.schema;
  var onRequestCodeInspected = Props.onRequestCodeInspected;
  var cachedResult = Props.cachedResult;
  var onExecuteRequest = Props.onExecuteRequest;
  var onLogin = Props.onLogin;
  var requestValueCache = Props.requestValueCache;
  var onDeleteEdge = Props.onDeleteEdge;
  var onPotentialVariableSourceConnect = Props.onPotentialVariableSourceConnect;
  var onDragStart = Props.onDragStart;
  var connectionDrag = React.useContext(ConnectionContext.context);
  var match = React.useState(function () {
        
      });
  var setOpenedTabs = match[1];
  var openedTabs = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setMockedEvalResults = match$1[1];
  var match$2 = React.useState(function () {
        return {};
      });
  var setFormVariables = match$2[1];
  var formVariables = match$2[0];
  var match$3 = React.useState(function () {
        
      });
  var setPotentialConnection = match$3[1];
  var potentialConnection = match$3[0];
  var domRef = React.useRef(null);
  var chainFragmentsDoc = Belt_Array.keepMap(chain.blocks, (function (block) {
            var match = block.kind;
            if (match !== 3) {
              return ;
            } else {
              return block.body;
            }
          })).join("\n\n");
  React.useEffect((function () {
          var requestsWithLockedVariables = patchChainRequestsArgDeps(chain);
          var chain_name = chain.name;
          var chain_script = chain.script;
          var chain_scriptDependencies = chain.scriptDependencies;
          var chain_blocks = chain.blocks;
          var chain$1 = {
            name: chain_name,
            script: chain_script,
            scriptDependencies: chain_scriptDependencies,
            requests: requestsWithLockedVariables,
            blocks: chain_blocks
          };
          var request$1 = patchRequestArgDeps(request);
          var __x = evalRequest(schema, chain$1, request$1, requestValueCache);
          __x.then(function (result) {
                return Promise.resolve(Curry._1(setMockedEvalResults, (function (param) {
                                  if (result.TAG !== /* Ok */0) {
                                    return result;
                                  }
                                  var variables = Js_dict.get(result._0, "variables");
                                  return Belt_Option.map(variables, (function (variables) {
                                                return {
                                                        TAG: 0,
                                                        _0: variables,
                                                        [Symbol.for("name")]: "Ok"
                                                      };
                                              }));
                                })));
              });
          
        }), [
        Belt_Option.getExn(JSON.stringify(request)),
        chain.script
      ]);
  var parsedOperation = Graphql.parse(request.operation.body);
  var definition = Belt_Array.getExn(parsedOperation.definitions, 0);
  var variableNames = Card.getFirstVariables(request.operation);
  var variables = Belt_Array.map(variableNames, (function (param) {
          var variableName = param[0];
          var varDep = Belt_Option.getWithDefault(Belt_Array.getBy(request.variableDependencies, (function (varDep) {
                      return varDep.name === variableName;
                    })), {
                name: variableName,
                dependency: {
                  TAG: 1,
                  _0: {
                    name: variableName,
                    value: {
                      TAG: 0,
                      _0: JSON.parse("\"\""),
                      [Symbol.for("name")]: "JSON"
                    }
                  },
                  [Symbol.for("name")]: "Direct"
                }
              });
          var isOpen = Belt_SetString.has(openedTabs, varDep.name);
          var match = varDep.dependency;
          var tmp;
          switch (match.TAG | 0) {
            case /* ArgumentDependency */0 :
                tmp = "argument";
                break;
            case /* Direct */1 :
                tmp = match._0.value.TAG === /* JSON */0 ? "json" : "variable";
                break;
            case /* GraphQLProbe */2 :
                tmp = "probe";
                break;
            
          }
          return React.createElement("article", {
                      key: variableName,
                      className: "m-2",
                      id: "inspector-variable-" + variableName,
                      onMouseDown: (function ($$event) {
                          if (!$$event.altKey) {
                            return ;
                          }
                          $$event.preventDefault();
                          $$event.stopPropagation();
                          if (typeof connectionDrag !== "number") {
                            return ;
                          }
                          var sourceDom = $$event.target;
                          var connectionDrag_0 = {
                            TAG: 0,
                            targetRequest: request,
                            variableDependency: varDep,
                            [Symbol.for("name")]: "Variable"
                          };
                          var connectionDrag$1 = {
                            TAG: 1,
                            target: connectionDrag_0,
                            sourceDom: sourceDom,
                            [Symbol.for("name")]: "StartedTarget"
                          };
                          Curry._1(onDragStart, connectionDrag$1);
                          return Curry._1(setPotentialConnection, (function (s) {
                                        return Belt_SetString.add(s, variableName);
                                      }));
                        }),
                      onMouseEnter: (function ($$event) {
                          if (typeof connectionDrag === "number" || connectionDrag.TAG !== /* StartedSource */0) {
                            return ;
                          } else {
                            return Curry._1(setPotentialConnection, (function (s) {
                                          return Belt_SetString.add(s, variableName);
                                        }));
                          }
                        }),
                      onMouseLeave: (function ($$event) {
                          if (typeof connectionDrag === "number") {
                            return ;
                          }
                          switch (connectionDrag.TAG | 0) {
                            case /* StartedSource */0 :
                            case /* StartedTarget */1 :
                                break;
                            case /* Completed */2 :
                                return ;
                            
                          }
                          return Curry._1(setPotentialConnection, (function (s) {
                                        return Belt_SetString.remove(s, variableName);
                                      }));
                        }),
                      onMouseUp: (function ($$event) {
                          var clientX = $$event.clientX;
                          var clientY = $$event.clientY;
                          var mouseClientPosition = [
                            clientX,
                            clientY
                          ];
                          Curry._1(setPotentialConnection, (function (s) {
                                  return Belt_SetString.remove(s, variableName);
                                }));
                          if (typeof connectionDrag === "number" || connectionDrag.TAG !== /* StartedSource */0) {
                            return ;
                          } else {
                            return Curry._1(onPotentialVariableSourceConnect, {
                                        TAG: 2,
                                        sourceRequest: connectionDrag.sourceRequest,
                                        sourceDom: connectionDrag.sourceDom,
                                        target: {
                                          TAG: 0,
                                          targetRequest: request,
                                          variableDependency: varDep,
                                          [Symbol.for("name")]: "Variable"
                                        },
                                        windowPosition: mouseClientPosition,
                                        [Symbol.for("name")]: "Completed"
                                      });
                          }
                        })
                    }, React.createElement("div", {
                          className: "flex justify-between items-center cursor-pointer p-1  text-gray-200 " + (
                            isOpen ? "rounded-t-sm" : "rounded-sm"
                          ) + (
                            Belt_SetString.has(potentialConnection, variableName) ? " bg-blue-600 border-blue-900" : ""
                          ),
                          onClick: (function (param) {
                              return Curry._1(setOpenedTabs, (function (oldOpenedTabs) {
                                            if (isOpen) {
                                              return Belt_SetString.remove(oldOpenedTabs, varDep.name);
                                            } else {
                                              return Belt_SetString.add(oldOpenedTabs, varDep.name);
                                            }
                                          }));
                            })
                        }, React.createElement("div", {
                              className: " font-semibold text-sm font-mono inline-block flex-grow",
                              style: {
                                color: Comps.colors["green-4"]
                              }
                            }, "\$" + varDep.name), React.createElement("select", {
                              style: {
                                backgroundColor: Comps.colors["gray-7"],
                                color: Comps.colors["gray-4"],
                                padding: "6px",
                                paddingRight: "40px",
                                width: "unset",
                                borderRadius: "6px"
                              },
                              value: tmp,
                              onChange: (function ($$event) {
                                  var match = $$event.target.value;
                                  var newDependency;
                                  switch (match) {
                                    case "argument" :
                                        newDependency = {
                                          TAG: 0,
                                          _0: {
                                            functionFromScript: "INITIAL_UNKNOWN",
                                            maxRecur: undefined,
                                            ifMissing: "SKIP",
                                            ifList: "FIRST",
                                            fromRequestIds: [],
                                            name: varDep.name
                                          },
                                          [Symbol.for("name")]: "ArgumentDependency"
                                        };
                                        break;
                                    case "json" :
                                        newDependency = {
                                          TAG: 1,
                                          _0: {
                                            name: varDep.name,
                                            value: {
                                              TAG: 0,
                                              _0: JSON.parse("{}"),
                                              [Symbol.for("name")]: "JSON"
                                            }
                                          },
                                          [Symbol.for("name")]: "Direct"
                                        };
                                        break;
                                    case "variable" :
                                        newDependency = {
                                          TAG: 1,
                                          _0: {
                                            name: varDep.name,
                                            value: {
                                              TAG: 1,
                                              _0: varDep.name,
                                              [Symbol.for("name")]: "Variable"
                                            }
                                          },
                                          [Symbol.for("name")]: "Direct"
                                        };
                                        break;
                                    default:
                                      newDependency = undefined;
                                  }
                                  if (newDependency === undefined) {
                                    return ;
                                  }
                                  var newVarDep_name = varDep.name;
                                  var newVarDep = {
                                    name: newVarDep_name,
                                    dependency: newDependency
                                  };
                                  var requestHasExistingVariableDependency = Belt_Array.some(request.variableDependencies, (function (existingVarDep) {
                                          return Caml_obj.caml_equal(existingVarDep, varDep);
                                        }));
                                  var newVariableDependencies = requestHasExistingVariableDependency ? Belt_Array.map(request.variableDependencies, (function (existingVarDep) {
                                            if (Caml_obj.caml_equal(existingVarDep, varDep)) {
                                              return newVarDep;
                                            } else {
                                              return existingVarDep;
                                            }
                                          })) : Belt_Array.concat(request.variableDependencies, [newVarDep]);
                                  var newRequest_id = request.id;
                                  var newRequest_operation = request.operation;
                                  var newRequest_dependencyRequestIds = request.dependencyRequestIds;
                                  var newRequest = {
                                    id: newRequest_id,
                                    variableDependencies: newVariableDependencies,
                                    operation: newRequest_operation,
                                    dependencyRequestIds: newRequest_dependencyRequestIds
                                  };
                                  var requests = Belt_Array.map(chain.requests, (function (req) {
                                          if (Caml_obj.caml_equal(req, request)) {
                                            return newRequest;
                                          } else {
                                            return req;
                                          }
                                        }));
                                  var newChain_name = chain.name;
                                  var newChain_script = chain.script;
                                  var newChain_scriptDependencies = chain.scriptDependencies;
                                  var newChain_blocks = chain.blocks;
                                  var newChain = {
                                    name: newChain_name,
                                    script: newChain_script,
                                    scriptDependencies: newChain_scriptDependencies,
                                    requests: requests,
                                    blocks: newChain_blocks
                                  };
                                  Curry._1(onChainUpdated, newChain);
                                  return Curry._1(setOpenedTabs, (function (oldOpenedTabs) {
                                                return Belt_SetString.add(oldOpenedTabs, varDep.name);
                                              }));
                                })
                            }, React.createElement("option", {
                                  value: "variable"
                                }, "Variable Input"), React.createElement("option", {
                                  value: "argument"
                                }, "Computed Value"), React.createElement("option", {
                                  disabled: true,
                                  value: "probe"
                                }, "GraphQL Probe"))), React.createElement("div", {
                          className: "text-grey-darkest p-2 bg-gray-600 text-gray-200 overflow-scroll rounded-b-sm " + (
                            isOpen ? "" : "hidden"
                          )
                        }, React.createElement(Inspector$RequestArgument, {
                              request: request,
                              chain: chain,
                              variableName: varDep.name,
                              onRequestUpdated: (function (newRequest) {
                                  return Curry._1(onChainUpdated, {
                                              name: chain.name,
                                              script: chain.script,
                                              scriptDependencies: chain.scriptDependencies,
                                              requests: Belt_Array.keepMap(chain.requests, (function (existingRequest) {
                                                      return Caml_obj.caml_equal(existingRequest, request) ? newRequest : existingRequest;
                                                    })),
                                              blocks: chain.blocks
                                            });
                                }),
                              defaultRequestArgument: varDep
                            })));
        }));
  var upstreamRequests = Belt_Array.keepMap(request.dependencyRequestIds, (function (upstreamRequestId) {
          var upstreamRequest = Belt_Array.getBy(chain.requests, (function (existingRequest) {
                  return existingRequest.id === upstreamRequestId;
                }));
          return Belt_Option.map(upstreamRequest, (function (upstreamRequest) {
                        return React.createElement("article", {
                                    key: request.id + upstreamRequest.id,
                                    className: "m-2"
                                  }, React.createElement("div", {
                                        className: "flex justify-between items-center cursor-pointer p-1 rounded-sm"
                                      }, React.createElement("span", {
                                            className: "font-semibold text-sm font-mono pl-2",
                                            style: {
                                              color: Comps.colors["green-4"]
                                            }
                                          }, upstreamRequest.id), React.createElement(Comps.Button.make, {
                                            onClick: (function ($$event) {
                                                $$event.stopPropagation();
                                                $$event.preventDefault();
                                                return Curry._2(onDeleteEdge, request.id, upstreamRequestId);
                                              }),
                                            style: {
                                              backgroundColor: Comps.colors["gray-7"],
                                              color: Comps.colors["gray-4"]
                                            },
                                            children: null
                                          }, React.createElement(Icons.Trash.make, {
                                                className: "inline mr-2",
                                                color: Comps.colors["gray-4"]
                                              }), "Remove Dependency")));
                      }));
        }));
  var editor = React.useRef(undefined);
  var compiledDoc = Chain.compileOperationDoc(chain);
  var content = compiledDoc.operationDoc;
  React.useEffect((function () {
          Belt_Option.forEach(editor.current, (function (editor) {
                  editor.setValue(content);
                  
                }));
          
        }), [content]);
  var inputs = Belt_Array.map(Card.getFirstVariables(request.operation), (function (param) {
          var def_variable = {
            name: {
              kind: "Name",
              value: param[0],
              loc: undefined
            }
          };
          var def_type = Graphql.parseType(param[1]);
          var def = {
            variable: def_variable,
            type: def_type
          };
          return formInput(schema, def, setFormVariables, {
                      labelClassname: "underline pl-2 m-2 mt-0 mb-0 font-semibold text-sm font-mono"
                    });
        }));
  var form = inputs.length !== 0 ? React.createElement("form", {
          onSubmit: (function ($$event) {
              $$event.preventDefault();
              $$event.stopPropagation();
              return Curry._2(onExecuteRequest, request, formVariables);
            })
        }, inputs, React.createElement(Comps.Button.make, {
              type_: "submit",
              children: "Execute"
            })) : null;
  var missingAuthServices = Belt_Option.mapWithDefault(cachedResult, [], (function (results) {
          return OnegraphAuth.findMissingAuthServices(Caml_option.some(results));
        }));
  var authButtons = Belt_Array.map(missingAuthServices, (function (service) {
          return React.createElement(Comps.Button.make, {
                      onClick: (function (param) {
                          return Curry._1(onLogin, service);
                        }),
                      children: "Log into " + service,
                      key: service
                    });
        }));
  return React.createElement("div", {
              ref: domRef,
              className: "max-h-full overflow-y-scroll"
            }, variables.length !== 0 ? React.createElement(React.Fragment, undefined, React.createElement(Comps.Header.make, {
                        children: null
                      }, React.createElement(Icons.Caret.make, {
                            className: "inline mr-2",
                            color: Comps.colors["gray-6"]
                          }), "Variable Settings"), variables) : null, variables.length !== 0 ? React.createElement("div", undefined, React.createElement(Comps.Header.make, {
                        onClick: (function (param) {
                            return Curry._1(onRequestCodeInspected, request);
                          }),
                        children: null
                      }, React.createElement(Icons.Caret.make, {
                            className: "inline mr-2",
                            color: Comps.colors["gray-6"]
                          }), "Computed Variable Preview", React.createElement(Icons.Export.make, {
                            className: "inline-block ml-2"
                          })), React.createElement(Comps.Pre.make, {
                        children: Belt_Option.getWithDefault(Belt_Option.map(match$1[0], (function (r) {
                                    var tmp;
                                    tmp = r._0;
                                    return JSON.stringify(tmp, null, 2);
                                  })), "Nothing")
                      })) : null, request.dependencyRequestIds.length !== 0 ? React.createElement(React.Fragment, undefined, React.createElement(Comps.Header.make, {
                        children: null
                      }, React.createElement(Icons.Caret.make, {
                            className: "inline mr-2",
                            color: Comps.colors["gray-6"]
                          }), "Upstream Requests"), upstreamRequests) : null, React.createElement(Comps.Header.make, {
                  children: null
                }, React.createElement(Icons.Caret.make, {
                      className: "inline mr-2",
                      color: Comps.colors["gray-6"]
                    }), "GraphQL Structure"), React.createElement("div", {
                  className: "my-2 mx-4 p-2 rounded-sm text-gray-200 overflow-scroll",
                  style: {
                    backgroundColor: Comps.colors["gray-8"],
                    maxHeight: "150px"
                  }
                }, React.createElement(make, {
                      requestId: request.id,
                      schema: schema,
                      definition: definition,
                      fragmentDefinitions: GraphQLJs.Mock.gatherFragmentDefinitions({
                            operationDoc: chainFragmentsDoc
                          }),
                      onCopy: (function (param) {
                          var dataPath = param.path.join("?.");
                          var fullPath = "payload." + dataPath;
                          CopyToClipboard(fullPath);
                          
                        })
                    })), React.createElement("div", undefined, React.createElement(Comps.Header.make, {
                      onClick: (function (param) {
                          return Curry._2(onExecuteRequest, request, formVariables);
                        }),
                      children: null
                    }, React.createElement(Icons.Caret.make, {
                          className: "inline mr-2",
                          color: Comps.colors["gray-6"]
                        }), "Execute block", React.createElement(Icons.Play.make, {
                          className: "inline-block ml-2"
                        })), form, authButtons, React.createElement(Comps.Pre.make, {
                      children: Belt_Option.mapWithDefault(cachedResult, "Nothing", (function (json) {
                              return JSON.stringify(json, null, 2);
                            }))
                    })));
}

var $$Request = {
  make: Inspector$Request
};

function Inspector$ChainResultsViewer(Props) {
  var chainExecutionResults = Props.chainExecutionResults;
  var content = Belt_Option.getWithDefault(Belt_Option.map(chainExecutionResults, (function (json) {
              return JSON.stringify(json, null, 2);
            })), "");
  var compiledChainViewerEditor = React.useRef(undefined);
  React.useEffect((function () {
          Belt_Option.forEach(compiledChainViewerEditor.current, (function (editor) {
                  editor.setValue(content);
                  
                }));
          
        }), [content]);
  return React.createElement(BsReactMonaco.Editor.make, {
              height: "250px",
              className: "h-auto",
              defaultValue: content,
              language: "graphql",
              theme: "vs-dark",
              options: {
                minimap: {
                  enabled: false
                }
              },
              onMount: (function (editorHandle, _monaco) {
                  compiledChainViewerEditor.current = Caml_option.some(editorHandle);
                  var options = {
                    readOnly: true
                  };
                  editorHandle.updateOptions(options);
                  
                })
            });
}

var ChainResultsViewer = {
  make: Inspector$ChainResultsViewer
};

function Inspector$Nothing(Props) {
  var chain = Props.chain;
  var schema = Props.schema;
  var chainExecutionResults = Props.chainExecutionResults;
  var onLogin = Props.onLogin;
  var onPersistChain = Props.onPersistChain;
  var transformAndExecuteChain = Props.transformAndExecuteChain;
  var onDeleteRequest = Props.onDeleteRequest;
  var onRequestInspected = Props.onRequestInspected;
  var savedChainId = Props.savedChainId;
  var oneGraphAuth = Props.oneGraphAuth;
  var compiledOperation = Chain.compileOperationDoc(chain);
  var missingAuthServices = Belt_Option.getWithDefault(Belt_Option.map(chainExecutionResults, findMissingAuthServicesFromChainResult), []);
  var authButtons = Belt_Array.map(missingAuthServices, (function (service) {
          return React.createElement(Comps.Button.make, {
                      onClick: (function (param) {
                          return Curry._1(onLogin, service);
                        }),
                      children: "Log into " + service,
                      key: service
                    });
        }));
  var targetChain = Belt_Array.get(compiledOperation.chains, 0);
  var match = React.useState(function () {
        return {};
      });
  var setFormVariables = match[1];
  var formVariables = match[0];
  var match$1 = React.useState(function () {
        return "inspector";
      });
  var setOpenedTab = match$1[1];
  var openedTab = match$1[0];
  var form = Belt_Option.getWithDefault(Belt_Option.map(targetChain, (function (targetChain) {
              return Belt_Array.map(targetChain.exposedVariables, (function (exposedVariable) {
                            var def_variable = {
                              name: {
                                kind: "Name",
                                value: exposedVariable.exposedName,
                                loc: undefined
                              }
                            };
                            var def_type = Graphql.parseType(exposedVariable.upstreamType);
                            var def = {
                              variable: def_variable,
                              type: def_type
                            };
                            return formInput(schema, def, setFormVariables, {
                                        labelClassname: "background-blue-400"
                                      });
                          }));
            })), null);
  var isChainViable = chain.requests.length !== 0;
  var requests = Belt_Array.map(chain.requests, (function (request) {
          return React.createElement("article", {
                      key: request.id,
                      className: "mx-2"
                    }, React.createElement("div", {
                          className: "flex justify-between items-center cursor-pointer p-1 rounded-sm"
                        }, React.createElement("span", {
                              className: "font-semibold text-sm font-mono pl-2",
                              style: {
                                color: Comps.colors["green-4"]
                              },
                              onClick: (function (param) {
                                  return Curry._1(onRequestInspected, request);
                                })
                            }, request.id), React.createElement(Comps.Button.make, {
                              onClick: (function ($$event) {
                                  $$event.stopPropagation();
                                  $$event.preventDefault();
                                  var confirmation = confirm("Really delete \"" + request.operation.title + "\"?");
                                  if (confirmation) {
                                    return Curry._1(onDeleteRequest, request);
                                  }
                                  
                                }),
                              style: {
                                backgroundColor: Comps.colors["gray-7"],
                                color: Comps.colors["gray-4"]
                              },
                              children: null
                            }, React.createElement(Icons.Trash.make, {
                                  className: "inline mr-2",
                                  color: Comps.colors["gray-4"]
                                }), "Delete Request")));
        }));
  var formTab = React.createElement(React.Fragment, undefined, React.createElement(Comps.Header.make, {
            children: null
          }, React.createElement(Icons.Caret.make, {
                className: "inline mr-2",
                color: Comps.colors["gray-6"]
              }), "Chain Form"), form, authButtons, React.createElement(Comps.Button.make, {
            onClick: (function (param) {
                return Curry._1(transformAndExecuteChain, Caml_option.some(formVariables));
              }),
            children: "Run chain"
          }), Belt_Option.getWithDefault(Belt_Option.map(chainExecutionResults, (function (chainExecutionResults) {
                  return React.createElement(Inspector$ChainResultsViewer, {
                              chain: chain,
                              chainExecutionResults: Caml_option.some(chainExecutionResults)
                            });
                })), null));
  var saveTab = React.createElement(React.Fragment, undefined, React.createElement(Comps.Header.make, {
            children: null
          }, React.createElement(Icons.Caret.make, {
                className: "inline mr-2",
                color: Comps.colors["gray-6"]
              }), "Export"), React.createElement(Comps.Button.make, {
            onClick: (function (param) {
                return Curry._1(onPersistChain, undefined);
              }),
            children: "Save Chain"
          }), Belt_Option.getWithDefault(Belt_Option.map(savedChainId, (function (chainId) {
                  return React.createElement(Comps.Select.make, {
                              children: null,
                              onChange: (function ($$event) {
                                  var chain = Chain.loadFromLocalStorage(chainId);
                                  var appId = oneGraphAuth.appId;
                                  var remoteChainCalls$1 = remoteChainCalls(appId, chainId, Belt_Option.getExn(chain));
                                  var match = $$event.target.value;
                                  var value;
                                  switch (match) {
                                    case "curl" :
                                        value = remoteChainCalls$1.curl;
                                        break;
                                    case "fetch" :
                                        value = remoteChainCalls$1.fetch;
                                        break;
                                    case "form" :
                                        value = "http://localhost:3003/form?form_id=" + chainId;
                                        break;
                                    case "netlify" :
                                        value = "/** HTML form for this function\n" + remoteChainCalls$1.netlify.form + "\n**/\n\n" + remoteChainCalls$1.netlify.code + "\n";
                                        break;
                                    case "scriptkit" :
                                        value = remoteChainCalls$1.scriptKit;
                                        break;
                                    default:
                                      value = undefined;
                                  }
                                  return Belt_Option.forEach(value, (function (prim) {
                                                CopyToClipboard(prim);
                                                
                                              }));
                                }),
                              value: ""
                            }, React.createElement("option", {
                                  value: ""
                                }, "> Copy usage"), React.createElement("option", {
                                  value: "form"
                                }, "Copy link to form"), React.createElement("option", {
                                  value: "fetch"
                                }, "Copy fetch call"), React.createElement("option", {
                                  value: "curl"
                                }, "Copy cURL call"), React.createElement("option", {
                                  value: "netlify"
                                }, "Copy Netlify function usage"), React.createElement("option", {
                                  value: "scriptkit"
                                }, "Copy ScriptKit usage"));
                })), null), Belt_Option.mapWithDefault(savedChainId, null, (function (savedChainId) {
              return React.createElement(Inspector$GitHub, {
                          chain: chain,
                          savedChainId: savedChainId,
                          oneGraphAuth: oneGraphAuth
                        });
            })));
  var inspectorTab = React.createElement(React.Fragment, undefined, isChainViable ? null : React.createElement("div", {
              className: "m-2",
              style: {
                color: Comps.colors["gray-4"]
              }
            }, "Add some blocks to get started"), requests.length !== 0 ? React.createElement(React.Fragment, undefined, React.createElement(Comps.Header.make, {
                  children: null
                }, React.createElement(Icons.Caret.make, {
                      className: "inline mr-2",
                      color: Comps.colors["gray-6"]
                    }), "Chain Requests"), requests) : null);
  return React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "w-full flex ml-2 border-b border-blue-400 justify-around"
                }, React.createElement("button", {
                      className: "flex justify-center flex-grow cursor-pointer p-1 rounded-sm " + (
                        openedTab === "inspector" ? " bg-blue-400" : ""
                      ),
                      onClick: (function (param) {
                          return Curry._1(setOpenedTab, (function (param) {
                                        return "inspector";
                                      }));
                        })
                    }, React.createElement(Icons.Gears.make, {
                          className: "",
                          color: "white",
                          width: "24px",
                          height: "24px"
                        }), React.createElement("span", {
                          className: "mx-2"
                        }, "Chain")), React.createElement("button", {
                      className: "flex justify-center flex-grow cursor-pointer p-1 rounded-sm " + (
                        openedTab === "form" ? " bg-blue-400" : ""
                      ),
                      onClick: (function (param) {
                          return Curry._1(setOpenedTab, (function (param) {
                                        return "form";
                                      }));
                        })
                    }, React.createElement(Icons.Form.make, {
                          color: "white",
                          width: "24px",
                          height: "24px"
                        }), React.createElement("span", {
                          className: "mx-2"
                        }, "Form")), React.createElement("button", {
                      className: "flex justify-center flex-grow cursor-pointer p-1 rounded-sm " + (
                        openedTab === "save" ? " bg-blue-400" : ""
                      ),
                      onClick: (function (param) {
                          return Curry._1(setOpenedTab, (function (param) {
                                        return "save";
                                      }));
                        })
                    }, React.createElement(Icons.Save.make, {
                          color: "white",
                          width: "24px",
                          height: "24px"
                        }), React.createElement("span", {
                          className: "mx-2"
                        }, "Export"))), openedTab === "save" ? saveTab : (
                openedTab === "inspector" ? inspectorTab : formTab
              ));
}

var Nothing = {
  make: Inspector$Nothing
};

function Inspector(Props) {
  var inspected = Props.inspected;
  var onAddBlock = Props.onAddBlock;
  var onChainUpdated = Props.onChainUpdated;
  var onReset = Props.onReset;
  var chain = Props.chain;
  var schema = Props.schema;
  var chainExecutionResults = Props.chainExecutionResults;
  var onLogin = Props.onLogin;
  var transformAndExecuteChain = Props.transformAndExecuteChain;
  var onPersistChain = Props.onPersistChain;
  var savedChainId = Props.savedChainId;
  var onRequestCodeInspected = Props.onRequestCodeInspected;
  var onExecuteRequest = Props.onExecuteRequest;
  var requestValueCache = Props.requestValueCache;
  var onDeleteRequest = Props.onDeleteRequest;
  var onDeleteEdge = Props.onDeleteEdge;
  var onRequestInspected = Props.onRequestInspected;
  var oneGraphAuth = Props.oneGraphAuth;
  var onPotentialVariableSourceConnect = Props.onPotentialVariableSourceConnect;
  var onDragStart = Props.onDragStart;
  var tmp;
  switch (inspected.TAG | 0) {
    case /* Nothing */0 :
        tmp = "Inspector";
        break;
    case /* Block */1 :
        tmp = "Block." + inspected._0.title;
        break;
    case /* Request */2 :
        tmp = inspected.request.id;
        break;
    case /* RequestArgument */3 :
        tmp = "Request Argument";
        break;
    
  }
  var tmp$1;
  tmp$1 = inspected.TAG === /* Nothing */0 ? null : React.createElement("span", {
          className: "text-white",
          onClick: (function (param) {
              return Curry._1(onReset, undefined);
            })
        }, "X");
  var tmp$2;
  var exit = 0;
  switch (inspected.TAG | 0) {
    case /* Nothing */0 :
        tmp$2 = React.createElement(Inspector$Nothing, {
              chain: inspected._0,
              schema: schema,
              chainExecutionResults: chainExecutionResults,
              onLogin: onLogin,
              onPersistChain: onPersistChain,
              transformAndExecuteChain: transformAndExecuteChain,
              onDeleteRequest: onDeleteRequest,
              onRequestInspected: onRequestInspected,
              savedChainId: savedChainId,
              oneGraphAuth: oneGraphAuth
            });
        break;
    case /* Block */1 :
        tmp$2 = React.createElement(Inspector$Block, {
              schema: schema,
              block: inspected._0,
              onAddBlock: onAddBlock
            });
        break;
    case /* Request */2 :
    case /* RequestArgument */3 :
        exit = 1;
        break;
    
  }
  if (exit === 1) {
    var request = inspected.request;
    var cachedResult = Js_dict.get(requestValueCache, request.id);
    tmp$2 = React.createElement(Inspector$Request, {
          request: request,
          chain: chain,
          onChainUpdated: onChainUpdated,
          inspected: inspected,
          schema: schema,
          onRequestCodeInspected: onRequestCodeInspected,
          cachedResult: cachedResult,
          onExecuteRequest: onExecuteRequest,
          onLogin: onLogin,
          requestValueCache: requestValueCache,
          onDeleteEdge: onDeleteEdge,
          onPotentialVariableSourceConnect: onPotentialVariableSourceConnect,
          onDragStart: onDragStart
        });
  }
  return React.createElement("div", {
              className: "h-screen text-white border-l border-gray-800",
              style: {
                backgroundColor: "rgb(27,29,31)"
              }
            }, React.createElement("div", undefined, React.createElement("nav", {
                      className: "flex flex-row py-1 px-2 mb-2"
                    }, React.createElement("button", {
                          className: "text-left text-gray-600 hover:text-blue-500 focus:outline-none text-blue-500 flex-grow"
                        }, tmp), tmp$1)), React.createElement("div", {
                  className: "max-h-screen overflow-y-scroll"
                }, tmp$2));
}

var special_token = "XlMpa0MEz1ZMIYtebUGttQpV9I8CCwL5VejNbfStd2c";

var activeTabClasses = "text-gray-600 py-4 px-6 block hover:text-blue-500 focus:outline-none text-blue-500 border-b-2 font-medium border-blue-500";

var inactiveTabClass = "text-white py-4 px-6 block hover:text-blue-500 focus:outline-none";

var make$1 = Inspector;

export {
  special_token ,
  AdvancedMode ,
  Clipboard ,
  GraphQLPreview ,
  formInput ,
  transpileFullChainScript ,
  patchRequestArgDeps ,
  patchChainRequestsArgDeps ,
  evalRequest ,
  findMissingAuthServicesFromChainResult ,
  internallyPatchChain ,
  transformChain ,
  remoteChainCalls ,
  transformAndExecuteChain ,
  Block ,
  GitHub ,
  DirectVariable ,
  DirectJSON ,
  ArgumentDependency ,
  GraphQLProbe ,
  emptyArgumentDependency ,
  RequestArgument ,
  openedArrow ,
  closedArrow ,
  $$Request ,
  ChainResultsViewer ,
  Nothing ,
  activeTabClasses ,
  inactiveTabClass ,
  make$1 as make,
  
}
/* make Not a pure module */
