// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Icons from "../Icons.mjs";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as $$String from "rescript/lib/es6/string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Belt_SortArray from "rescript/lib/es6/belt_SortArray.js";
import * as ReactHotkeysHook from "react-hotkeys-hook";

function BlockSearch(Props) {
  var onAdd = Props.onAdd;
  var onInspect = Props.onInspect;
  var blocks = Props.blocks;
  var onCreate = Props.onCreate;
  var onClose = Props.onClose;
  var inputRef = React.useRef(null);
  ReactHotkeysHook.useHotkeys("/", (function ($$event, _handler) {
          return Belt_Option.forEach(Caml_option.nullable_to_opt(inputRef.current), (function (inputRef) {
                        $$event.preventDefault();
                        return Curry._1(inputRef.focus, undefined);
                      }));
        }), {}, undefined);
  var match = React.useState(function () {
        return {
                search: undefined,
                results: Belt_SortArray.stableSortBy(blocks, (function (a, b) {
                        return $$String.compare(a.title.toLocaleLowerCase(), b.title.toLocaleLowerCase());
                      }))
              };
      });
  var setState = match[1];
  var state = match[0];
  var searchBlocks = function (blocks, term) {
    return Belt_Array.keep(blocks, (function (block) {
                    var titleMatch = Belt_Option.isSome(Caml_option.null_to_opt(block.title.match(new RegExp(term, "ig"))));
                    var servicesMatch = Belt_Array.some(block.services, (function (service) {
                            return Belt_Option.isSome(Caml_option.null_to_opt(service.match(new RegExp(term, "ig"))));
                          }));
                    if (titleMatch) {
                      return true;
                    } else {
                      return servicesMatch;
                    }
                  })).sort(function (a, b) {
                return $$String.compare(a.title.toLocaleLowerCase(), b.title.toLocaleLowerCase());
              });
  };
  React.useEffect((function () {
          var term = state.search;
          if (term !== undefined) {
            var results = searchBlocks(blocks, term);
            Curry._1(setState, (function (oldState) {
                    return {
                            search: oldState.search,
                            results: results
                          };
                  }));
          }
          
        }), [blocks.length]);
  var match$1 = state.search;
  return React.createElement("div", {
              className: "flex w-full m-0 h-full block select-none",
              style: {
                backgroundColor: Comps.colors["gray-9"]
              }
            }, React.createElement("div", {
                  className: "w-full max-h-full"
                }, React.createElement(Comps.Header.make, {
                      style: {
                        display: "flex",
                        marginRight: "6px",
                        justifyContent: "space-between"
                      },
                      children: null
                    }, "Block Library", React.createElement("span", {
                          className: "text-white cursor-pointer",
                          onClick: (function (param) {
                              return Curry._1(onClose, undefined);
                            })
                        }, "â¨‚")), React.createElement("div", {
                      className: "rounded-lg px-3 py-2 overflow-y-hidden",
                      style: {
                        height: "calc(100% - 40px)"
                      }
                    }, React.createElement("div", {
                          className: "flex items-center  rounded-md inline-block",
                          style: {
                            backgroundColor: Comps.colors["gray-7"]
                          }
                        }, React.createElement("div", {
                              className: "pl-2"
                            }, React.createElement(Icons.Search.make, {
                                  color: Comps.colors["gray-4"]
                                })), React.createElement("input", {
                              ref: inputRef,
                              className: "w-full rounded-md text-gray-200 leading-tight focus:outline-none py-2 px-2 border-0 text-white",
                              id: "search",
                              style: {
                                backgroundColor: Comps.colors["gray-7"]
                              },
                              spellCheck: false,
                              placeholder: "Search for blocks",
                              type: "text",
                              onKeyDown: (function ($$event) {
                                  var key = $$event.key;
                                  if (key !== "Escape") {
                                    return ;
                                  }
                                  var target = $$event.target;
                                  target.value = "";
                                  Curry._1(target.blur, undefined);
                                  return Curry._1(setState, (function (_oldState) {
                                                return {
                                                        search: undefined,
                                                        results: blocks
                                                      };
                                              }));
                                }),
                              onChange: (function ($$event) {
                                  var query = $$event.target.value;
                                  var search = query === "" ? undefined : query;
                                  var results = search !== undefined ? searchBlocks(blocks, search) : blocks;
                                  return Curry._1(setState, (function (_oldState) {
                                                return {
                                                        search: search,
                                                        results: results
                                                      };
                                              }));
                                })
                            }), React.createElement("div", {
                              className: "flex items-center rounded-md inline "
                            }, React.createElement(Comps.Select.make, {
                                  children: null,
                                  onChange: (function ($$event) {
                                      var match = $$event.target.value;
                                      var kind;
                                      switch (match) {
                                        case "compute" :
                                            kind = "compute";
                                            break;
                                        case "mutation" :
                                            kind = "mutation";
                                            break;
                                        case "query" :
                                            kind = "query";
                                            break;
                                        case "subscription" :
                                            kind = "subscription";
                                            break;
                                        default:
                                          kind = undefined;
                                      }
                                      return Belt_Option.forEach(kind, Curry.__1(onCreate));
                                    }),
                                  style: {
                                    backgroundImage: "none",
                                    width: "3ch"
                                  },
                                  value: "never"
                                }, React.createElement("option", {
                                      value: "+"
                                    }, "+"), React.createElement("option", {
                                      value: "query"
                                    }, "+ New Query Block"), React.createElement("option", {
                                      value: "mutation"
                                    }, "+ New Mutation Block"), React.createElement("option", {
                                      value: "subscription"
                                    }, "+ New Subscription Block"), React.createElement("option", {
                                      value: "compute"
                                    }, "+ New Compute Block")))), React.createElement("div", {
                          className: "py-3 text-sm h-full overflow-y-scroll"
                        }, Belt_Array.map((
                                  match$1 !== undefined ? state.results : blocks
                                ).slice(0).sort(function (a, b) {
                                  return $$String.compare(a.title.toLocaleLowerCase(), b.title.toLocaleLowerCase());
                                }), (function (block) {
                                var match = block.kind;
                                var color;
                                switch (match) {
                                  case /* Query */0 :
                                      color = "1BBE83";
                                      break;
                                  case /* Mutation */1 :
                                      color = "B20D5D";
                                      break;
                                  case /* Subscription */2 :
                                  case /* Fragment */3 :
                                      color = "F2C94C";
                                      break;
                                  case /* Compute */4 :
                                      color = Comps.colors["gray-10"];
                                      break;
                                  
                                }
                                return React.createElement("div", {
                                            key: block.title,
                                            className: "block-search-item flex justify-start cursor-grab text-gray-700 items-center hover:text-blue-400 rounded-md px-2 my-2",
                                            draggable: true,
                                            onClick: (function (param) {
                                                return Curry._1(onInspect, block);
                                              }),
                                            onDoubleClick: (function (param) {
                                                Curry._1(onAdd, block);
                                                return Belt_Option.forEach(Caml_option.nullable_to_opt(inputRef.current), (function (dom) {
                                                              dom.value = "";
                                                              return Curry._1(setState, (function (oldState) {
                                                                            return {
                                                                                    search: undefined,
                                                                                    results: oldState.results
                                                                                  };
                                                                          }));
                                                            }));
                                              }),
                                            onDragStart: (function ($$event) {
                                                var dataTransfer = $$event.dataTransfer;
                                                dataTransfer.effectAllowed = "copyLink";
                                                return Curry._2(dataTransfer.setData, "text", block.id.toString());
                                              })
                                          }, React.createElement("div", {
                                                style: {
                                                  background: "radial-gradient(ellipse at center, #" + color + " 0%, #" + color + " 30%, transparent 30%)",
                                                  backgroundRepeat: "repeat-x",
                                                  height: "10px",
                                                  width: "10px"
                                                }
                                              }), React.createElement("div", {
                                                className: "flex-grow font-medium px-2 py-2 truncate",
                                                style: {
                                                  color: "#F2F2F2"
                                                }
                                              }, block.title), React.createElement("div", {
                                                className: "px-2 rounded-r-md py-2",
                                                style: {
                                                  minWidth: "40px"
                                                }
                                              }, Belt_Array.keepMap(block.services, (function (service) {
                                                      return Belt_Option.map(Utils.serviceImageUrl(undefined, undefined, service), (function (param) {
                                                                    var friendlyServiceName = param[1];
                                                                    return React.createElement("img", {
                                                                                key: friendlyServiceName,
                                                                                className: "rounded-full",
                                                                                style: {
                                                                                  border: "2px",
                                                                                  borderColor: Comps.colors["gray-6"],
                                                                                  borderStyle: "solid",
                                                                                  opacity: "0.80",
                                                                                  pointerEvents: "none"
                                                                                },
                                                                                title: friendlyServiceName,
                                                                                alt: friendlyServiceName,
                                                                                src: param[0],
                                                                                width: "24px"
                                                                              });
                                                                  }));
                                                    }))));
                              }))))));
}

var make = BlockSearch;

export {
  make ,
  
}
/* Comps Not a pure module */
