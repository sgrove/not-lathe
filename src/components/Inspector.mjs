// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Compiler from "../lib/Compiler.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as OneGraphRe from "../OneGraphRe.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ReactSpring from "react-spring";
import * as ChainInspector from "./ChainInspector.mjs";
import * as ActionInspector from "./ActionInspector.mjs";
import * as GraphQLFormJs from "../GraphQLForm.js";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RequestValueCache from "../RequestValueCache.mjs";
import * as Hooks from "react-relay/hooks";
import * as ReactHotkeysHook from "react-hotkeys-hook";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as Inspector_oneGraphAppPackageChain_graphql from "../__generated__/Inspector_oneGraphAppPackageChain_graphql.mjs";
import * as Inspector_SubInspector_packageChain_graphql from "../__generated__/Inspector_SubInspector_packageChain_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(Inspector_oneGraphAppPackageChain_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(Inspector_oneGraphAppPackageChain_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(Inspector_oneGraphAppPackageChain_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return Inspector_oneGraphAppPackageChain_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var OneGraphAppPackageChainFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function formInput(prim0, prim1, prim2, prim3) {
  return GraphQLFormJs.formInput(prim0, prim1, prim2, prim3);
}

function forceablySetInputValue(node, value) {
  var helper = (function(node, value) {
  // only process the change on elements we know have a value setter in their constructor
const inputTypes =  [
    window.HTMLInputElement,
    window.HTMLSelectElement,
    window.HTMLTextAreaElement,
]

  if ( inputTypes.indexOf(node.__proto__.constructor) >-1 ) {

        const setValue = Object.getOwnPropertyDescriptor(node.__proto__, 'value').set;
        const event = new Event('input', { bubbles: true });

        setValue.call(node, value);
        node.dispatchEvent(event);

    }});
  return helper(node, value);
}

function transformAndExecuteChain(chain, schema, oneGraphAuth, variables) {
  var webhookUrl = Compiler.Exports.webhookUrlForAppId(oneGraphAuth.appId);
  var compiled = Curry._1(Compiler.transformChain(chain)(schema), webhookUrl);
  var targetChain = compiled.chains[0];
  return OneGraphRe.fetchOneGraph(oneGraphAuth, compiled.operationDoc, targetChain.operationName, variables);
}

function use$1(fRef) {
  var data = Hooks.useFragment(Inspector_SubInspector_packageChain_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(Inspector_SubInspector_packageChain_graphql.Internal.convertFragment, data);
}

function useOpt$1(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(Inspector_SubInspector_packageChain_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return Inspector_SubInspector_packageChain_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var SubInspectorFragment = {
  Types: undefined,
  use: use$1,
  useOpt: useOpt$1
};

function Inspector$SubInspector(Props) {
  var inspected = Props.inspected;
  var onReset = Props.onReset;
  var schema = Props.schema;
  var onInspectAction = Props.onInspectAction;
  var onInspectActionCode = Props.onInspectActionCode;
  var requestValueCache = Props.requestValueCache;
  var onDeleteEdge = Props.onDeleteEdge;
  var fragmentRefs = Props.subInspectorRef;
  var subInspectorRef = use$1(fragmentRefs);
  ReactHotkeysHook.useHotkeys("esc", (function ($$event, _handler) {
          $$event.preventDefault();
          $$event.stopPropagation();
          return Curry._1(onReset, undefined);
        }), {}, undefined);
  var tmp;
  if (typeof inspected === "number") {
    tmp = "";
  } else if (inspected.TAG === /* Action */0) {
    var actionId = inspected._0;
    var action = Belt_Array.getBy(subInspectorRef.actions, (function (action) {
            return action.id === actionId;
          }));
    tmp = action !== undefined ? "Action: " + action.name : "Action";
  } else {
    tmp = "Request Argument";
  }
  var tmp$1;
  var exit = 0;
  var actionId$1;
  if (typeof inspected === "number") {
    tmp$1 = null;
  } else if (inspected.TAG === /* Action */0) {
    actionId$1 = inspected._0;
    exit = 1;
  } else {
    actionId$1 = inspected.actionId;
    exit = 1;
  }
  if (exit === 1) {
    RequestValueCache.get(requestValueCache, actionId$1);
    var action$1 = Belt_Array.getBy(subInspectorRef.actions, (function (action) {
            return action.id === actionId$1;
          }));
    var actionNameIdPairs = Belt_Array.map(subInspectorRef.actions, (function (action) {
            return [
                    action.id,
                    action.name
                  ];
          }));
    tmp$1 = Belt_Option.mapWithDefault(action$1, null, (function (action) {
            return React.createElement(ActionInspector.make, {
                        actionRef: action.fragmentRefs,
                        schema: schema,
                        actionNameIdPairs: actionNameIdPairs,
                        onDeleteEdge: onDeleteEdge,
                        onInspectAction: onInspectAction,
                        onInspectActionCode: onInspectActionCode
                      });
          }));
  }
  return React.createElement("div", {
              className: "w-full text-white border-l border-gray-800",
              style: {
                backgroundColor: "rgb(27,29,31)",
                height: "calc(100vh - 56px)",
                boxShadow: "-5px 0 5px rgba(150, 150, 150, 0.25)"
              }
            }, React.createElement("nav", {
                  className: "flex flex-row py-1 px-2 mb-2 justify-between"
                }, React.createElement(Comps.Header.make, {
                      children: tmp
                    }), React.createElement("span", {
                      className: "text-white cursor-pointer",
                      onClick: (function (param) {
                          return Curry._1(onReset, undefined);
                        })
                    }, "â¨‚")), React.createElement("div", {
                  className: "overflow-y-scroll",
                  style: {
                    height: "calc(100vh - 56px - 56px)"
                  }
                }, tmp$1));
}

var SubInspector = {
  make: Inspector$SubInspector
};

var springSteps = {
  from: {
    left: "0px",
    position: "absolute",
    top: "0px",
    width: "100%",
    opacity: "1",
    transform: "translateX(100%)"
  },
  enter: {
    left: "0px",
    position: "absolute",
    top: "0px",
    opacity: "1",
    transform: "translateX(0%)"
  },
  leave: {
    left: "0px",
    position: "absolute",
    top: "0px",
    opacity: "1",
    transform: "translateY(100%)"
  }
};

function Inspector(Props) {
  var inspected = Props.inspected;
  var onReset = Props.onReset;
  var schema = Props.schema;
  var chainExecutionResults = Props.chainExecutionResults;
  var onLogin = Props.onLogin;
  var onInspectActionCode = Props.onInspectActionCode;
  var requestValueCache = Props.requestValueCache;
  var onDeleteEdge = Props.onDeleteEdge;
  var onInspectAction = Props.onInspectAction;
  var oneGraphAuth = Props.oneGraphAuth;
  var onClose = Props.onClose;
  var onPotentialVariableSourceConnect = Props.onPotentialVariableSourceConnect;
  var fragmentRefs = Props.fragmentRefs;
  var chainRef = use(fragmentRefs);
  var subInspectorRef = React.useRef(undefined);
  var transitions = ReactSpring.useTransition(typeof inspected === "number" ? false : true, undefined, {
        from: springSteps.from,
        enter: springSteps.enter,
        leave: springSteps.leave,
        unique: true,
        ref: subInspectorRef,
        config: ReactSpring.config.stiff
      });
  ReactSpring.useChain([subInspectorRef]);
  ReactHotkeysHook.useHotkeys("command+s", (function ($$event, _handler) {
          $$event.preventDefault();
          $$event.stopPropagation();
          
        }), {}, undefined);
  return React.createElement("div", {
              className: " text-white border-l border-gray-800",
              style: {
                backgroundColor: "rgb(27,29,31)",
                height: "calc(100vh - 56px)",
                position: "relative"
              }
            }, React.createElement("nav", {
                  className: "flex flex-row py-1 px-2 mb-2 justify-between"
                }, React.createElement(Comps.Header.make, {
                      children: "Chain Inspector"
                    })), React.createElement("div", {
                  className: "overflow-y-scroll",
                  style: {
                    height: "calc(100vh - 56px - 56px)"
                  }
                }, React.createElement(ChainInspector.make, {
                      chainExecutionResults: chainExecutionResults,
                      onPotentialVariableSourceConnect: onPotentialVariableSourceConnect,
                      onLogin: onLogin,
                      onInspectAction: onInspectAction,
                      oneGraphAuth: oneGraphAuth,
                      onClose: onClose,
                      nothingRef: chainRef.fragmentRefs
                    })), Belt_Array.map(transitions, (function (element) {
                    var props = element.props;
                    var item = element.item;
                    if (item) {
                      return React.createElement(ReactSpring.animated.div, {
                                  style: props,
                                  key: Caml_option.undefined_to_opt(element.key),
                                  children: React.createElement(Inspector$SubInspector, {
                                        inspected: inspected,
                                        onReset: onReset,
                                        schema: schema,
                                        onInspectAction: onInspectAction,
                                        onInspectActionCode: onInspectActionCode,
                                        requestValueCache: requestValueCache,
                                        onDeleteEdge: onDeleteEdge,
                                        subInspectorRef: chainRef.fragmentRefs
                                      })
                                });
                    } else {
                      return null;
                    }
                  })));
}

var make = Inspector;

export {
  OneGraphAppPackageChainFragment ,
  formInput ,
  forceablySetInputValue ,
  transformAndExecuteChain ,
  SubInspectorFragment ,
  SubInspector ,
  springSteps ,
  make ,
  
}
/* Comps Not a pure module */
