// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Yjs from "../bindings/Yjs.js";
import * as Yjs$1 from "yjs";
import * as Debug from "../Debug.js";
import * as YWebrtc from "y-webrtc";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.mjs";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as AudioVisualizer from "./AudioVisualizer.js";
import * as Belt_HashMapString from "bs-platform/lib/es6/belt_HashMapString.mjs";

var globalState = Belt_HashMapString.make(10);

var encodeUint8Array = (function encodeUint8Array(u8) {
  return btoa(String.fromCharCode.apply(null, u8));
});

var decodeUint8Array = (function decodeUint8Array(str) {
  return new Uint8Array(atob(str).split('').map(function (c) { return c.charCodeAt(0); }));
});

function idempotentCreate(name, yjsScript, audioStreamPromise) {
  var room = Belt_HashMapString.get(globalState, name);
  if (room !== undefined) {
    return room;
  }
  var ydocument = new Yjs$1.Doc();
  Belt_Option.forEach(yjsScript, (function (base64History) {
          var update = decodeUint8Array(base64History);
          Yjs$1.applyUpdate(ydocument, update);
          
        }));
  var yprovider = new YWebrtc.WebrtcProvider(name, ydocument, {
        maxConns: 20
      });
  yprovider.on("synced", (function (update, origin, other) {
          console.log("Provider synced: ", update, origin, other);
          
        }));
  yprovider.on("peers", (function ($$event) {
          console.log("Provider onPeers: ", $$event);
          return Belt_Array.forEach($$event.added, (function (peerId) {
                        var connection = Yjs.WebRTC.getConnection(yprovider, peerId);
                        var peer = Belt_Option.map(connection, (function (connection) {
                                return connection.peer;
                              }));
                        Belt_Option.forEach(peer, (function (peer) {
                                audioStreamPromise.then(function (audioStream) {
                                      console.log("Adding audioStream to peer: ", peer, audioStream);
                                      return Promise.resolve((peer.addStream(audioStream), undefined));
                                    });
                                peer.on("stream", (function (stream) {
                                        console.log("Got a stream: ", stream);
                                        Debug.assignToWindowForDeveloperDebug("incomingStream", {
                                              stream: stream,
                                              peer: peer
                                            });
                                        var audioEl = (document.querySelector("#test-audio-tag"));
                                        AudioVisualizer.monitorAudio(audioEl, (function ($$event) {
                                                var ints = $$event.inputBuffer.getChannelData(0);
                                                var max = Belt_Array.reduce(ints, 0, (function (acc, next) {
                                                        if (acc < next) {
                                                          return next;
                                                        } else {
                                                          return acc;
                                                        }
                                                      }));
                                                console.log("Volume for stream: ", max);
                                                
                                              }));
                                        ((function(audioEl) { audioEl.srcObject = stream; })(audioEl));
                                        return (function(audioEl) { audioEl.play(); })(audioEl);
                                      }));
                                
                              }));
                        console.log("\tConnection peer: ", connection, peer);
                        
                      }));
        }));
  yprovider.on("signal", (function (update, origin, other) {
          console.log("Provider signal: ", update, origin, other);
          
        }));
  yprovider.on("stream", (function (update, origin, other) {
          console.log("Provider stream: ", update, origin, other);
          
        }));
  var sharedRoom = {
    document: ydocument,
    provider: yprovider
  };
  Belt_HashMapString.set(globalState, name, sharedRoom);
  return sharedRoom;
}

export {
  globalState ,
  encodeUint8Array ,
  decodeUint8Array ,
  idempotentCreate ,
  
}
/* globalState Not a pure module */
