// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Chain from "../Chain.mjs";
import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Debug from "../Debug.mjs";
import * as Icons from "../Icons.mjs";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Prettier from "prettier";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as OneGraphRe from "../OneGraphRe.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChainEditor from "./ChainEditor.mjs";
import * as OneGraphAuth from "../bindings/OneGraphAuth.mjs";
import * as Belt_SortArray from "rescript/lib/es6/belt_SortArray.js";
import ReactJsonView from "react-json-view";
import * as Standalone from "@babel/standalone";
import * as DevTime_JsonJs from "../DevTime_Json.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as ReactHotkeysHook from "react-hotkeys-hook";
import ParserBabel from "prettier/parser-babel";

var traces = DevTime_JsonJs.traces;

var devJsonChain = DevTime_JsonJs.devJsonChain;

var simpleChain = DevTime_JsonJs.simpleChain;

var spotifyChain = DevTime_JsonJs.spotifyChain;

var descuriChain = DevTime_JsonJs.descuriChain;

var DevTimeJson = {
  traces: traces,
  devJsonChain: devJsonChain,
  simpleChain: simpleChain,
  spotifyChain: spotifyChain,
  descuriChain: descuriChain
};

function dependencies(param) {
  return {
          "fetch-ponyfill": "^7.1.0"
        };
}

function packageVersion($$package) {
  var match = $$package.version;
  return String(match[0]) + "." + String(match[1]) + "." + String(match[2]);
}

function packageDotJson($$package) {
  var version = packageVersion($$package);
  return {
          name: $$package.name,
          description: Belt_Option.getWithDefault($$package.description, "A package generated by OneGraph Studio"),
          version: version,
          dependencies: {
            "fetch-ponyfill": "^7.1.0"
          }
        };
}

function packageFiles(schema, config, chains) {
  var match = Belt_Array.reduce(Belt_Array.map(chains, (function (param) {
              var chain = param[1];
              var typeDef = Chain.typeScriptDefinition(schema, chain);
              var js = Chain.TypeScript.fetchSource(schema, config.oneGraphAppId, param[0], typeDef, chain);
              return {
                      source: js,
                      types: typeDef.fullExport
                    };
            })), [
        "",
        ""
      ], (function (param, param$1) {
          return [
                  param[0] + "\n\n" + param$1.source,
                  param[1] + "\n\n" + param$1.types
                ];
        }));
  var indexDTs = match[1];
  var indexJs = "import fetchPonyfill from 'fetch-ponyfill';\nconst {fetch} = fetchPonyfill({});\n\n" + match[0];
  var prettify = function (script) {
    return Prettier.format(script, {
                parser: "babel",
                plugins: [ParserBabel],
                singleQuote: true
              });
  };
  Debug.assignToWindowForDeveloperDebug("prettify", prettify);
  var indexJs$1;
  try {
    indexJs$1 = prettify(indexJs);
  }
  catch (raw_err){
    var err = Caml_js_exceptions.internalToOCamlException(raw_err);
    console.error("Error prettifying index.js: ", err);
    indexJs$1 = indexJs;
  }
  var indexDTs$1;
  try {
    indexDTs$1 = prettify(indexDTs);
  }
  catch (raw_err$1){
    var err$1 = Caml_js_exceptions.internalToOCamlException(raw_err$1);
    console.error("Error prettifying index.d.ts: ", err$1);
    indexDTs$1 = indexDTs;
  }
  return [
          {
            path: "index.js",
            contents: indexJs$1
          },
          {
            path: "index.d.ts",
            contents: indexDTs$1
          }
        ];
}

function makePackage(schema, config, $$package, chains) {
  var json = packageDotJson($$package);
  var files = packageFiles(schema, config, chains);
  return {
          packageDotJson: json,
          files: files
        };
}

var Publish = {
  dependencies: dependencies,
  packageVersion: packageVersion,
  packageDotJson: packageDotJson,
  packageFiles: packageFiles,
  makePackage: makePackage
};

function stringVersion(info) {
  var match = info.version;
  return String(match[0]) + "." + String(match[1]) + "." + String(match[2]);
}

function completed(param) {
  return React.createElement("span", {
              className: "bg-green-200 text-green-600 py-1 px-3 rounded-full text-xs"
            }, "Completed");
}

function errored(param) {
  return React.createElement("span", {
              className: "bg-red-800 text-red-100 py-1 px-3 rounded-full text-xs"
            }, "Errors");
}

function active(param) {
  return React.createElement("span", {
              className: "text-purple-600 py-1 px-3 rounded-full text-xs",
              style: {
                backgroundColor: Comps.colors["green-4"],
                color: Comps.colors["gray-6"]
              }
            }, "Active");
}

function slow(param) {
  return React.createElement("span", {
              className: "bg-yellow-200 text-yellow-600 py-1 px-3 rounded-full text-xs"
            }, "Slow");
}

function pending(param) {
  return React.createElement("span", {
              className: "bg-red-200 text-red-600 py-1 px-3 rounded-full text-xs"
            }, "Pending");
}

function noErrors(param) {
  return React.createElement("span", {
              className: "text-sm font-semibold px-4 py-1 text-gray-800 rounded-full bg-green-300"
            }, "No errors");
}

function diffPackage(schema, a, b) {
  var aFns = Belt_Array.map(a.chains, (function (chain) {
          return Chain.typeScriptDefinition(schema, chain);
        }));
  var bFns = Belt_Array.map(b.chains, (function (chain) {
          return Chain.typeScriptDefinition(schema, chain);
        }));
  var addedFunctions = Belt_Array.keep(bFns, (function (bFn) {
          return !Belt_Array.some(aFns, (function (aFn) {
                        return bFn.functionName === aFn.functionName;
                      }));
        }));
  var removedFunctions = Belt_Array.keep(aFns, (function (aFn) {
          return !Belt_Array.some(bFns, (function (bFn) {
                        return bFn.functionName === aFn.functionName;
                      }));
        }));
  var changedFunctions = Belt_Array.keep(bFns, (function (bFn) {
          var previousFunction = Belt_Array.getBy(aFns, (function (aFn) {
                  return bFn.functionName === aFn.functionName;
                }));
          return Belt_Option.mapWithDefault(previousFunction, false, (function (aFn) {
                        if (aFn.inputType !== bFn.inputType) {
                          return aFn.returnType !== bFn.returnType;
                        } else {
                          return false;
                        }
                      }));
        }));
  if (addedFunctions.length === 0 && removedFunctions.length === 0 && changedFunctions.length === 0) {
    return ;
  }
  return {
          addedFunctions: addedFunctions,
          removedFunctions: removedFunctions,
          changedFunctions: changedFunctions
        };
}

function versionBumpForDiff(diff) {
  var match = diff.removedFunctions;
  var match$1 = diff.addedFunctions;
  var match$2 = diff.changedFunctions;
  if (match.length !== 0) {
    return [
            1,
            0,
            0
          ];
  } else if (match$1.length !== 0) {
    return [
            0,
            1,
            0
          ];
  } else if (match$2.length !== 0) {
    return [
            0,
            0,
            1
          ];
  } else {
    return [
            0,
            0,
            0
          ];
  }
}

function computeNewVersion($$package, diff) {
  var match = $$package.version;
  var minor = match[1];
  var major = match[0];
  var match$1 = versionBumpForDiff(diff);
  var majorDelta = match$1[0];
  var newVersion;
  var exit = 0;
  if (majorDelta !== 0) {
    exit = 1;
  } else {
    var minorDelta = match$1[1];
    if (minorDelta !== 0) {
      if (match$1[2] !== 0) {
        exit = 1;
      } else {
        newVersion = [
          major,
          minor + minorDelta | 0,
          0
        ];
      }
    } else {
      newVersion = [
        major,
        minor,
        match[2] + match$1[2] | 0
      ];
    }
  }
  if (exit === 1) {
    newVersion = match$1[1] !== 0 || match$1[2] !== 0 ? $$package.version : [
        major + majorDelta | 0,
        0,
        0
      ];
  }
  return {
          name: $$package.name,
          description: $$package.description,
          version: newVersion,
          chains: $$package.chains
        };
}

function Package$PackageEditor(Props) {
  var schema = Props.schema;
  var initialPackage = Props.initialPackage;
  var $$package = Props.package;
  var authTokens = Props.authTokens;
  var onCreateChain = Props.onCreateChain;
  var onInspectChain = Props.onInspectChain;
  var onEditChain = Props.onEditChain;
  var onDeleteChain = Props.onDeleteChain;
  var onEditPackage = Props.onEditPackage;
  var onPublishPackageToNpm = Props.onPublishPackageToNpm;
  var onPublishPackageToGitHub = Props.onPublishPackageToGitHub;
  var match = React.useState(function () {
        return {
                view: /* Nothing */0
              };
      });
  var setState = match[1];
  var chains = $$package.chains;
  var diff = diffPackage(schema, initialPackage, $$package);
  var diff$1 = match[0].view;
  return React.createElement("div", {
              className: "w-full m-2 h-full bg-white flex items-center justify-center font-sans overflow-hidden",
              style: {
                backgroundColor: Comps.colors["gray-8"]
              }
            }, React.createElement("div", {
                  className: "w-full h-full "
                }, React.createElement("div", {
                      className: "flex justify-between"
                    }, React.createElement("h1", {
                          className: "m-5 flex-1 font-bold",
                          style: {
                            color: Comps.colors["gray-6"]
                          }
                        }, $$package.name, React.createElement("span", {
                              className: "mx-2"
                            }, React.createElement("code", undefined, stringVersion($$package)))), React.createElement("div", {
                          className: "m-2"
                        }, React.createElement(Comps.Button.make, {
                              onClick: (function (param) {
                                  return Curry._1(setState, (function (oldState) {
                                                return {
                                                        view: /* Settings */1
                                                      };
                                              }));
                                }),
                              children: null
                            }, React.createElement(Icons.Gears.make, {
                                  className: "inline-block ",
                                  color: Comps.colors["gray-4"]
                                }), " Package Settings")), React.createElement("div", {
                          className: "m-2"
                        }, React.createElement(Comps.Button.make, {
                              onClick: (function (param) {
                                  return Belt_Option.forEach(diff, (function (diff) {
                                                return Curry._1(setState, (function (oldState) {
                                                              return {
                                                                      view: {
                                                                        _0: diff,
                                                                        [Symbol.for("name")]: "Publish"
                                                                      }
                                                                    };
                                                            }));
                                              }));
                                }),
                              children: null,
                              disabled: Belt_Option.isNone(diff)
                            }, React.createElement(Icons.Gears.make, {
                                  className: "inline-block ",
                                  color: Comps.colors["gray-4"]
                                }), " View Diff")), React.createElement("div", {
                          className: "m-2"
                        }, React.createElement(Comps.Button.make, {
                              onClick: (function (param) {
                                  var apiToken = prompt("Enter npm api token to publish:", undefined);
                                  if (!(apiToken == null)) {
                                    return Curry._1(onPublishPackageToNpm, {
                                                apiToken: apiToken
                                              });
                                  }
                                  
                                }),
                              children: null
                            }, React.createElement(Icons.Login.make, {
                                  className: "inline-block ",
                                  color: Comps.colors["gray-4"]
                                }), " Publish changes to npm")), React.createElement("div", {
                          className: "m-2"
                        }, React.createElement(Comps.Button.make, {
                              onClick: (function (param) {
                                  var apiToken = prompt("Enter GitHub OAuth token (with repo and write:packages scopes) to publish:", undefined);
                                  if (!(apiToken == null)) {
                                    return Curry._1(onPublishPackageToGitHub, apiToken);
                                  }
                                  
                                }),
                              children: null
                            }, React.createElement(Icons.Login.make, {
                                  className: "inline-block ",
                                  color: Comps.colors["gray-4"]
                                }), " Publish changes to GitHub registry")), React.createElement("div", {
                          className: "m-2"
                        }, React.createElement(Comps.Button.make, {
                              onClick: (function (param) {
                                  var other = Belt_Option.mapWithDefault(Caml_option.nullable_to_opt(prompt("New chain name", "newChain")), "", (function (name) {
                                          return name.trim();
                                        }));
                                  if (other === "") {
                                    return ;
                                  } else {
                                    return Curry._1(onCreateChain, Chain.makeEmptyChain(other));
                                  }
                                }),
                              children: null
                            }, React.createElement(Icons.Plus.make, {
                                  className: "inline-block ",
                                  color: Comps.colors["gray-4"]
                                }), " New Chain"))), React.createElement("div", {
                      className: "w-full h-full shadow-md rounded my-6"
                    }, React.createElement("table", {
                          className: "min-w-max h-full w-full table-auto"
                        }, React.createElement("thead", undefined, React.createElement("tr", {
                                  className: "text-gray-600 text-sm leading-normal",
                                  style: {
                                    color: Comps.colors["gray-3"]
                                  }
                                }, React.createElement("th", {
                                      className: "py-3 px-6 text-left"
                                    }, "Chain Name"), React.createElement("th", {
                                      className: "py-3 px-6 text-left"
                                    }, "Auth Token"), React.createElement("th", {
                                      className: "py-3 px-6 text-center"
                                    }, "Data Retention"), React.createElement("th", {
                                      className: "py-3 px-6 text-center"
                                    }, "Team Access"), React.createElement("th", {
                                      className: "py-3 px-6 text-center"
                                    }, "Status"), React.createElement("th", {
                                      className: "py-3 px-6 text-center"
                                    }, "Actions"))), React.createElement("tbody", {
                              className: "text-gray-600 text-sm font-light"
                            }, Belt_Array.mapWithIndex(chains, (function (index, chain) {
                                    var even = index % 2 === 0;
                                    var style = {
                                      backgroundColor: Comps.colors["gray-15"],
                                      color: Comps.colors["gray-6"],
                                      marginTop: "5px"
                                    };
                                    var className = even ? " text-gray-50 hover:bg-gray-400" : " text-gray-50 hover:bg-gray-700";
                                    var saveChain = function (newChain) {
                                      var newPackage_name = $$package.name;
                                      var newPackage_description = $$package.description;
                                      var newPackage_version = $$package.version;
                                      var newPackage_chains = Belt_Array.map($$package.chains, (function (chain) {
                                              if (Caml_obj.caml_equal(chain.id, newChain.id)) {
                                                return newChain;
                                              } else {
                                                return chain;
                                              }
                                            }));
                                      var newPackage = {
                                        name: newPackage_name,
                                        description: newPackage_description,
                                        version: newPackage_version,
                                        chains: newPackage_chains
                                      };
                                      console.log("onEditPackage: ", newPackage);
                                      return Curry._1(onEditPackage, newPackage);
                                    };
                                    var images = Belt_Array.keepMap(Belt_Array.mapWithIndex(Chain.gatherAllReferencedServices(schema, chain), (function (idx, service) {
                                                return Belt_Option.map(Utils.serviceImageUrl(undefined, undefined, service), (function (param) {
                                                              var friendlyServiceName = param[1];
                                                              return React.createElement("img", {
                                                                          key: friendlyServiceName,
                                                                          className: " rounded-full border-gray-200 border-2 transform hover:scale-125 " + (
                                                                            idx > 0 ? "-m-1" : ""
                                                                          ),
                                                                          title: friendlyServiceName,
                                                                          alt: friendlyServiceName,
                                                                          src: param[0],
                                                                          width: "24px"
                                                                        });
                                                            }));
                                              })), (function (el) {
                                            return el;
                                          }));
                                    var match = chain.traceRetentionPolicy.captureTarget;
                                    var tmp;
                                    switch (match) {
                                      case /* ALL */0 :
                                          tmp = "ALL";
                                          break;
                                      case /* ERRORS */1 :
                                          tmp = "ERRORS";
                                          break;
                                      case /* NEVER */2 :
                                          tmp = "NEVER";
                                          break;
                                      
                                    }
                                    var match$1 = chain.traceRetentionPolicy.captureTarget;
                                    return React.createElement("tr", {
                                                key: Belt_Option.mapWithDefault(chain.id, "no-id", (function (prim) {
                                                        return prim.toString();
                                                      })),
                                                className: "rounded-md border-4 border-gray-900 " + className,
                                                style: style
                                              }, React.createElement("td", {
                                                    className: "py-3 px-6 text-left whitespace-nowrap"
                                                  }, React.createElement("div", {
                                                        className: "flex items-center"
                                                      }, React.createElement("span", {
                                                            className: "font-medium cursor-pointer mr-2",
                                                            onClick: (function (param) {
                                                                return Curry._2(onEditChain, chain, undefined);
                                                              })
                                                          }, chain.name), React.createElement("div", {
                                                            className: "flex items-center"
                                                          }, React.createElement("div", {
                                                                className: "flex items-center justify-center"
                                                              }, images.length !== 0 ? images : " ")))), React.createElement("td", {
                                                    className: "py-3 px-6 "
                                                  }, React.createElement(Comps.Select.make, {
                                                        children: null,
                                                        className: "inline-block comp-select",
                                                        onChange: (function ($$event) {
                                                            var value = $$event.target.value;
                                                            var accessToken = value === "" ? undefined : value;
                                                            return saveChain({
                                                                        name: chain.name,
                                                                        description: chain.description,
                                                                        id: chain.id,
                                                                        script: chain.script,
                                                                        scriptDependencies: chain.scriptDependencies,
                                                                        requests: chain.requests,
                                                                        blocks: chain.blocks,
                                                                        accessToken: accessToken,
                                                                        traceRetentionPolicy: chain.traceRetentionPolicy,
                                                                        yjsScript: chain.yjsScript
                                                                      });
                                                          }),
                                                        value: Belt_Option.getWithDefault(chain.accessToken, "")
                                                      }, React.createElement("option", {
                                                            value: ""
                                                          }, "None"), Belt_Array.map(authTokens, (function (authToken) {
                                                              var lead4 = authToken.accessToken.substring(0, 4);
                                                              return React.createElement("option", {
                                                                          key: authToken.accessToken,
                                                                          value: authToken.accessToken
                                                                        }, authToken.name + " (" + lead4 + "****....)");
                                                            })))), React.createElement("td", undefined, React.createElement(Comps.Select.make, {
                                                        children: null,
                                                        className: "inline-block comp-select",
                                                        onChange: (function ($$event) {
                                                            var value = $$event.target.value;
                                                            var policy;
                                                            switch (value) {
                                                              case "ALL" :
                                                                  policy = /* ALL */0;
                                                                  break;
                                                              case "ERRORS" :
                                                                  policy = /* ERRORS */1;
                                                                  break;
                                                              case "NEVER" :
                                                                  policy = /* NEVER */2;
                                                                  break;
                                                              default:
                                                                policy = undefined;
                                                            }
                                                            return Belt_Option.forEach(policy, (function (policy) {
                                                                          var init = chain.traceRetentionPolicy;
                                                                          return saveChain({
                                                                                      name: chain.name,
                                                                                      description: chain.description,
                                                                                      id: chain.id,
                                                                                      script: chain.script,
                                                                                      scriptDependencies: chain.scriptDependencies,
                                                                                      requests: chain.requests,
                                                                                      blocks: chain.blocks,
                                                                                      accessToken: chain.accessToken,
                                                                                      traceRetentionPolicy: {
                                                                                        captureTarget: policy,
                                                                                        retentionDays: init.retentionDays
                                                                                      },
                                                                                      yjsScript: chain.yjsScript
                                                                                    });
                                                                        }));
                                                          }),
                                                        value: tmp
                                                      }, React.createElement("option", {
                                                            value: "ALL"
                                                          }, "Keep trace for every invocation"), React.createElement("option", {
                                                            value: "ERRORS"
                                                          }, "Only keep trace for invocations with errors"), React.createElement("option", {
                                                            value: "NEVER"
                                                          }, "Never retain any trace data")), React.createElement("br", undefined), match$1 >= 2 ? null : React.createElement(React.Fragment, undefined, " for ", React.createElement("input", {
                                                              className: "bg-transparent border-none px-2 leading-tight outline-none text-white inline",
                                                              style: {
                                                                width: "10ch"
                                                              },
                                                              disabled: chain.traceRetentionPolicy.captureTarget === /* NEVER */2,
                                                              placeholder: "days",
                                                              type: "number",
                                                              value: String(chain.traceRetentionPolicy.retentionDays),
                                                              onChange: (function ($$event) {
                                                                  var value = $$event.target.value;
                                                                  try {
                                                                    var number = Caml_format.caml_int_of_string(value);
                                                                    var init = chain.traceRetentionPolicy;
                                                                    return saveChain({
                                                                                name: chain.name,
                                                                                description: chain.description,
                                                                                id: chain.id,
                                                                                script: chain.script,
                                                                                scriptDependencies: chain.scriptDependencies,
                                                                                requests: chain.requests,
                                                                                blocks: chain.blocks,
                                                                                accessToken: chain.accessToken,
                                                                                traceRetentionPolicy: {
                                                                                  captureTarget: init.captureTarget,
                                                                                  retentionDays: number
                                                                                },
                                                                                yjsScript: chain.yjsScript
                                                                              });
                                                                  }
                                                                  catch (exn){
                                                                    return ;
                                                                  }
                                                                })
                                                            }), " days")), React.createElement("td", {
                                                    className: "py-3 px-6 text-center"
                                                  }, React.createElement("div", {
                                                        className: "flex items-center justify-center"
                                                      }, Belt_Array.mapWithIndex([
                                                            "sgrove",
                                                            "dwwoelfel"
                                                          ], (function (idx, username) {
                                                              return React.createElement("img", {
                                                                          key: username,
                                                                          className: " rounded-full border-gray-200 border transform hover:scale-125 " + (
                                                                            idx > 0 ? "-m-1" : ""
                                                                          ),
                                                                          title: username,
                                                                          alt: username,
                                                                          src: "https://github.com/" + username + ".png?size=200",
                                                                          width: "24px"
                                                                        });
                                                            })))), React.createElement("td", {
                                                    className: "py-3 px-6 text-center"
                                                  }, active(undefined)), React.createElement("td", {
                                                    className: "py-3 px-6 text-center"
                                                  }, React.createElement("div", {
                                                        className: "flex item-center justify-center"
                                                      }, React.createElement("div", {
                                                            className: "mr-2 transform hover:bg-gray-800 hover:scale-110 cursor-pointer border rounded-lg p-2",
                                                            style: {
                                                              borderColor: Comps.colors["gray-2"]
                                                            },
                                                            onClick: (function (param) {
                                                                return Curry._1(onInspectChain, chain);
                                                              })
                                                          }, React.createElement(Icons.Visibility.make, {
                                                                color: Comps.colors["gray-4"]
                                                              })), React.createElement("div", {
                                                            className: "mr-2 transform hover:bg-gray-800 hover:scale-110 cursor-pointer border rounded-lg p-2",
                                                            style: {
                                                              borderColor: Comps.colors["gray-2"]
                                                            },
                                                            onClick: (function (param) {
                                                                return Curry._2(onEditChain, chain, undefined);
                                                              })
                                                          }, React.createElement(Icons.EditPencil.make, {
                                                                color: Comps.colors["gray-4"]
                                                              })), React.createElement("div", {
                                                            className: "mr-2 transform hover:bg-gray-800 hover:scale-110 cursor-pointer border rounded-lg p-2",
                                                            style: {
                                                              borderColor: Comps.colors["gray-2"]
                                                            },
                                                            onClick: (function (param) {
                                                                if (confirm("Really delete chain: " + chain.name + "?")) {
                                                                  return Curry._1(onDeleteChain, chain);
                                                                }
                                                                
                                                              })
                                                          }, React.createElement(Icons.Trash.make, {
                                                                color: Comps.colors["gray-4"]
                                                              })))));
                                  })))))), typeof diff$1 === "number" ? (
                diff$1 !== 0 ? React.createElement(Comps.Modal.make, {
                        children: React.createElement("div", {
                              className: "flex w-full flex-col"
                            }, React.createElement("div", {
                                  className: "flex flex-grow flex-row h-full"
                                }, React.createElement("table", {
                                      className: ""
                                    }, React.createElement("thead", undefined, React.createElement("tr", {
                                              className: "text-gray-600 text-sm leading-normal",
                                              style: {
                                                color: Comps.colors["gray-3"]
                                              }
                                            }, React.createElement("th", {
                                                  className: "py-3 px-6 text-left"
                                                }, "Name"), React.createElement("th", {
                                                  className: "py-3 px-6 text-left"
                                                }, "Setting"))), React.createElement("tbody", {
                                          className: ""
                                        }, React.createElement("tr", {
                                              className: "rounded-md border-4 border-gray-900 ",
                                              style: {
                                                backgroundColor: Comps.colors["gray-15"],
                                                color: Comps.colors["gray-6"],
                                                marginTop: "5px"
                                              }
                                            }, React.createElement("td", {
                                                  className: "py-3 px-6 text-left whitespace-nowrap"
                                                }, React.createElement("div", {
                                                      className: "flex items-center"
                                                    }, React.createElement("span", {
                                                          className: "font-medium cursor-pointer mr-2"
                                                        }, "Package name: "))), React.createElement("td", {
                                                  className: "py-3 px-6 "
                                                }, React.createElement("div", {
                                                      className: "relative text-lg bg-transparent text-gray-800"
                                                    }, React.createElement("div", {
                                                          className: "flex items-center ml-2 mr-2"
                                                        }, React.createElement("input", {
                                                              defaultValue: $$package.name,
                                                              className: "border-none px-2 leading-tight outline-none text-white form-input",
                                                              style: {
                                                                backgroundColor: Comps.colors["gray-9"]
                                                              },
                                                              placeholder: "npm-package-name",
                                                              type: "text",
                                                              onChange: (function ($$event) {
                                                                  var value = $$event.target.value;
                                                                  return Curry._1(onEditPackage, {
                                                                              name: value,
                                                                              description: $$package.description,
                                                                              version: $$package.version,
                                                                              chains: $$package.chains
                                                                            });
                                                                })
                                                            }))))), React.createElement("tr", {
                                              className: "rounded-md border-4 border-gray-900 ",
                                              style: {
                                                backgroundColor: Comps.colors["gray-15"],
                                                color: Comps.colors["gray-6"],
                                                marginTop: "5px"
                                              }
                                            }, React.createElement("td", {
                                                  className: "py-3 px-6 text-left whitespace-nowrap"
                                                }, React.createElement("div", {
                                                      className: "flex items-center"
                                                    }, React.createElement("span", {
                                                          className: "font-medium cursor-pointer mr-2"
                                                        }, "Package descriptions: "))), React.createElement("td", {
                                                  className: "py-3 px-6 "
                                                }, React.createElement("div", {
                                                      className: "relative text-lg bg-transparent text-gray-800"
                                                    }, React.createElement("div", {
                                                          className: "flex items-center ml-2 mr-2"
                                                        }, React.createElement("input", {
                                                              defaultValue: Belt_Option.getWithDefault($$package.description, ""),
                                                              className: "border-none px-2 leading-tight outline-none text-white form-input",
                                                              style: {
                                                                backgroundColor: Comps.colors["gray-9"]
                                                              },
                                                              type: "text",
                                                              onChange: (function ($$event) {
                                                                  var other = $$event.target.value.trim();
                                                                  var value = other === "" ? undefined : other;
                                                                  return Curry._1(onEditPackage, {
                                                                              name: $$package.name,
                                                                              description: value,
                                                                              version: $$package.version,
                                                                              chains: $$package.chains
                                                                            });
                                                                })
                                                            }))))), React.createElement("tr", {
                                              className: "rounded-md border-4 border-gray-900 ",
                                              style: {
                                                backgroundColor: Comps.colors["gray-15"],
                                                color: Comps.colors["gray-6"],
                                                marginTop: "5px"
                                              }
                                            }, React.createElement("td", {
                                                  className: "py-3 px-6 text-left whitespace-nowrap"
                                                }, React.createElement("div", {
                                                      className: "flex items-center"
                                                    }, React.createElement("span", {
                                                          className: "font-medium cursor-pointer mr-2"
                                                        }, "Manually set package version ('int.int.int'): "))), React.createElement("td", {
                                                  className: "py-3 px-6 "
                                                }, React.createElement("div", {
                                                      className: "relative text-lg bg-transparent text-gray-800"
                                                    }, React.createElement("div", {
                                                          className: "flex items-center ml-2 mr-2"
                                                        }, React.createElement("input", {
                                                              defaultValue: packageVersion($$package),
                                                              className: "border-none px-2 leading-tight outline-none text-white form-input",
                                                              style: {
                                                                backgroundColor: Comps.colors["gray-9"]
                                                              },
                                                              placeholder: "e.g. 1.0.2",
                                                              type: "text",
                                                              onChange: (function ($$event) {
                                                                  var value = $$event.target.value.trim();
                                                                  var match = value.split(".");
                                                                  var version;
                                                                  if (match.length !== 3) {
                                                                    version = undefined;
                                                                  } else {
                                                                    var major = match[0];
                                                                    var minor = match[1];
                                                                    var patch = match[2];
                                                                    try {
                                                                      version = [
                                                                        Caml_format.caml_int_of_string(major),
                                                                        Caml_format.caml_int_of_string(minor),
                                                                        Caml_format.caml_int_of_string(patch)
                                                                      ];
                                                                    }
                                                                    catch (exn){
                                                                      version = undefined;
                                                                    }
                                                                  }
                                                                  return Belt_Option.forEach(version, (function (version) {
                                                                                return Curry._1(onEditPackage, {
                                                                                            name: $$package.name,
                                                                                            description: $$package.description,
                                                                                            version: version,
                                                                                            chains: $$package.chains
                                                                                          });
                                                                              }));
                                                                })
                                                            })))))))), React.createElement("div", {
                                  className: "w-full ml-auto flex"
                                }, React.createElement(Comps.Button.make, {
                                      onClick: (function (param) {
                                          return Curry._1(setState, (function (oldState) {
                                                        return {
                                                                view: /* Nothing */0
                                                              };
                                                      }));
                                        }),
                                      className: "flex-grow",
                                      children: "Close"
                                    })))
                      }) : null
              ) : React.createElement(Comps.Modal.make, {
                    children: React.createElement("div", {
                          className: "w-full h-full shadow-md rounded my-6 text-white flex flex-col"
                        }, React.createElement("div", {
                              className: "overflow-y-scroll flex flex-col"
                            }, React.createElement("h1", {
                                  className: "m-5 flex-1 font-bold block",
                                  style: {
                                    color: Comps.colors["gray-6"]
                                  }
                                }, "Publish package changes: ", React.createElement("span", {
                                      className: "mx-2"
                                    }, React.createElement("code", undefined, stringVersion(initialPackage))), React.createElement("span", {
                                      className: "mx-2"
                                    }, " => "), React.createElement("span", {
                                      className: "mx-2"
                                    }, React.createElement("code", undefined, stringVersion(computeNewVersion($$package, diff$1._0))))), React.createElement("table", {
                                  className: "min-w-max h-full w-full table-auto"
                                }, React.createElement("thead", undefined, React.createElement("tr", {
                                          className: "text-gray-600 text-sm leading-normal",
                                          style: {
                                            color: Comps.colors["gray-3"]
                                          }
                                        }, React.createElement("th", {
                                              className: "py-3 px-6 text-left"
                                            }, "Function"), React.createElement("th", {
                                              className: "py-3 px-6 text-left"
                                            }, "Input"), React.createElement("th", {
                                              className: "py-3 px-6 text-center"
                                            }, "Return"))), React.createElement("tbody", {
                                      className: "text-gray-600 text-sm font-light"
                                    }, Belt_Array.map($$package.chains, (function (chain) {
                                            var typeDef = Chain.typeScriptDefinition(schema, chain);
                                            return React.createElement("tr", {
                                                        key: chain.name,
                                                        className: "rounded-md border-4 border-gray-900 text-gray-50 hover:bg-gray-400"
                                                      }, React.createElement("td", undefined, typeDef.functionName), React.createElement("td", undefined, React.createElement(Comps.Pre.make, {
                                                                children: typeDef.inputType
                                                              })), React.createElement("td", undefined, React.createElement(Comps.Pre.make, {
                                                                children: typeDef.returnType
                                                              })));
                                          }))))), React.createElement("div", {
                              className: "w-full ml-auto flex"
                            }, React.createElement(Comps.Button.make, {
                                  className: "flex-grow",
                                  children: "Save",
                                  disabled: true
                                }), React.createElement(Comps.Button.make, {
                                  onClick: (function (param) {
                                      return Curry._1(setState, (function (oldState) {
                                                    return {
                                                            view: /* Nothing */0
                                                          };
                                                  }));
                                    }),
                                  className: "flex-grow",
                                  children: "Cancel"
                                })))
                  }));
}

var PackageEditor = {
  diffPackage: diffPackage,
  versionBumpForDiff: versionBumpForDiff,
  computeNewVersion: computeNewVersion,
  make: Package$PackageEditor
};

function Package$CollapsableTable(Props) {
  var classNameOpt = Props.className;
  var head = Props.head;
  var children = Props.children;
  var defaultOpenOpt = Props.defaultOpen;
  var className = classNameOpt !== undefined ? classNameOpt : "min-w-full leading-normal";
  var defaultOpen = defaultOpenOpt !== undefined ? defaultOpenOpt : true;
  var match = React.useState(function () {
        return {
                isOpen: defaultOpen
              };
      });
  var setState = match[1];
  return React.createElement("table", {
              className: className
            }, React.createElement("thead", {
                  className: "cursor-pointer",
                  onClick: (function (param) {
                      return Curry._1(setState, (function (oldState) {
                                    return {
                                            isOpen: !oldState.isOpen
                                          };
                                  }));
                    })
                }, head), React.createElement("tbody", {
                  className: match[0].isOpen ? "" : "hidden"
                }, children));
}

var CollapsableTable = {
  make: Package$CollapsableTable
};

function stableFakeRequestTime(traceId, requestTraceJson) {
  var magicTraceNumber = parseInt(traceId.toString().replace(new RegExp("\\W+", "g"), "").substring(0, 10), 16);
  var length = JSON.stringify(requestTraceJson).length;
  var stretched = length + magicTraceNumber | 0;
  return Math.abs(stretched % 1851) + 50 | 0;
}

function Package$ChainLogs(Props) {
  var chain = Props.chain;
  var traces = Props.traces;
  var onEditChain = Props.onEditChain;
  var match = React.useState(function () {
        return {
                inspected: Belt_Option.map(Belt_Array.get(traces, 0), (function (trace) {
                        return trace.trace.id;
                      })),
                filter: /* All */0,
                search: undefined
              };
      });
  var setState = match[1];
  var state = match[0];
  var filterFn = function (filter) {
    var match = state.search;
    if (filter < 3) {
      switch (filter) {
        case /* All */0 :
            if (match !== undefined) {
              return function (trace) {
                return Belt_Option.isSome(Caml_option.null_to_opt(trace.trace.id.toString().match(new RegExp(match, "i"))));
              };
            } else {
              return function (param) {
                return true;
              };
            }
        case /* Flagged */1 :
            break;
        case /* Errored */2 :
            return function (trace) {
              var hasErrors = Belt_Array.some(trace.trace.data.oneGraph.executeChain.results, (function (result) {
                      try {
                        return Belt_Array.some(result.result, (function (result) {
                                      return Belt_Option.isSome(Caml_option.nullable_to_opt(result.errors));
                                    }));
                      }
                      catch (exn){
                        return false;
                      }
                    }));
              var searchMatches = match !== undefined ? Belt_Option.isSome(Caml_option.null_to_opt(trace.trace.id.toString().match(new RegExp(match, "i")))) : true;
              if (hasErrors) {
                return searchMatches;
              } else {
                return false;
              }
            };
        
      }
    }
    return function (param) {
      return false;
    };
  };
  var filteredTraces = Belt_Array.keep(traces, filterFn(state.filter));
  var categories = Belt_Array.map([
        /* All */0,
        /* Flagged */1,
        /* Errored */2,
        /* Slow */3
      ], (function (category) {
          var name;
          switch (category) {
            case /* All */0 :
                name = "All";
                break;
            case /* Flagged */1 :
                name = "Flagged";
                break;
            case /* Errored */2 :
                name = "Errored";
                break;
            case /* Slow */3 :
                name = "Slow";
                break;
            
          }
          var style = category === state.filter ? ({
                backgroundColor: Comps.colors["gray-16"]
              }) : ({});
          var filterFn$1 = filterFn(category);
          var categoryCount = Belt_Array.reduce(traces, 0, (function (acc, next) {
                  if (Curry._1(filterFn$1, next)) {
                    return acc + 1 | 0;
                  } else {
                    return acc;
                  }
                }));
          return React.createElement("div", {
                      className: "mt-3"
                    }, React.createElement("div", {
                          className: "-mx-3 inline-block py-1 px-3 text-sm font-medium flex items-center hover:bg-gray-700 cursor-pointer justify-between rounded-lg",
                          style: style,
                          onClick: (function (param) {
                              return Curry._1(setState, (function (oldState) {
                                            return {
                                                    inspected: undefined,
                                                    filter: category,
                                                    search: oldState.search
                                                  };
                                          }));
                            })
                        }, React.createElement("span", undefined, React.createElement("span", {
                                  style: {
                                    color: Comps.colors["gray-6"]
                                  }
                                }, name)), categoryCount > 0 ? React.createElement("span", {
                                className: "inline-block px-2 py-1 text-center py-1 leading-none text-xs font-semibold text-gray-700 rounded-full",
                                style: {
                                  backgroundColor: Comps.colors["gray-17"],
                                  color: Comps.colors["gray-6"]
                                }
                              }, String(categoryCount)) : null));
        }));
  var filteredTracesList = Belt_Array.map(Belt_SortArray.stableSortBy(filteredTraces, (function (a, b) {
              return new Date(b.createdAt) - new Date(a.createdAt) | 0;
            })), (function (trace) {
          var className = Caml_obj.caml_equal(Caml_option.some(trace.trace.id), state.inspected) ? "bg-gray-600" : "";
          var hasErrors = Belt_Array.some(trace.trace.data.oneGraph.executeChain.results, (function (result) {
                  try {
                    return Belt_Array.some(result.result, (function (result) {
                                  return Belt_Option.isSome(Caml_option.nullable_to_opt(result.errors));
                                }));
                  }
                  catch (exn){
                    return false;
                  }
                }));
          return React.createElement("button", {
                      className: "block w-full text-left py-2 border-b hover:bg-gray-700 " + className,
                      style: {
                        borderColor: Comps.colors["gray-1"],
                        color: Comps.colors["gray-6"]
                      },
                      onClick: (function ($$event) {
                          $$event.stopPropagation();
                          return Curry._1(setState, (function (oldState) {
                                        return {
                                                inspected: Caml_option.some(trace.trace.id),
                                                filter: oldState.filter,
                                                search: oldState.search
                                              };
                                      }));
                        })
                    }, React.createElement("div", {
                          className: "px-2 flex justify-between"
                        }, React.createElement("span", {
                              className: "text-xs font-semibold"
                            }, trace.trace.id.toString())), React.createElement("div", {
                          className: "px-2 flex justify-between items-center"
                        }, React.createElement("span", {
                              className: "text-xs font-semibold",
                              style: {
                                color: Comps.colors["gray-3"]
                              }
                            }, Utils.$$Date.timeAgo(new Date(trace.createdAt))), React.createElement("span", {
                              className: "text-xs font-semibold text-gray-900 px-4 py-2"
                            }, hasErrors ? errored(undefined) : noErrors(undefined))));
        }));
  var noSelectedTrace = React.createElement("div", {
        className: "m-2 w-full text-center flex flex-1 flex-grow flex-col justify-items-center justify-center items-center justify-items align-middle",
        style: {
          color: Comps.colors["gray-4"],
          height: "50%"
        }
      }, React.createElement(Icons.MonoAddBlocks.make, {
            color: Comps.colors["gray-13"]
          }), React.createElement("span", {
            className: "mt-2"
          }, "No trace selected"));
  var inspectedTrace = Belt_Option.mapWithDefault(Belt_Option.flatMap(state.inspected, (function (inspectedId) {
              return Belt_Array.getBy(traces, (function (trace) {
                            return Caml_obj.caml_equal(trace.trace.id, inspectedId);
                          }));
            })), noSelectedTrace, (function (trace) {
          var hasErrors = Belt_Array.some(trace.trace.data.oneGraph.executeChain.results, (function (result) {
                  try {
                    return Belt_Array.some(result.result, (function (result) {
                                  return Belt_Option.isSome(Caml_option.nullable_to_opt(result.errors));
                                }));
                  }
                  catch (exn){
                    return false;
                  }
                }));
          var apiMetrics = Belt_Option.flatMap(trace.trace.extensions, (function (extensions) {
                  return Belt_Option.flatMap(extensions.metrics, (function (metrics) {
                                return metrics.api;
                              }));
                }));
          var badges = [
            hasErrors ? errored(undefined) : noErrors(undefined),
            Belt_Option.mapWithDefault(apiMetrics, 0, (function (m) {
                    return m.totalRequestMs;
                  })) > 1500 ? slow(undefined) : null
          ];
          var variables = Belt_Option.getWithDefault(trace.variables, JSON.parse("{}"));
          var variableEntries = Js_dict.entries(variables);
          var avoidedReqs = Belt_Option.mapWithDefault(apiMetrics, 0, (function (m) {
                  return m.avoidedRequestCount;
                }));
          var byHost = Belt_Option.mapWithDefault(Belt_Option.flatMap(Belt_Option.flatMap(Belt_Option.flatMap(trace.trace.extensions, (function (extensions) {
                              return extensions.metrics;
                            })), (function (metrics) {
                          return metrics.api;
                        })), (function (api) {
                      return api.byHost;
                    })), [], Js_dict.entries);
          return React.createElement(React.Fragment, undefined, React.createElement("div", {
                          className: "shadow-lg ml-2 mr-2 "
                        }, React.createElement("div", {
                              className: "pb-4"
                            }, React.createElement("div", {
                                  className: "block py-3 border-t"
                                }, React.createElement("div", {
                                      className: "px-4 py-2 flex justify-between"
                                    }, React.createElement("div", undefined, React.createElement("span", {
                                              className: "mr-2",
                                              style: {
                                                color: Comps.colors["gray-6"]
                                              }
                                            }, React.createElement("code", undefined, trace.trace.id.toString())), badges), React.createElement("div", undefined, React.createElement(Comps.Button.make, {
                                              onClick: (function (param) {
                                                  return Curry._2(onEditChain, chain, trace);
                                                }),
                                              children: "Use as mock"
                                            })))), React.createElement("div", {
                                  className: "w-full m-4",
                                  style: {
                                    color: Comps.colors["gray-6"]
                                  }
                                }, "General"), React.createElement(Package$CollapsableTable, {
                                  className: "min-w-full leading-normal text-xs",
                                  head: React.createElement("tr", {
                                        className: "text-left mb-2"
                                      }, React.createElement("th", {
                                            className: "px-5 py-3 font-semibold tracking-wider",
                                            style: {
                                              color: Comps.colors["gray-3"]
                                            }
                                          }, "Host"), React.createElement("th", {
                                            className: "px-5 py-3 font-semibold tracking-wider",
                                            style: {
                                              color: Comps.colors["gray-3"]
                                            }
                                          }, "Request Count"), React.createElement("th", {
                                            className: "px-5 py-3 font-semibold tracking-wider",
                                            style: {
                                              color: Comps.colors["gray-3"]
                                            }
                                          }, "Total ms / host")),
                                  children: null
                                }, React.createElement("tr", {
                                      className: "rounded-sm",
                                      style: {
                                        backgroundColor: Comps.colors["gray-15"],
                                        color: Comps.colors["gray-6"]
                                      }
                                    }, React.createElement("td", {
                                          className: "px-5 py-5 text-sm w-2/5"
                                        }, React.createElement("div", {
                                              className: "flex items-center"
                                            }, React.createElement("code", undefined, "All hosts"))), React.createElement("td", {
                                          className: "px-5 py-5 text-sm w-2/5"
                                        }, React.createElement("p", {
                                              className: "whitespace-no-wrap"
                                            }, String(Belt_Option.mapWithDefault(apiMetrics, 0, (function (m) {
                                                        return m.requestCount;
                                                      }))) + " reqs", avoidedReqs !== 0 ? "(" + String(avoidedReqs) + " avoided)" : null)), React.createElement("td", {
                                          className: "px-5 py-5 text-sm w-2/5"
                                        }, React.createElement("p", {
                                              className: "whitespace-no-wrap"
                                            }, String(Belt_Option.mapWithDefault(apiMetrics, 0, (function (m) {
                                                        return m.totalRequestMs;
                                                      }))) + "ms total"))), Belt_Array.map(byHost, (function (param) {
                                        var metrics = param[1];
                                        var host = param[0];
                                        return React.createElement("tr", {
                                                    key: host,
                                                    className: "rounded-sm",
                                                    style: {
                                                      backgroundColor: Comps.colors["gray-15"],
                                                      color: Comps.colors["gray-6"]
                                                    }
                                                  }, React.createElement("td", {
                                                        className: "px-5 py-5 text-sm w-2/5"
                                                      }, React.createElement("div", {
                                                            className: "flex items-center"
                                                          }, React.createElement("code", undefined, host + ": "))), React.createElement("td", {
                                                        className: "px-5 py-5 text-sm w-2/5"
                                                      }, React.createElement("p", {
                                                            className: "whitespace-no-wrap"
                                                          }, String(metrics.requestCount) + " reqs")), React.createElement("td", {
                                                        className: "px-5 py-5 text-sm w-2/5"
                                                      }, React.createElement("p", {
                                                            className: "whitespace-no-wrap"
                                                          }, String(metrics.totalRequestMs) + "ms total")));
                                      }))))), React.createElement("div", {
                          className: "shadow-lg ml-2 mr-2 "
                        }, React.createElement("div", {
                              className: "pb-4"
                            }, React.createElement("div", {
                                  className: "block",
                                  style: {
                                    color: Comps.colors["gray-6"]
                                  }
                                }, React.createElement("div", {
                                      className: "px-4 py-2 flex justify-between"
                                    }, variableEntries.length !== 0 ? React.createElement("span", undefined, "Trace Variables ") : React.createElement("span", undefined, "No variables in trace"))), variableEntries.length !== 0 ? React.createElement(Package$CollapsableTable, {
                                    className: "min-w-full leading-normal",
                                    head: React.createElement("tr", {
                                          className: "text-left mb-2"
                                        }, React.createElement("th", {
                                              className: "px-5 py-3 font-semibold tracking-wider",
                                              style: {
                                                color: Comps.colors["gray-3"]
                                              }
                                            }, "Name"), React.createElement("th", {
                                              className: "px-5 py-3 font-semibold tracking-wider",
                                              style: {
                                                color: Comps.colors["gray-3"]
                                              }
                                            }, "Value")),
                                    children: Belt_Array.map(variableEntries, (function (param) {
                                            return React.createElement("tr", undefined, React.createElement("td", {
                                                            className: "px-5 py-5 border-b border-gray-200 bg-white text-sm w-2/5"
                                                          }, React.createElement("div", {
                                                                className: "flex items-center"
                                                              }, React.createElement("code", undefined, param[0]))), React.createElement("td", {
                                                            className: "px-5 py-5 border-b border-gray-200 bg-white text-sm overflow-x-scroll overflow-y-scroll"
                                                          }, React.createElement("pre", {
                                                                className: "text-gray-900 whitespace-no-wrap text-left"
                                                              }, JSON.stringify(param[1], null, 2))));
                                          }))
                                  }) : null)), React.createElement("div", undefined, Belt_Array.map(trace.trace.data.oneGraph.executeChain.results, (function (result) {
                                var request = result.request;
                                var chainRequest = Belt_Array.getBy(chain.requests, (function (chainRequest) {
                                        return request.id === chainRequest.id;
                                      }));
                                var serviceImages = Belt_Option.mapWithDefault(chainRequest, null, (function (request) {
                                        return Belt_Array.keepMap(Belt_Array.mapWithIndex(request.operation.services, (function (idx, service) {
                                                          return Belt_Option.map(Utils.serviceImageUrl(undefined, undefined, service), (function (param) {
                                                                        var friendlyServiceName = param[1];
                                                                        return React.createElement("img", {
                                                                                    key: friendlyServiceName,
                                                                                    className: " h-6 w-6 rounded-full object-cover transform hover:scale-125 inline-block border-2 border-gray-300 " + (
                                                                                      idx > 0 ? "-m-1" : "ml-2"
                                                                                    ),
                                                                                    title: friendlyServiceName,
                                                                                    alt: friendlyServiceName,
                                                                                    src: param[0],
                                                                                    width: "24px"
                                                                                  });
                                                                      }));
                                                        })), (function (el) {
                                                      return el;
                                                    }));
                                      }));
                                var fakeRequestLength = stableFakeRequestTime(trace.trace.id, result);
                                var slowRequest = fakeRequestLength > 800;
                                var hasErrors = Belt_Array.some(Belt_Array.keep(result.result, (function (result) {
                                            return Belt_Option.isSome((result == null) ? undefined : Caml_option.some(result));
                                          })), (function (result) {
                                        return Belt_Option.isSome(Caml_option.nullable_to_opt(result.errors));
                                      }));
                                var argumentDependencies = result.argumentDependencies;
                                var argumentDependenciesTable = argumentDependencies.length === 0 ? null : React.createElement(Package$CollapsableTable, {
                                        className: "min-w-full leading-normal",
                                        head: React.createElement("tr", {
                                              className: "text-left mb-2"
                                            }, React.createElement("th", {
                                                  className: "px-5 py tracking-wider font-normal",
                                                  style: {
                                                    color: Comps.colors["gray-3"]
                                                  }
                                                }, "Name / Status"), React.createElement("th", {
                                                  className: "px-5 py tracking-wider font-normal",
                                                  style: {
                                                    color: Comps.colors["gray-3"]
                                                  }
                                                }, "Value"), React.createElement("th", {
                                                  className: "px-5 py tracking-wider font-normal",
                                                  style: {
                                                    color: Comps.colors["gray-3"]
                                                  }
                                                }, "Logs")),
                                        children: Belt_Array.map(argumentDependencies, (function (argumentDependency) {
                                                var status = Belt_Option.mapWithDefault(Caml_option.nullable_to_opt(argumentDependency.error), null, (function (param) {
                                                        return errored(undefined);
                                                      }));
                                                return React.createElement("tr", {
                                                            className: "border-b-2",
                                                            style: {
                                                              backgroundColor: Comps.colors["gray-15"],
                                                              borderColor: Comps.colors["gray-8"],
                                                              color: Comps.colors["gray-6"]
                                                            }
                                                          }, React.createElement("td", {
                                                                className: "px-5 py-1 text-sm w-2/5"
                                                              }, status, " ", argumentDependency.name), React.createElement("td", {
                                                                className: "px-5 py-1 text-sm w-2/5"
                                                              }, React.createElement("pre", {
                                                                    className: "overflow-x-scroll w-full overflow-y-scroll"
                                                                  }, Belt_Option.mapWithDefault(Belt_Array.get(Belt_Option.getWithDefault(Caml_option.nullable_to_opt(argumentDependency.returnValues), []), 0), "", (function (value) {
                                                                          return JSON.stringify(value, null, 2);
                                                                        })))), React.createElement("td", {
                                                                className: "px-5 py-1 text-sm w-2/5"
                                                              }, React.createElement("pre", {
                                                                    className: "overflow-x-scroll overflow-y-scroll"
                                                                  }, Belt_Array.map(argumentDependency.logs, (function (output) {
                                                                          var match = output.level;
                                                                          var color = match === "warn" ? Comps.colors.yellow : (
                                                                              match === "error" ? Comps.colors.red : Comps.colors["gray-6"]
                                                                            );
                                                                          return React.createElement("span", {
                                                                                      style: {
                                                                                        color: color
                                                                                      }
                                                                                    }, JSON.stringify(output.body));
                                                                        })))));
                                              }))
                                      });
                                var badges = [
                                  hasErrors ? errored(undefined) : null,
                                  slowRequest ? slow(undefined) : null
                                ];
                                return React.createElement("div", {
                                            className: "shadow-lg ml-2 mr-2 rounded-lg border-t",
                                            style: {
                                              borderColor: Comps.colors["gray-1"]
                                            }
                                          }, React.createElement("div", {
                                                className: "block py-3 pb-4"
                                              }, React.createElement("div", {
                                                    className: "px-4 py-2 flex justify-between",
                                                    style: {
                                                      color: Comps.colors["gray-6"]
                                                    }
                                                  }, React.createElement("div", undefined, React.createElement("span", {
                                                            className: "text-sm  mr-2"
                                                          }, request.id), badges, serviceImages), React.createElement("div", {
                                                        className: "flex"
                                                      }, React.createElement("span", {
                                                            className: "px-4 text-sm  ",
                                                            style: {
                                                              borderColor: Comps.colors["gray-6"]
                                                            }
                                                          }, String(fakeRequestLength) + "ms"))), argumentDependenciesTable, React.createElement("div", {
                                                    className: "px-4 py-2 text-sm font-semibold text-gray-700"
                                                  }, Belt_Array.map(result.result, (function (result) {
                                                          return React.createElement(ReactJsonView, {
                                                                      src: Belt_Option.getWithDefault((result == null) ? undefined : Caml_option.some(result), {}),
                                                                      name: request.id,
                                                                      theme: "monokai",
                                                                      collapsed: true,
                                                                      displayDataTypes: false
                                                                    });
                                                        })))));
                              })), React.createElement("div", {
                              className: "w-full m-4",
                              style: {
                                color: Comps.colors["gray-6"]
                              }
                            }, "Raw API Requests"), Belt_Array.map(Belt_Option.getWithDefault(Belt_Option.flatMap(trace.trace.extensions, (function (extensions) {
                                        return extensions.apiRequests;
                                      })), []), (function (apiRequest) {
                                var title = apiRequest.method + " " + apiRequest.uri;
                                return React.createElement("div", {
                                            className: "shadow-lg pt-4 ml-2 mr-2 rounded-lg"
                                          }, React.createElement("div", {
                                                className: "block py-3 border-t pb-4",
                                                style: {
                                                  backgroundColor: Comps.colors["gray-15"],
                                                  color: Comps.colors["gray-6"]
                                                }
                                              }, React.createElement("div", {
                                                    className: "px-4 py-2 flex justify-between"
                                                  }, React.createElement("span", {
                                                        className: "inline-block text-sm font-semibold truncate"
                                                      }, title)), React.createElement(ReactJsonView, {
                                                    src: apiRequest,
                                                    name: "apiCall",
                                                    theme: "monokai",
                                                    collapsed: true,
                                                    displayDataTypes: false
                                                  })));
                              }))));
        }));
  return React.createElement("div", {
              className: "flex flex-col",
              style: {
                backgroundColor: Comps.colors["gray-8"],
                height: "calc(100vh - 56px)"
              }
            }, React.createElement("div", {
                  className: "flex-1 flex overflow-x-hidden"
                }, React.createElement("div", {
                      className: "p-6 overflow-y-auto",
                      style: {
                        width: "256px"
                      }
                    }, React.createElement("nav", undefined, React.createElement("h2", {
                              className: "font-semibold uppercase tracking-wide",
                              style: {
                                color: Comps.colors["gray-6"]
                              }
                            }, "Logs"), categories)), React.createElement("main", {
                      className: "flex flex-1 w-full"
                    }, React.createElement("div", {
                          className: "overflow-y-auto overflow-hidden border-l border-r p-6",
                          style: {
                            borderColor: Comps.colors["gray-1"],
                            width: "334px"
                          },
                          onClick: (function (param) {
                              return Curry._1(setState, (function (oldState) {
                                            return {
                                                    inspected: undefined,
                                                    filter: oldState.filter,
                                                    search: oldState.search
                                                  };
                                          }));
                            })
                        }, React.createElement("h2", {
                              className: "font-semibold uppercase tracking-wide",
                              style: {
                                color: Comps.colors["gray-6"]
                              }
                            }, "Traces"), React.createElement("div", {
                              className: "flex items-center my-4 rounded-md inline-block",
                              style: {
                                backgroundColor: Comps.colors["gray-7"]
                              }
                            }, React.createElement("div", {
                                  className: "pl-2"
                                }, React.createElement(Icons.Search.make, {
                                      color: Comps.colors["gray-4"]
                                    })), React.createElement("input", {
                                  className: "w-full rounded-md text-gray-200 leading-tight focus:outline-none py-2 px-2 border-0 text-white",
                                  id: "search",
                                  style: {
                                    backgroundColor: Comps.colors["gray-7"]
                                  },
                                  spellCheck: false,
                                  placeholder: "Search",
                                  type: "text",
                                  onChange: (function ($$event) {
                                      var value = $$event.target.value;
                                      return Curry._1(setState, (function (oldState) {
                                                    var other = value.trim();
                                                    var tmp = other === "" ? undefined : other;
                                                    return {
                                                            inspected: oldState.inspected,
                                                            filter: oldState.filter,
                                                            search: tmp
                                                          };
                                                  }));
                                    })
                                })), React.createElement("div", {
                              className: "pb-4"
                            }, filteredTracesList)), React.createElement("div", {
                          className: "flex flex-col flex-1 w-auto inline-block overflow-y-auto overflow-hidden"
                        }, inspectedTrace))));
}

var ChainLogs = {
  slowRequestMsThreshold: 800,
  slowChainMsThreshold: 1500,
  stableFakeRequestTime: stableFakeRequestTime,
  make: Package$ChainLogs
};

function Package(Props) {
  var schema = Props.schema;
  var config = Props.config;
  var match = React.useState(function () {
        var initialChains = [
          descuriChain,
          spotifyChain,
          devJsonChain
        ];
        var initialChains$1 = Belt_Array.concat(Chain.loadFromLocalStorage(undefined), initialChains);
        var package_version = [
          1,
          0,
          1
        ];
        var $$package = {
          name: "bushido-fns",
          description: undefined,
          version: package_version,
          chains: initialChains$1
        };
        return {
                inspected: /* Package */0,
                package: $$package,
                initialPackage: $$package,
                helpOpen: false
              };
      });
  var setState = match[1];
  var state = match[0];
  ReactHotkeysHook.useHotkeys("shift+/", (function ($$event, _handler) {
          $$event.preventDefault();
          $$event.stopPropagation();
          return Curry._1(setState, (function (oldState) {
                        return {
                                inspected: oldState.inspected,
                                package: oldState.package,
                                initialPackage: oldState.initialPackage,
                                helpOpen: !oldState.helpOpen
                              };
                      }));
        }), {}, undefined);
  ReactHotkeysHook.useHotkeys("esc", (function (_event, _handler) {
          return Curry._1(setState, (function (oldState) {
                        if (oldState.helpOpen) {
                          return {
                                  inspected: oldState.inspected,
                                  package: oldState.package,
                                  initialPackage: oldState.initialPackage,
                                  helpOpen: false
                                };
                        } else {
                          return oldState;
                        }
                      }));
        }), {}, undefined);
  var navButton = function (onClick, onDoubleClick, content) {
    var tmp = {
      className: "mr-2",
      onClick: onClick
    };
    if (onDoubleClick !== undefined) {
      tmp.onDoubleClick = Caml_option.valFromOption(onDoubleClick);
    }
    return React.createElement("button", tmp, content);
  };
  var chain = state.inspected;
  var content;
  if (typeof chain === "number") {
    content = React.createElement(Package$PackageEditor, {
          schema: schema,
          initialPackage: state.initialPackage,
          package: state.package,
          authTokens: [
            {
              name: "studio-test",
              accessToken: "9mKUXvNQBsGu-dMIK1iAiPjB1qzM3NqAW8a0iqWFTu4"
            },
            {
              name: "Persist query token",
              accessToken: "Mie9GEmMA2wCO5x39tGsxLZ-yy5Wr3JNBZhPYdj5h4Y"
            }
          ],
          onCreateChain: (function (newChain) {
              Chain.saveToLocalStorage(newChain);
              return Curry._1(setState, (function (oldState) {
                            var init = oldState.package;
                            return {
                                    inspected: {
                                      TAG: 1,
                                      chain: newChain,
                                      trace: undefined,
                                      [Symbol.for("name")]: "Edit"
                                    },
                                    package: {
                                      name: init.name,
                                      description: init.description,
                                      version: init.version,
                                      chains: Belt_Array.concat(oldState.package.chains, [newChain])
                                    },
                                    initialPackage: oldState.initialPackage,
                                    helpOpen: oldState.helpOpen
                                  };
                          }));
            }),
          onInspectChain: (function (chain) {
              return Curry._1(setState, (function (oldState) {
                            return {
                                    inspected: {
                                      TAG: 0,
                                      _0: chain,
                                      [Symbol.for("name")]: "Chain"
                                    },
                                    package: oldState.package,
                                    initialPackage: oldState.initialPackage,
                                    helpOpen: oldState.helpOpen
                                  };
                          }));
            }),
          onEditChain: (function (chain, trace) {
              return Curry._1(setState, (function (oldState) {
                            return {
                                    inspected: {
                                      TAG: 1,
                                      chain: chain,
                                      trace: trace,
                                      [Symbol.for("name")]: "Edit"
                                    },
                                    package: oldState.package,
                                    initialPackage: oldState.initialPackage,
                                    helpOpen: oldState.helpOpen
                                  };
                          }));
            }),
          onDeleteChain: (function (targetChain) {
              Chain.deleteFromLocalStorage(targetChain);
              return Curry._1(setState, (function (oldState) {
                            var init = oldState.package;
                            return {
                                    inspected: /* Package */0,
                                    package: {
                                      name: init.name,
                                      description: init.description,
                                      version: init.version,
                                      chains: Belt_Array.keep(oldState.package.chains, (function (chain) {
                                              return Caml_obj.caml_notequal(chain.id, targetChain.id);
                                            }))
                                    },
                                    initialPackage: oldState.initialPackage,
                                    helpOpen: oldState.helpOpen
                                  };
                          }));
            }),
          onEditPackage: (function (newPackage) {
              return Curry._1(setState, (function (oldState) {
                            return {
                                    inspected: oldState.inspected,
                                    package: newPackage,
                                    initialPackage: oldState.initialPackage,
                                    helpOpen: oldState.helpOpen
                                  };
                          }));
            }),
          onPublishPackageToNpm: (function (npmAuth) {
              var persistedChainPromises = Belt_Array.map(state.package.chains, (function (chain) {
                      return new Promise((function (resolve, param) {
                                    return ChainEditor.persistChain(config, schema, config.chainAccessToken, chain, (function (docId) {
                                                  return resolve([
                                                              docId,
                                                              chain
                                                            ]);
                                                }));
                                  }));
                    }));
              var __x = Promise.all(persistedChainPromises);
              var __x$1 = __x.then(function (persistedChains) {
                    var oneGraphAuth = OneGraphAuth.create({
                          appId: config.oneGraphAppId
                        });
                    var npmPackage = makePackage(schema, config, state.package, persistedChains);
                    return OneGraphRe.publishNpmPackage(Belt_Option.getExn(oneGraphAuth), {
                                npmAuth: npmAuth,
                                gitHubOAuthToken: undefined,
                                files: npmPackage.files,
                                name: state.package.name,
                                description: state.package.description,
                                version: npmPackage.packageDotJson.version,
                                dependencies: npmPackage.packageDotJson.dependencies,
                                registry: "NPM"
                              });
                  });
              __x$1.then(function (param) {
                    return Promise.resolve((alert("Published!"), undefined));
                  });
              
            }),
          onPublishPackageToGitHub: (function (gitHubOAuthToken) {
              var persistedChainPromises = Belt_Array.map(state.package.chains, (function (chain) {
                      return new Promise((function (resolve, param) {
                                    return ChainEditor.persistChain(config, schema, config.chainAccessToken, chain, (function (docId) {
                                                  console.log("Persisted chain", chain.name, docId);
                                                  return resolve([
                                                              docId,
                                                              chain
                                                            ]);
                                                }));
                                  }));
                    }));
              var __x = Promise.all(persistedChainPromises);
              var __x$1 = __x.then(function (persistedChains) {
                    var oneGraphAuth = OneGraphAuth.create({
                          appId: config.oneGraphAppId
                        });
                    var npmPackage = makePackage(schema, config, state.package, persistedChains);
                    return OneGraphRe.publishNpmPackage(Belt_Option.getExn(oneGraphAuth), {
                                npmAuth: undefined,
                                gitHubOAuthToken: gitHubOAuthToken,
                                files: npmPackage.files,
                                name: state.package.name,
                                description: state.package.description,
                                version: npmPackage.packageDotJson.version,
                                dependencies: npmPackage.packageDotJson.dependencies,
                                registry: "GITHUB"
                              });
                  });
              __x$1.then(function (param) {
                    return Promise.resolve((alert("Published!"), undefined));
                  });
              
            })
        });
  } else if (chain.TAG === /* Chain */0) {
    var chain$1 = chain._0;
    var traces = Belt_Array.keep(Chain.Trace.loadFromLocalStorage(undefined), (function (trace) {
            return Caml_obj.caml_equal(Caml_option.some(trace.chainId), chain$1.id);
          }));
    content = React.createElement(Package$ChainLogs, {
          chain: chain$1,
          traces: traces,
          onEditChain: (function (chain, trace) {
              return Curry._1(setState, (function (oldState) {
                            return {
                                    inspected: {
                                      TAG: 1,
                                      chain: chain,
                                      trace: trace,
                                      [Symbol.for("name")]: "Edit"
                                    },
                                    package: oldState.package,
                                    initialPackage: oldState.initialPackage,
                                    helpOpen: oldState.helpOpen
                                  };
                          }));
            })
        });
  } else {
    content = null;
  }
  var makeNav = function (inspected) {
    var tmp;
    var exit = 0;
    var chain;
    if (typeof inspected === "number") {
      tmp = null;
    } else if (inspected.TAG === /* Chain */0) {
      chain = inspected._0;
      exit = 1;
    } else {
      chain = inspected.chain;
      exit = 1;
    }
    if (exit === 1) {
      tmp = navButton((function (param) {
              
            }), undefined, React.createElement("strong", undefined, " >" + chain.name));
    }
    return React.createElement("nav", {
                className: "p-4 text-white",
                style: {
                  backgroundColor: Comps.colors["gray-12"],
                  color: Comps.colors["gray-11"]
                }
              }, navButton((function (param) {
                      
                    }), undefined, "OneGraph"), navButton((function (param) {
                      return Curry._1(setState, (function (oldState) {
                                    return {
                                            inspected: /* Package */0,
                                            package: oldState.package,
                                            initialPackage: oldState.initialPackage,
                                            helpOpen: oldState.helpOpen
                                          };
                                  }));
                    }), undefined, " > " + state.package.name), tmp);
  };
  return React.createElement(React.Fragment, undefined, makeNav(state.inspected), content);
}

function r(prim0, prim1) {
  return Standalone.transform(prim0, prim1);
}

var make = Package;

export {
  DevTimeJson ,
  Publish ,
  stringVersion ,
  completed ,
  errored ,
  active ,
  slow ,
  pending ,
  noErrors ,
  PackageEditor ,
  CollapsableTable ,
  ChainLogs ,
  make ,
  r ,
  
}
/* traces Not a pure module */
