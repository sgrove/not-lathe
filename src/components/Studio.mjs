// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Debug from "../Debug.mjs";
import * as Hooks from "../Hooks.mjs";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as $$Promise from "reason-promise/src/js/promise.mjs";
import * as RelayEnv from "../RelayEnv.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PackageList from "./PackageList.mjs";
import * as Js_undefined from "rescript/lib/es6/js_undefined.js";
import * as ErrorBoundary from "./ErrorBoundary.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Hooks$1 from "react-relay/hooks";
import * as Belt_HashMapString from "rescript/lib/es6/belt_HashMapString.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import * as StudioQuery_graphql from "../__generated__/StudioQuery_graphql.mjs";
import * as CollaborationContext from "./CollaborationContext.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks$1.useLazyLoadQuery(StudioQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(StudioQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(StudioQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks$1.useQueryLoader(StudioQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, StudioQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks$1.fetchQuery(environment, StudioQuery_graphql.node, StudioQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: 0,
                        _0: StudioQuery_graphql.Internal.convertResponse(res),
                        [Symbol.for("name")]: "Ok"
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: 1,
                        _0: err,
                        [Symbol.for("name")]: "Error"
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  return $$Promise.map(Hooks$1.fetchQuery(environment, StudioQuery_graphql.node, StudioQuery_graphql.Internal.convertVariables(variables), {
                    networkCacheConfig: networkCacheConfig,
                    fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
                  }).toPromise(), (function (res) {
                return StudioQuery_graphql.Internal.convertResponse(res);
              }));
}

function usePreloaded(queryRef, param) {
  var data = Hooks$1.usePreloadedQuery(StudioQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(StudioQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(StudioQuery_graphql.node, StudioQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = StudioQuery_graphql.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

var sharedStateUpdateFpsMs = 33;

function Studio$Inner(Props) {
  var appId = Props.appId;
  var schema = Props.schema;
  var data = use({
        appId: appId
      }, undefined, undefined, undefined, undefined);
  var localAudioStreamPromise = React.useRef(new Promise((function (resolve, param) {
              
            })));
  var vectorClock = React.useRef(Date.now());
  var tickVectorClockCallback = React.useCallback((function (param) {
          vectorClock.current = Date.now();
          
        }), [
        vectorClock,
        vectorClock.current
      ]);
  var tickVectorClock = Hooks.useThrottle(tickVectorClockCallback, sharedStateUpdateFpsMs);
  return React.createElement(CollaborationContext.Provider.make, {
              value: {
                getSharedChannel: (function (id, concurrentSource) {
                    var localUser = Debug.$$Navigator.isChrome(undefined) ? "og_sean_chrome" : "og_sean_safari";
                    var color = Utils.$$String.hashToHslColor(localUser);
                    var sharedChannel = CollaborationContext.idempotentCreateChannel(id, concurrentSource, (function (provider, channelId, peer) {
                            Belt_Option.forEach(Belt_HashMapString.get(CollaborationContext.globalConnectionState, channelId), (function (sharedChannel) {
                                    try {
                                      var value = sharedChannel.provider.room.peerId;
                                      return CollaborationContext.setLocalStateField(sharedChannel.provider, "peerId", value);
                                    }
                                    catch (raw_exn){
                                      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                      console.warn("Exception updating local state peerId: ", exn);
                                      return ;
                                    }
                                  }));
                            var __x = localAudioStreamPromise.current;
                            __x.then(function (audioStream) {
                                  if (audioStream !== undefined) {
                                    return Promise.resolve((peer.addStream(Caml_option.valFromOption(audioStream)), undefined));
                                  } else {
                                    return Promise.resolve((console.warn("AudioStream unavailable"), undefined));
                                  }
                                });
                            
                          }), localUser, (function (param, channelId, peer, peerId, stream) {
                            return Belt_HashMapString.set(CollaborationContext.globalAudioConnectionState, peerId, stream);
                          }), undefined, undefined, undefined, undefined, color, undefined);
                    Debug.assignToWindowForDeveloperDebug("lastSharedChannel", sharedChannel);
                    sharedChannel.document.getText("monaco");
                    var __x = localAudioStreamPromise.current;
                    __x.then(function (audioStream) {
                          if (audioStream !== undefined) {
                            Utils.$$Audio.monitorAudio(Caml_option.valFromOption(audioStream), (function ($$event) {
                                    var floats = $$event.inputBuffer.getChannelData(0);
                                    var max = floats.reduce((function (acc, next) {
                                            if (acc < next) {
                                              return next;
                                            } else {
                                              return acc;
                                            }
                                          }), 0) * 100 | 0;
                                    return CollaborationContext.setLocalStateField(sharedChannel.provider, "audioVolumeLevel", max);
                                  }));
                            return Promise.resolve(undefined);
                          } else {
                            CollaborationContext.setLocalStateField(sharedChannel.provider, "audioVolumeLevel", 0);
                            return Promise.resolve((console.warn("AudioStream unavailable for volume monitoring"), undefined));
                          }
                        });
                    var shouldConnect = sharedChannel.provider.shouldConnect;
                    if (shouldConnect) {
                      sharedChannel.provider.connect();
                    }
                    sharedChannel.provider.awareness.on("change", (function (_updates, _transactionOrigin) {
                            return Curry._1(tickVectorClock, undefined);
                          }));
                    return sharedChannel;
                  }),
                globalState: CollaborationContext.globalConnectionState,
                updateLocalPosition: (function (channelId, position) {
                    return Belt_Option.forEach(Belt_HashMapString.get(CollaborationContext.globalConnectionState, channelId), (function (sharedChannel) {
                                  sharedChannel.provider.awareness.setLocalStateField("position", position);
                                  
                                }));
                  }),
                getSharedChannelState: (function (id) {
                    return Belt_Option.map(Belt_HashMapString.get(CollaborationContext.globalConnectionState, id), (function (sharedChannel) {
                                  var awareness = sharedChannel.provider.awareness;
                                  return [
                                          awareness.clientID,
                                          awareness.getStates()
                                        ];
                                }));
                  }),
                vectorClock: vectorClock.current,
                getAudioStream: (function (id) {
                    return Belt_HashMapString.get(CollaborationContext.globalAudioConnectionState, id);
                  }),
                getSharedMap: (function (channelId, id) {
                    var sharedChannel = Belt_HashMapString.get(CollaborationContext.globalConnectionState, channelId);
                    if (sharedChannel !== undefined) {
                      return Caml_option.some(sharedChannel.document.getMap(id));
                    }
                    
                  }),
                updateConnectSourceActionId: (function (channelId, sourceActionId) {
                    return Belt_Option.forEach(Belt_HashMapString.get(CollaborationContext.globalConnectionState, channelId), (function (sharedChannel) {
                                  sharedChannel.provider.awareness.setLocalStateField("connectSourceActionId", Js_undefined.fromOption(sourceActionId));
                                  
                                }));
                  })
              },
              children: React.createElement(PackageList.make, {
                    oneGraphApp: data.oneGraph.app.fragmentRefs,
                    authTokensRef: Belt_Option.map(data.me.oneGraph, (function (r) {
                            return r.fragmentRefs;
                          })),
                    schema: schema
                  })
            });
}

var Inner = {
  make: Studio$Inner
};

function Studio(Props) {
  var schema = Props.schema;
  return React.createElement("div", undefined, React.createElement("div", {
                  style: {
                    color: "white"
                  }
                }, React.createElement(React.Suspense, {
                      children: React.createElement(ErrorBoundary.make, {
                            fallback: (function (errors) {
                                console.log("Fallback errors", errors);
                                return React.createElement("div", undefined, "Something went wrong");
                              }),
                            onError: (function (errors) {
                                console.log("Errors: ", errors);
                                
                              }),
                            children: React.createElement(Studio$Inner, {
                                  appId: RelayEnv.appId,
                                  schema: schema
                                })
                          }),
                      fallback: React.createElement("div", undefined, "Loading OneGraph packages...")
                    })));
}

var sharedStateUpdateFps = 30;

var make = Studio;

export {
  Query ,
  sharedStateUpdateFps ,
  sharedStateUpdateFpsMs ,
  Inner ,
  make ,
  
}
/* Hooks Not a pure module */
