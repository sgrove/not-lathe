// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$Promise from "reason-promise/src/js/promise.mjs";
import * as RelayEnv from "../RelayEnv.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PackageList from "./PackageList.mjs";
import * as ErrorBoundary from "./ErrorBoundary.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Hooks from "react-relay/hooks";
import * as StudioQuery_graphql from "../__generated__/StudioQuery_graphql.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(StudioQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(StudioQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(StudioQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(StudioQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, StudioQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, StudioQuery_graphql.node, StudioQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: 0,
                        _0: StudioQuery_graphql.Internal.convertResponse(res),
                        [Symbol.for("name")]: "Ok"
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: 1,
                        _0: err,
                        [Symbol.for("name")]: "Error"
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  return $$Promise.map(Hooks.fetchQuery(environment, StudioQuery_graphql.node, StudioQuery_graphql.Internal.convertVariables(variables), {
                    networkCacheConfig: networkCacheConfig,
                    fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
                  }).toPromise(), (function (res) {
                return StudioQuery_graphql.Internal.convertResponse(res);
              }));
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(StudioQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(StudioQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(StudioQuery_graphql.node, StudioQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = StudioQuery_graphql.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function Studio$Inner(Props) {
  var appId = Props.appId;
  var schema = Props.schema;
  var data = use({
        appId: appId
      }, undefined, undefined, undefined, undefined);
  return React.createElement(PackageList.make, {
              oneGraphApp: data.oneGraph.app.fragmentRefs,
              authTokensRef: Belt_Option.map(data.me.oneGraph, (function (r) {
                      return r.fragmentRefs;
                    })),
              schema: schema
            });
}

var Inner = {
  make: Studio$Inner
};

function Studio(Props) {
  var schema = Props.schema;
  return React.createElement("div", undefined, React.createElement("div", {
                  style: {
                    color: "white"
                  }
                }, React.createElement(React.Suspense, {
                      children: React.createElement(ErrorBoundary.make, {
                            fallback: (function (errors) {
                                console.log("Fallback errors", errors);
                                return React.createElement("div", undefined, "Something went wrong");
                              }),
                            onError: (function (errors) {
                                console.log("Errors: ", errors);
                                
                              }),
                            children: React.createElement(Studio$Inner, {
                                  appId: RelayEnv.appId,
                                  schema: schema
                                })
                          }),
                      fallback: React.createElement("div", undefined, "Loading lessons and pull requests...")
                    })));
}

var make = Studio;

export {
  Query ,
  Inner ,
  make ,
  
}
/* react Not a pure module */
