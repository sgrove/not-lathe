// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Debug from "../Debug.mjs";
import * as Icons from "../Icons.mjs";
import * as React from "react";
import * as Compiler from "../lib/Compiler.mjs";
import * as Prettier from "prettier";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as OneGraphRe from "../OneGraphRe.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import ParserBabel from "prettier/parser-babel";

function GitHubDirectPush(Props) {
  var schema = Props.schema;
  var chain = Props.chain;
  var savedChainId = Props.savedChainId;
  var oneGraphAuth = Props.oneGraphAuth;
  var loadedChain = chain;
  var appId = oneGraphAuth.appId;
  var remoteChainCalls = Belt_Option.flatMap(savedChainId, (function (chainId) {
          return Belt_Option.map(loadedChain, (function (loadedChain) {
                        return Compiler.Exports.remoteChainCalls(schema, appId, chainId, loadedChain);
                      }));
        }));
  var match = React.useState(function () {
        return {
                repoList: undefined,
                selectedRepo: undefined,
                repoProjectGuess: undefined
              };
      });
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          Debug.assignToWindowForDeveloperDebug("guessGitHubProject", OneGraphRe.GitHub.guessProjectType);
          var __x = OneGraphRe.basicFetchOneGraphPersistedQuery("993a3e2d-de45-44fa-bff4-0c58c6150cbf", undefined, "fc839e0e-982b-43fc-b59b-3c080e17480a", undefined, "ExecuteChainMutation_look_ma_connections");
          __x.then(function (result) {
                return Promise.resolve(Belt_Option.forEach(Caml_option.undefined_to_opt(result.data), (function (data) {
                                  try {
                                    return Belt_Option.forEach(Belt_Array.getBy(data.oneGraph.executeChain.results, (function (result) {
                                                      return result.request.id === "ListMyRepositories";
                                                    })), (function (request) {
                                                  var repos = Caml_array.get(request.result, 0).data.me.github.repositories.edges;
                                                  return Curry._1(setState, (function (oldState) {
                                                                return {
                                                                        repoList: repos,
                                                                        selectedRepo: oldState.selectedRepo,
                                                                        repoProjectGuess: oldState.repoProjectGuess
                                                                      };
                                                              }));
                                                }));
                                  }
                                  catch (raw_ex){
                                    var ex = Caml_js_exceptions.internalToOCamlException(raw_ex);
                                    console.warn("Exception while fetching GitHub Repo list", ex);
                                    return ;
                                  }
                                })));
              });
          
        }), []);
  return Belt_Option.mapWithDefault(state.repoList, null, (function (repoList) {
                var match = state.selectedRepo;
                var match$1 = state.repoProjectGuess;
                var tmp;
                if (savedChainId !== undefined) {
                  if (match !== undefined) {
                    if (match$1 !== undefined) {
                      var target = typeof match$1 === "number" ? (
                          match$1 !== 0 ? "next.js project" : "repo"
                        ) : (
                          match$1._0 === "any" ? "Netlify functions" : "next.js project"
                        );
                      tmp = React.createElement(React.Fragment, undefined, React.createElement(Icons.Login.make, {
                                className: "inline-block",
                                color: Comps.colors["gray-6"]
                              }), "  Push chain to " + target + " on GitHub");
                    } else {
                      tmp = "Determining project type...";
                    }
                  } else {
                    tmp = "Select a GitHub repository";
                  }
                } else {
                  tmp = "Persist chain to push to GitHub";
                }
                return React.createElement(React.Fragment, undefined, React.createElement("div", {
                                className: " text-center",
                                style: {
                                  color: Comps.colors["gray-4"]
                                }
                              }, "- OR -"), React.createElement(Comps.Select.make, {
                                children: null,
                                onChange: (function ($$event) {
                                    var id = $$event.target.value;
                                    var repo = Belt_Option.flatMap(state.repoList, (function (repoList) {
                                            return Belt_Array.getBy(repoList, (function (repoEdge) {
                                                          return repoEdge.node.id === id;
                                                        }));
                                          }));
                                    Curry._1(setState, (function (oldState) {
                                            return {
                                                    repoList: oldState.repoList,
                                                    selectedRepo: repo,
                                                    repoProjectGuess: undefined
                                                  };
                                          }));
                                    return Belt_Option.forEach(repo, (function (repo) {
                                                  var match = repo.node.nameWithOwner.split("/");
                                                  if (match.length !== 2) {
                                                    return ;
                                                  }
                                                  var owner = match[0];
                                                  var name = match[1];
                                                  var __x = OneGraphRe.GitHub.guessProjectType(owner, name);
                                                  __x.then(function (result) {
                                                        return Promise.resolve(Curry._1(setState, (function (oldState) {
                                                                          return {
                                                                                  repoList: oldState.repoList,
                                                                                  selectedRepo: oldState.selectedRepo,
                                                                                  repoProjectGuess: result
                                                                                };
                                                                        })));
                                                      });
                                                  
                                                }));
                                  }),
                                style: {
                                  margin: "10px",
                                  width: "100%"
                                },
                                value: Belt_Option.mapWithDefault(state.selectedRepo, "", (function (repo) {
                                        return repo.node.id;
                                      }))
                              }, React.createElement("option", {
                                    value: ""
                                  }), Belt_Array.map(repoList, (function (repoEdge) {
                                      return React.createElement("option", {
                                                  key: repoEdge.node.id,
                                                  value: repoEdge.node.id
                                                }, repoEdge.node.nameWithOwner);
                                    }))), React.createElement(Comps.Button.make, {
                                onClick: (function (param) {
                                    return Belt_Option.forEach(remoteChainCalls, (function (remoteChainCalls) {
                                                  return Belt_Option.forEach(state.repoProjectGuess, (function (repoProjectGuess) {
                                                                return Belt_Option.forEach(state.selectedRepo, (function (repo) {
                                                                              var match = repo.node.nameWithOwner.split("/");
                                                                              if (match.length !== 2) {
                                                                                return ;
                                                                              }
                                                                              var owner = match[0];
                                                                              var name = match[1];
                                                                              var content;
                                                                              var exit = 0;
                                                                              if (typeof repoProjectGuess === "number") {
                                                                                if (repoProjectGuess !== 0) {
                                                                                  exit = 1;
                                                                                } else {
                                                                                  content = Prettier.format(remoteChainCalls.fetch, {
                                                                                        parser: "babel",
                                                                                        plugins: [ParserBabel],
                                                                                        singleQuote: true
                                                                                      });
                                                                                }
                                                                              } else if (repoProjectGuess._0 === "any") {
                                                                                var code = remoteChainCalls.netlify.code;
                                                                                var fmt = function (s) {
                                                                                  return Prettier.format(s, {
                                                                                              parser: "babel",
                                                                                              plugins: [ParserBabel],
                                                                                              singleQuote: true
                                                                                            });
                                                                                };
                                                                                Debug.assignToWindowForDeveloperDebug("nextjscode", code);
                                                                                Debug.assignToWindowForDeveloperDebug("pfmt", fmt);
                                                                                content = Prettier.format(code, {
                                                                                      parser: "babel",
                                                                                      plugins: [ParserBabel],
                                                                                      singleQuote: true
                                                                                    });
                                                                              } else {
                                                                                exit = 1;
                                                                              }
                                                                              if (exit === 1) {
                                                                                var code$1 = remoteChainCalls.nextjs.code;
                                                                                var fmt$1 = function (s) {
                                                                                  return Prettier.format(s, {
                                                                                              parser: "babel",
                                                                                              plugins: [ParserBabel],
                                                                                              singleQuote: true
                                                                                            });
                                                                                };
                                                                                Debug.assignToWindowForDeveloperDebug("nextjscode", code$1);
                                                                                Debug.assignToWindowForDeveloperDebug("pfmt", fmt$1);
                                                                                content = Prettier.format(code$1, {
                                                                                      parser: "babel",
                                                                                      plugins: [ParserBabel],
                                                                                      singleQuote: true
                                                                                    });
                                                                              }
                                                                              var path = typeof repoProjectGuess === "number" ? (
                                                                                  repoProjectGuess !== 0 ? remoteChainCalls.nextjs.path : "src/" + chain.name + ".js"
                                                                                ) : (
                                                                                  repoProjectGuess._0 === "any" ? remoteChainCalls.netlify.path : remoteChainCalls.nextjs.path
                                                                                );
                                                                              var file = {
                                                                                path: path,
                                                                                content: content,
                                                                                mode: "100644"
                                                                              };
                                                                              var __x = Curry._1(OneGraphRe.GitHub.pushToRepo, {
                                                                                    owner: owner,
                                                                                    name: name,
                                                                                    branch: "onegraph-studio",
                                                                                    treeFiles: [file],
                                                                                    message: "Automated push for " + chain.name,
                                                                                    acceptOverrides: true
                                                                                  });
                                                                              __x.then(function (result) {
                                                                                    return Promise.resolve((console.log("GitHub push result: ", result), undefined));
                                                                                  });
                                                                              
                                                                            }));
                                                              }));
                                                }));
                                  }),
                                className: "w-full",
                                children: tmp,
                                disabled: Belt_Option.isNone(state.repoProjectGuess) || Belt_Option.isNone(savedChainId)
                              }));
              }));
}

var make = GitHubDirectPush;

export {
  make ,
  
}
/* Comps Not a pure module */
