// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Icons from "../Icons.mjs";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RequestValueCache from "../RequestValueCache.mjs";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RequestValueCacheProvider from "./RequestValueCacheProvider.mjs";
import * as NodeLabel_oneGraphStudioChainAction_graphql from "../__generated__/NodeLabel_oneGraphStudioChainAction_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(NodeLabel_oneGraphStudioChainAction_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(NodeLabel_oneGraphStudioChainAction_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(NodeLabel_oneGraphStudioChainAction_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return NodeLabel_oneGraphStudioChainAction_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var OneGraphStudioChainActionFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function NodeLabel(Props) {
  var actionRef = Props.actionRef;
  var onEditAction = Props.onEditAction;
  var onDragStart = Props.onDragStart;
  var action = use(actionRef);
  var services = Belt_Array.keepMap(action.services, (function (service) {
          return Belt_Option.map(Utils.serviceImageUrl(undefined, undefined, service), (function (param) {
                        var friendlyServiceName = param[1];
                        return React.createElement("img", {
                                    key: friendlyServiceName,
                                    className: "shadow-lg rounded-full",
                                    style: {
                                      pointerEvents: "none"
                                    },
                                    title: friendlyServiceName,
                                    alt: friendlyServiceName,
                                    height: "16px",
                                    src: param[0],
                                    width: "16px"
                                  });
                      }));
        }));
  React.useContext(ConnectionContext.context);
  var requestValueCache = React.useContext(RequestValueCacheProvider.context);
  var match = React.useState(function () {
        return false;
      });
  var setMouseHover = match[1];
  var result = RequestValueCache.get(requestValueCache, action.id);
  var dataState = result !== undefined ? (
      Belt_Option.mapWithDefault(Caml_option.undefined_to_opt(result.errors), 0, (function (prim) {
              return prim.length;
            })) > 0 ? "error" : "data"
    ) : "mocked";
  var indicatorClass = dataState === "data" ? "data-indicator" : (
      dataState === "error" ? "error-indicator" : "mocked-indicator"
    );
  var domRef = React.useRef(null);
  return React.createElement("div", {
              ref: domRef,
              className: "flex align-middle items-center min-w-max flex-row items-stretch ",
              onContextMenu: (function ($$event) {
                  
                }),
              onMouseDown: (function ($$event) {
                  if ($$event.altKey) {
                    $$event.preventDefault();
                    $$event.stopPropagation();
                    return Curry._3(onDragStart, $$event, action, domRef.current);
                  }
                  
                }),
              onMouseEnter: (function (param) {
                  return Curry._1(setMouseHover, (function (param) {
                                return true;
                              }));
                }),
              onMouseLeave: (function (param) {
                  return Curry._1(setMouseHover, (function (param) {
                                return false;
                              }));
                })
            }, React.createElement("div", {
                  className: indicatorClass + " pl-2",
                  style: {
                    width: "4px"
                  },
                  title: "Data for this block is mocked"
                }), React.createElement("div", {
                  className: "flex flex-row items-center justify-end font-mono"
                }, React.createElement("div", {
                      className: "m-2"
                    }, services), React.createElement("div", {
                      className: "flex-1 inline-block "
                    }, action.name), React.createElement("div", {
                      className: "p-2 hover:shadow-lg rounded-md hover:border-gray-300 cursor-pointer m-0",
                      onClick: (function ($$event) {
                          $$event.preventDefault();
                          return Curry._1(onEditAction, action.id);
                        })
                    }, React.createElement(Icons.GraphQL.make, {
                          color: Comps.colors["gray-4"],
                          width: "16px",
                          height: "16px"
                        }))));
}

var make = NodeLabel;

export {
  OneGraphStudioChainActionFragment ,
  make ,
  
}
/* Comps Not a pure module */
