// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Icons from "../Icons.mjs";
import * as React from "react";
import * as Graphql from "graphql";
import * as GraphQLJs from "../bindings/GraphQLJs.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as GraphQLPreview from "../bindings/GraphQLPreview.mjs";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as VariableInspector from "./VariableInspector.mjs";
import CopyToClipboard from "copy-to-clipboard";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ActionInspector_oneGraphStudioChainAction_graphql from "../__generated__/ActionInspector_oneGraphStudioChainAction_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(ActionInspector_oneGraphStudioChainAction_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ActionInspector_oneGraphStudioChainAction_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ActionInspector_oneGraphStudioChainAction_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ActionInspector_oneGraphStudioChainAction_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var OneGraphStudioChainActionFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function ActionInspector(Props) {
  var actionRef = Props.actionRef;
  var schema = Props.schema;
  var actionNameIdPairs = Props.actionNameIdPairs;
  var onDeleteEdge = Props.onDeleteEdge;
  var onInspectAction = Props.onInspectAction;
  var onInspectActionCode = Props.onInspectActionCode;
  var action = use(actionRef);
  var definition = Caml_array.get(Graphql.parse(action.graphQLOperation).definitions, 0);
  var definitionResultData = {};
  React.useContext(ConnectionContext.context);
  React.useState(function () {
        
      });
  var match = React.useState(function () {
        
      });
  React.useState(function () {
        return {};
      });
  React.useState(function () {
        
      });
  var domRef = React.useRef(null);
  React.useState(function () {
        
      });
  var match$1 = React.useState(function () {
        return "inspector";
      });
  var setOpenedTab = match$1[1];
  var openedTab = match$1[0];
  var upstreamActions = Belt_Array.keepMap(action.upstreamActionIds, (function (upstreamActionId) {
          var upstreamAction = Belt_Array.getBy(actionNameIdPairs, (function (param) {
                  return param[0] === upstreamActionId;
                }));
          return Belt_Option.map(upstreamAction, (function (param) {
                        var actionId = param[0];
                        return React.createElement("article", {
                                    key: actionId + upstreamActionId,
                                    className: "m-2"
                                  }, React.createElement("div", {
                                        className: "flex justify-between items-center cursor-pointer p-1 rounded-sm"
                                      }, React.createElement("span", {
                                            className: "font-semibold text-sm font-mono pl-2",
                                            style: {
                                              color: Comps.colors["green-4"]
                                            },
                                            onClick: (function (param) {
                                                return Curry._1(onInspectAction, actionId);
                                              })
                                          }, param[1]), React.createElement(Comps.Button.make, {
                                            onClick: (function ($$event) {
                                                $$event.stopPropagation();
                                                $$event.preventDefault();
                                                return Curry._2(onDeleteEdge, actionId, upstreamActionId);
                                              }),
                                            className: "og-secodary-button",
                                            children: null
                                          }, React.createElement(Icons.Trash.make, {
                                                className: "inline mr-2",
                                                color: Comps.colors["gray-4"]
                                              }), "Remove Dependency")));
                      }));
        }));
  return React.createElement("div", {
              ref: domRef,
              className: "max-h-full overflow-y-scroll"
            }, React.createElement("div", {
                  className: "w-full flex ml-2 border-b justify-around",
                  style: {
                    borderColor: Comps.colors["gray-1"]
                  }
                }, React.createElement("button", {
                      className: "flex justify-center flex-grow cursor-pointer p-1 " + (
                        openedTab === "inspector" ? " inspector-tab-active" : " inspector-tab-inactive"
                      ),
                      onClick: (function (param) {
                          return Curry._1(setOpenedTab, (function (param) {
                                        return "inspector";
                                      }));
                        })
                    }, React.createElement(Icons.Remote.make, {
                          className: "",
                          color: openedTab === "inspector" ? Comps.colors["blue-1"] : Comps.colors["gray-6"],
                          width: "24px",
                          height: "24px"
                        }), React.createElement("span", {
                          className: "mx-2"
                        }, "Action")), React.createElement("button", {
                      className: "flex justify-center flex-grow cursor-pointer p-1 rounded-sm " + (
                        openedTab === "form" ? " inspector-tab-active" : " inspector-tab-inactive"
                      ),
                      onClick: (function (param) {
                          return Curry._1(setOpenedTab, (function (param) {
                                        return "form";
                                      }));
                        })
                    }, React.createElement(Icons.List.make, {
                          color: openedTab === "form" ? Comps.colors["blue-1"] : Comps.colors["gray-6"],
                          width: "24px",
                          height: "24px"
                        }), React.createElement("span", {
                          className: "mx-2"
                        }, "Try Action"))), openedTab === "inspector" ? React.createElement(React.Fragment, undefined, action.actionVariables.length !== 0 ? React.createElement(Comps.CollapsableSection.make, {
                          title: "Variable Settings",
                          children: Belt_Array.map(action.actionVariables, (function (variable) {
                                  return React.createElement(VariableInspector.make, {
                                              variableRef: variable.fragmentRefs
                                            });
                                }))
                        }) : null, action.actionVariables.length !== 0 ? React.createElement(Comps.CollapsableSection.make, {
                          title: React.createElement(React.Fragment, undefined, "Computed Variable Preview", React.createElement("button", {
                                    onClick: (function ($$event) {
                                        $$event.preventDefault();
                                        $$event.stopPropagation();
                                        return Curry._1(onInspectActionCode, action.id);
                                      })
                                  }, React.createElement(Icons.Help.make, {
                                        className: "inline-block ml-2"
                                      }))),
                          children: React.createElement(Comps.Pre.make, {
                                children: Belt_Option.getWithDefault(Belt_Option.map(match[0], (function (r) {
                                            var tmp;
                                            tmp = r._0;
                                            return JSON.stringify(tmp, null, 2);
                                          })), "Nothing")
                              })
                        }) : null, action.upstreamActionIds.length !== 0 ? React.createElement(Comps.CollapsableSection.make, {
                          title: "Upstream Actions",
                          children: upstreamActions
                        }) : null, React.createElement(Comps.CollapsableSection.make, {
                        title: "GraphQL Structure",
                        children: React.createElement("div", {
                              className: "my-2 mx-4 p-2 rounded-sm text-gray-200 overflow-scroll",
                              style: {
                                backgroundColor: Comps.colors["gray-8"],
                                maxHeight: "150px"
                              }
                            }, React.createElement(GraphQLPreview.make, {
                                  requestId: action.id,
                                  schema: schema,
                                  definition: definition,
                                  fragmentDefinitions: GraphQLJs.Mock.gatherFragmentDefinitions({
                                        operationDoc: ""
                                      }),
                                  onCopy: (function (param) {
                                      var dataPath = param.path.join("?.");
                                      var fullPath = "payload." + dataPath;
                                      CopyToClipboard(fullPath);
                                      
                                    }),
                                  definitionResultData: definitionResultData
                                }))
                      })) : React.createElement(Comps.CollapsableSection.make, {
                    title: "Execute block",
                    children: null
                  }, null, React.createElement(Comps.Pre.make, {
                        children: Belt_Option.mapWithDefault({
                              cachedResult: "nothing here"
                            }, "Nothing", (function (json) {
                                return JSON.stringify(json, null, 2);
                              }))
                      })));
}

var make = ActionInspector;

export {
  OneGraphStudioChainActionFragment ,
  make ,
  
}
/* Comps Not a pure module */
