// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PackageInfo from "./PackageInfo.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as PackageActivity2Subscription_graphql from "../__generated__/PackageActivity2Subscription_graphql.mjs";

function subscribe(environment, variables, onCompleted, onError, onNext, updater, param) {
  var tmp = {
    subscription: PackageActivity2Subscription_graphql.node,
    variables: PackageActivity2Subscription_graphql.Internal.convertVariables(variables)
  };
  if (onCompleted !== undefined) {
    tmp.onCompleted = Caml_option.valFromOption(onCompleted);
  }
  if (onError !== undefined) {
    tmp.onError = Caml_option.valFromOption(onError);
  }
  var tmp$1 = onNext !== undefined ? (function (r) {
        return Curry._1(onNext, PackageActivity2Subscription_graphql.Internal.convertResponse(r));
      }) : undefined;
  if (tmp$1 !== undefined) {
    tmp.onNext = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = updater !== undefined ? (function (store, r) {
        return Curry._2(updater, store, PackageActivity2Subscription_graphql.Internal.convertResponse(r));
      }) : undefined;
  if (tmp$2 !== undefined) {
    tmp.updater = Caml_option.valFromOption(tmp$2);
  }
  return RelayRuntime.requestSubscription(environment, tmp);
}

var PackageActivitySubscription = {
  Types: undefined,
  subscribe: subscribe
};

function PackageActivity(Props) {
  var relayEnv = RescriptRelay.useEnvironmentFromContext(undefined);
  var match = React.useState(function () {
        
      });
  var setSubscriptionData = match[1];
  var subscriptionData = match[0];
  var match$1 = React.useState(function () {
        return 0;
      });
  var setSubscriptionEventCount = match$1[1];
  React.useEffect((function () {
          var disposable = subscribe(relayEnv, undefined, undefined, undefined, (function (response) {
                  Curry._1(setSubscriptionData, (function (param) {
                          return response;
                        }));
                  return Curry._1(setSubscriptionEventCount, (function (count) {
                                return count + 1 | 0;
                              }));
                }), undefined, undefined);
          return (function (param) {
                    disposable.dispose();
                    
                  });
        }), []);
  var tmp;
  if (subscriptionData !== undefined) {
    var match$2 = subscriptionData.npm.allPublishActivity;
    if (match$2 !== undefined) {
      tmp = React.createElement(React.Fragment, undefined, React.createElement(PackageInfo.make, {
                npmPackage: match$2.package.fragmentRefs
              }));
    } else {
      console.log("Sub event: ", subscriptionData);
      tmp = React.createElement(React.Fragment, undefined, "" + match$1[0] + " events received: ", React.createElement("pre", undefined, JSON.stringify(subscriptionData, null, 2)));
    }
  } else {
    tmp = "Waiting for a subscription event...";
  }
  return React.createElement(React.Fragment, undefined, "PackageActivitySubscription_result: ", tmp);
}

var make = PackageActivity;

export {
  PackageActivitySubscription ,
  make ,
  
}
/* react Not a pure module */
