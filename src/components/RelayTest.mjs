// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$Promise from "reason-promise/src/js/promise.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PackageInfo from "./PackageInfo.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Hooks from "react-relay/hooks";
import * as RelayTestQuery_graphql from "../__generated__/RelayTestQuery_graphql.mjs";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";

function use(variables, fetchPolicy, fetchKey, networkCacheConfig, param) {
  var data = Hooks.useLazyLoadQuery(RelayTestQuery_graphql.node, RescriptRelay_Internal.internal_cleanObjectFromUndefinedRaw(RelayTestQuery_graphql.Internal.convertVariables(variables)), {
        fetchKey: fetchKey,
        fetchPolicy: RescriptRelay.mapFetchPolicy(fetchPolicy),
        networkCacheConfig: networkCacheConfig
      });
  return RescriptRelay_Internal.internal_useConvertedValue(RelayTestQuery_graphql.Internal.convertResponse, data);
}

function useLoader(param) {
  var match = Hooks.useQueryLoader(RelayTestQuery_graphql.node);
  var loadQueryFn = match[1];
  var loadQuery = React.useMemo((function () {
          return function (param, param$1, param$2, param$3) {
            return Curry._2(loadQueryFn, RelayTestQuery_graphql.Internal.convertVariables(param), {
                        fetchPolicy: param$1,
                        networkCacheConfig: param$2
                      });
          };
        }), [loadQueryFn]);
  return [
          Caml_option.nullable_to_opt(match[0]),
          loadQuery,
          match[2]
        ];
}

function $$fetch(environment, variables, onResult, networkCacheConfig, fetchPolicy, param) {
  Hooks.fetchQuery(environment, RelayTestQuery_graphql.node, RelayTestQuery_graphql.Internal.convertVariables(variables), {
          networkCacheConfig: networkCacheConfig,
          fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
        }).subscribe({
        next: (function (res) {
            return Curry._1(onResult, {
                        TAG: 0,
                        _0: RelayTestQuery_graphql.Internal.convertResponse(res),
                        [Symbol.for("name")]: "Ok"
                      });
          }),
        error: (function (err) {
            return Curry._1(onResult, {
                        TAG: 1,
                        _0: err,
                        [Symbol.for("name")]: "Error"
                      });
          })
      });
  
}

function fetchPromised(environment, variables, networkCacheConfig, fetchPolicy, param) {
  return $$Promise.map(Hooks.fetchQuery(environment, RelayTestQuery_graphql.node, RelayTestQuery_graphql.Internal.convertVariables(variables), {
                    networkCacheConfig: networkCacheConfig,
                    fetchPolicy: RescriptRelay.mapFetchQueryFetchPolicy(fetchPolicy)
                  }).toPromise(), (function (res) {
                return RelayTestQuery_graphql.Internal.convertResponse(res);
              }));
}

function usePreloaded(queryRef, param) {
  var data = Hooks.usePreloadedQuery(RelayTestQuery_graphql.node, queryRef);
  return RescriptRelay_Internal.internal_useConvertedValue(RelayTestQuery_graphql.Internal.convertResponse, data);
}

function retain(environment, variables) {
  var operationDescriptor = RelayRuntime.createOperationDescriptor(RelayTestQuery_graphql.node, RelayTestQuery_graphql.Internal.convertVariables(variables));
  return environment.retain(operationDescriptor);
}

var Query_makeVariables = RelayTestQuery_graphql.Utils.makeVariables;

var Query = {
  makeVariables: Query_makeVariables,
  Types: undefined,
  use: use,
  useLoader: useLoader,
  $$fetch: $$fetch,
  fetchPromised: fetchPromised,
  usePreloaded: usePreloaded,
  retain: retain
};

function RelayTest(Props) {
  var packageName = Props.packageName;
  console.log("Hi there!");
  var queryData = use({
        name: packageName
      }, undefined, undefined, undefined, undefined);
  var match = queryData.npm.package;
  var message;
  if (match !== undefined) {
    var match$1 = match.downloads.lastMonth;
    message = match$1 !== undefined ? React.createElement(React.Fragment, undefined, "Package downloads for " + packageName + ": " + String(match$1.count), React.createElement(PackageInfo.make, {
                npmPackage: match.fragmentRefs
              })) : "No package found";
  } else {
    message = "No package found";
  }
  return React.createElement("h1", undefined, message);
}

var make = RelayTest;

export {
  Query ,
  make ,
  
}
/* react Not a pure module */
