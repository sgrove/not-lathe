// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$String from "rescript/lib/es6/string.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as PopUpPicker from "./PopUpPicker.mjs";
import * as Belt_SortArray from "rescript/lib/es6/belt_SortArray.js";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as DragConnectorLine from "./DragConnectorLine.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ConnectionVisualizer_chainActions_graphql from "../__generated__/ConnectionVisualizer_chainActions_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(ConnectionVisualizer_chainActions_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ConnectionVisualizer_chainActions_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ConnectionVisualizer_chainActions_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ConnectionVisualizer_chainActions_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function ConnectionVisualizer(Props) {
  var chainRef = Props.chainRef;
  var chain = use(chainRef);
  var connectionDrag = React.useContext(ConnectionContext.context);
  var clearConnectionDrag = function (param) {
    console.log("Clearing connection drag, was ", connectionDrag.value);
    return Curry._1(connectionDrag.onPotentialVariableSourceConnect, /* Empty */0);
  };
  var dragInfo = connectionDrag.value;
  if (typeof dragInfo === "number") {
    return null;
  }
  switch (dragInfo.TAG | 0) {
    case /* StartedSource */0 :
        return React.createElement(DragConnectorLine.make, {
                    source: dragInfo.sourceDom,
                    onDragEnd: connectionDrag.onDragEnd,
                    invert: false
                  });
    case /* StartedTarget */1 :
        if (dragInfo.target.TAG === /* Variable */0) {
          return React.createElement(DragConnectorLine.make, {
                      source: dragInfo.sourceDom,
                      onDragEnd: connectionDrag.onDragEnd,
                      invert: true
                    });
        } else {
          return null;
        }
    case /* CompletedPendingVariable */2 :
        var match = dragInfo.windowPosition;
        var y = match[1];
        var x = match[0];
        var targetActionId = dragInfo.targetActionId;
        var action = Belt_Array.getBy(chain.actions, (function (action) {
                return action.id === targetActionId;
              }));
        if (action !== undefined) {
          var variableDependencies = Belt_SortArray.stableSortBy(action.actionVariables, (function (a, b) {
                  return $$String.compare(a.name, b.name);
                }));
          var onClick = function (intent) {
            if (typeof intent === "number") {
              if (intent !== 0) {
                return Curry._1(connectionDrag.onPotentialActionSourceConnect, {
                            TAG: 3,
                            sourceActionId: dragInfo.sourceActionId,
                            sourceDom: dragInfo.sourceDom,
                            target: {
                              TAG: 2,
                              targetActionId: action.id,
                              [Symbol.for("name")]: "Action"
                            },
                            windowPosition: [
                              x,
                              y
                            ],
                            [Symbol.for("name")]: "Completed"
                          });
              } else {
                return Curry._1(connectionDrag.onPotentialVariableSourceConnect, /* Empty */0);
              }
            }
            var variableTarget_variableId = intent.variable.id;
            var variableTarget = {
              actionId: targetActionId,
              variableId: variableTarget_variableId
            };
            return Curry._1(connectionDrag.onPotentialVariableSourceConnect, {
                        TAG: 3,
                        sourceActionId: dragInfo.sourceActionId,
                        sourceDom: dragInfo.sourceDom,
                        target: {
                          TAG: 0,
                          _0: variableTarget,
                          [Symbol.for("name")]: "Variable"
                        },
                        windowPosition: [
                          x,
                          y
                        ],
                        [Symbol.for("name")]: "Completed"
                      });
          };
          return React.createElement(PopUpPicker.make, {
                      top: y,
                      left: x,
                      children: null,
                      onClose: (function (param) {
                          return onClick(/* Clear */0);
                        })
                    }, React.createElement("div", {
                          className: "cursor-pointer graphql-structure-preview-entry",
                          onClick: (function (param) {
                              return onClick(/* ActionToAction */1);
                            })
                        }, "Connect source to target"), React.createElement("span", {
                          style: {
                            color: Comps.colors["gray-2"]
                          }
                        }, "Or, directly connect destination variable: "), React.createElement("ul", undefined, Belt_Array.map(variableDependencies, (function (variableDependency) {
                                return React.createElement("li", {
                                            key: variableDependency.name,
                                            className: "cursor-pointer graphql-structure-preview-entry",
                                            onClick: (function (param) {
                                                return onClick({
                                                            variable: variableDependency,
                                                            [Symbol.for("name")]: "ActionToVariable"
                                                          });
                                              })
                                          }, "$" + variableDependency.name);
                              }))));
        }
        clearConnectionDrag(undefined);
        return null;
    case /* Completed */3 :
    case /* CompletedWithTypeMismatch */4 :
        return null;
    
  }
}

var make = ConnectionVisualizer;

export {
  Fragment ,
  make ,
  
}
/* Comps Not a pure module */
