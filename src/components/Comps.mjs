// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Icons from "../Icons.mjs";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var colors = {
  "gray-1": "#333333",
  "gray-2": "#4F4F4F",
  "gray-3": "#828282",
  "gray-4": "#BDBDBD",
  "gray-5": "#E0E0E0",
  "gray-6": "#F2F2F2",
  "gray-7": "#282B30",
  "gray-8": "#17191C",
  "gray-9": "#1D1F22",
  "gray-10": "#26292D",
  "gray-11": "#DFDFDF",
  "gray-12": "#171717",
  "gray-13": "#34373C",
  "gray-14": "#1b1d1f",
  "gray-15": "#282C31",
  "gray-16": "#2E3237",
  "gray-17": "#3B434B",
  red: "#EB5757",
  orange: "#F2994A",
  yellow: "#F2C94C",
  "green-1": "#219653",
  "green-2": "#27AE60",
  "green-3": "#6FCF97",
  "green-4": "#1BBE83",
  "green-5": "#2FD0BD",
  "green-6": "#47FFC8",
  "green-7": "#17423D",
  "blue-1": "#2F80ED",
  "blue-2": "#2D9CDB",
  "blue-3": "#56CCF2",
  "brown-1": "#8B4D14",
  "purple-1": "#9B51E0",
  "purple-2": "#BB6BD9"
};

var defaultStyle = {
  color: colors["gray-6"]
};

function Comps$Header(Props) {
  var onClick = Props.onClick;
  var styleOpt = Props.style;
  var children = Props.children;
  var style = styleOpt !== undefined ? Caml_option.valFromOption(styleOpt) : ({});
  var tmp = {
    className: "font-bold mx-2 p-2",
    style: Object.assign({}, defaultStyle, style)
  };
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("div", tmp, children);
}

var Header = {
  defaultStyle: defaultStyle,
  make: Comps$Header
};

var defaultStyle$1 = {};

function Comps$Button(Props) {
  var onClick = Props.onClick;
  var styleOpt = Props.style;
  var classNameOpt = Props.className;
  var type_Opt = Props.type_;
  var children = Props.children;
  var disabled = Props.disabled;
  var style = styleOpt !== undefined ? Caml_option.valFromOption(styleOpt) : ({});
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var type_ = type_Opt !== undefined ? type_Opt : "button";
  var tmp = {
    className: className + " og-primary-button active:outline-none focus:outline-none text-white text-sm py-2.5 px-5 rounded-md m-2",
    style: Object.assign({}, defaultStyle$1, style),
    type: type_
  };
  if (disabled !== undefined) {
    tmp.disabled = Caml_option.valFromOption(disabled);
  }
  if (onClick !== undefined) {
    tmp.onClick = Caml_option.valFromOption(onClick);
  }
  return React.createElement("button", tmp, children);
}

var Button = {
  defaultStyle: defaultStyle$1,
  make: Comps$Button
};

var defaultStyle$2 = {
  backgroundColor: colors["gray-8"],
  maxHeight: "150px"
};

function Comps$Pre(Props) {
  var children = Props.children;
  var classNameOpt = Props.className;
  var onChange = Props.onChange;
  var styleOpt = Props.style;
  var selectAllOpt = Props.selectAll;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var style = styleOpt !== undefined ? Caml_option.valFromOption(styleOpt) : defaultStyle$2;
  var selectAll = selectAllOpt !== undefined ? selectAllOpt : false;
  var tmp = {
    className: className + " my-2 mx-4 p-2 rounded-sm text-gray-200 overflow-scroll " + (
      selectAll ? "select-all" : ""
    ),
    style: style
  };
  if (onChange !== undefined) {
    tmp.onChange = Caml_option.valFromOption(onChange);
  }
  return React.createElement("pre", tmp, children);
}

var Pre = {
  defaultStyle: defaultStyle$2,
  make: Comps$Pre
};

var defaultStyle$3 = {};

function Comps$Select(Props) {
  var children = Props.children;
  var disabled = Props.disabled;
  var classNameOpt = Props.className;
  var onChange = Props.onChange;
  var styleOpt = Props.style;
  var value = Props.value;
  var className = classNameOpt !== undefined ? classNameOpt : "comp-select";
  var style = styleOpt !== undefined ? Caml_option.valFromOption(styleOpt) : ({});
  var tmp = {
    className: className,
    style: Object.assign({}, defaultStyle$3, style)
  };
  if (disabled !== undefined) {
    tmp.disabled = Caml_option.valFromOption(disabled);
  }
  if (value !== undefined) {
    tmp.value = Caml_option.valFromOption(value);
  }
  if (onChange !== undefined) {
    tmp.onChange = Caml_option.valFromOption(onChange);
  }
  return React.createElement("select", tmp, children);
}

var Select = {
  defaultStyle: defaultStyle$3,
  make: Comps$Select
};

var activeTabStyle = {
  borderBottomColor: colors["blue-1"],
  borderBottomWidth: "3px"
};

var inactiveTabStyle = {};

function Comps$Modal(Props) {
  var children = Props.children;
  return React.createElement("div", {
              className: "flex items-center justify-center absolute left-0 bottom-0 w-full h-full bg-gray-800 bg-opacity-60",
              style: {
                zIndex: "9999"
              }
            }, React.createElement("div", {
                  className: "rounded-lg w-4/5 h-4/5",
                  style: {
                    backgroundColor: colors["gray-8"]
                  }
                }, React.createElement("div", {
                      className: "flex flex-col p-1 h-full"
                    }, React.createElement("div", {
                          className: "flex h-full"
                        }, children))));
}

var Modal = {
  make: Comps$Modal
};

function Comps$Tab(Props) {
  var onClick = Props.onClick;
  var id = Props.id;
  var title = Props.title;
  var activeTab = Props.activeTab;
  return React.createElement("button", {
              className: "flex justify-center flex-grow cursor-pointer p-1 rounded-sm outline-none " + (
                Caml_obj.caml_equal(activeTab, id) ? " inspector-tab-active" : " inspector-tab-inactive"
              ),
              onClick: (function (param) {
                  return Curry._1(onClick, id);
                })
            }, React.createElement(Icons.List.make, {
                  color: Caml_obj.caml_equal(activeTab, id) ? colors["blue-1"] : colors["gray-6"],
                  width: "24px",
                  height: "24px"
                }), React.createElement("span", {
                  className: "mx-2"
                }, title));
}

var Tab = {
  make: Comps$Tab
};

function Comps$Tabs(Props) {
  var tabs = Props.tabs;
  var activeTab = Props.activeTab;
  var onSelect = Props.onSelect;
  var tabEls = Belt_Array.map(tabs, (function (param) {
          return React.createElement(Comps$Tab, {
                      onClick: onSelect,
                      id: param[0],
                      title: param[1],
                      activeTab: activeTab
                    });
        }));
  return React.createElement("div", {
              className: "w-full flex ml-2 border-b justify-around",
              style: {
                borderColor: colors["gray-1"]
              }
            }, tabEls);
}

var Tabs = {
  make: Comps$Tabs
};

var defaultStyle$4 = {
  backgroundColor: colors["gray-8"],
  maxHeight: "150px"
};

function Comps$Textarea(Props) {
  var classNameOpt = Props.className;
  var onChange = Props.onChange;
  var styleOpt = Props.style;
  var selectAllOpt = Props.selectAll;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var style = styleOpt !== undefined ? Caml_option.valFromOption(styleOpt) : defaultStyle$4;
  var selectAll = selectAllOpt !== undefined ? selectAllOpt : false;
  var tmp = {
    className: className + " my-2 mx-4 p-2 rounded-sm text-gray-200 overflow-scroll " + (
      selectAll ? "select-all" : ""
    ),
    style: style
  };
  if (onChange !== undefined) {
    tmp.onChange = Caml_option.valFromOption(onChange);
  }
  return React.createElement("textarea", tmp);
}

var Textarea = {
  defaultStyle: defaultStyle$4,
  make: Comps$Textarea
};

export {
  colors ,
  Header ,
  Button ,
  Pre ,
  Select ,
  activeTabStyle ,
  inactiveTabStyle ,
  Modal ,
  Tab ,
  Tabs ,
  Textarea ,
  
}
/* defaultStyle Not a pure module */
