// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Yjs from "yjs";
import * as Card from "../Card.mjs";
import * as Help from "./Help.mjs";
import * as Uuid from "uuid";
import * as Chain from "../Chain.mjs";
import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Debug from "../Debug.mjs";
import * as Icons from "../Icons.mjs";
import * as React from "react";
import * as Graphql from "graphql";
import * as Compiler from "../lib/Compiler.mjs";
import * as RelayEnv from "../RelayEnv.mjs";
import * as Prettier from "prettier";
import * as GraphQLJs from "../bindings/GraphQLJs.mjs";
import * as Inspector from "./Inspector.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as OneGraphRe from "../OneGraphRe.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChainCanvas from "./ChainCanvas.mjs";
import * as ActionSearch from "./ActionSearch.mjs";
import * as GraphQLUtils from "../bindings/GraphQLUtils.mjs";
import * as OneGraphAuth from "../bindings/OneGraphAuth.mjs";
import * as ScriptEditor from "./ScriptEditor.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RequestValueCache from "../RequestValueCache.mjs";
import * as Hooks from "react-relay/hooks";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import ReactResizePanel from "react-resize-panel";
import * as ActionGraphQLEditor from "./ActionGraphQLEditor.mjs";
import * as ReactFlowRenderer from "react-flow-renderer";
import * as CollaborationContext from "./CollaborationContext.mjs";
import * as ConnectionVisualizer from "./ConnectionVisualizer.mjs";
import ParserBabel from "prettier/parser-babel";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as ChainEditor_chain_graphql from "../__generated__/ChainEditor_chain_graphql.mjs";
import * as RequestValueCacheProvider from "./RequestValueCacheProvider.mjs";
import * as ChainEditorSubscription_graphql from "../__generated__/ChainEditorSubscription_graphql.mjs";
import * as ChainEditor_createChainActionMutation_graphql from "../__generated__/ChainEditor_createChainActionMutation_graphql.mjs";
import * as ChainEditor_updateChainActionMutation_graphql from "../__generated__/ChainEditor_updateChainActionMutation_graphql.mjs";
import * as ChainEditor_AddActionDependencyIdsMutation_graphql from "../__generated__/ChainEditor_AddActionDependencyIdsMutation_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(ChainEditor_chain_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ChainEditor_chain_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ChainEditor_chain_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ChainEditor_chain_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function subscribe(environment, variables, onCompleted, onError, onNext, updater, param) {
  var tmp = {
    subscription: ChainEditorSubscription_graphql.node,
    variables: ChainEditorSubscription_graphql.Internal.convertVariables(variables)
  };
  if (onCompleted !== undefined) {
    tmp.onCompleted = Caml_option.valFromOption(onCompleted);
  }
  if (onError !== undefined) {
    tmp.onError = Caml_option.valFromOption(onError);
  }
  var tmp$1 = onNext !== undefined ? (function (r) {
        return Curry._1(onNext, ChainEditorSubscription_graphql.Internal.convertResponse(r));
      }) : undefined;
  if (tmp$1 !== undefined) {
    tmp.onNext = Caml_option.valFromOption(tmp$1);
  }
  var tmp$2 = updater !== undefined ? (function (store, r) {
        return Curry._2(updater, store, ChainEditorSubscription_graphql.Internal.convertResponse(r));
      }) : undefined;
  if (tmp$2 !== undefined) {
    tmp.updater = Caml_option.valFromOption(tmp$2);
  }
  return RelayRuntime.requestSubscription(environment, tmp);
}

var Subscription_makeVariables = ChainEditorSubscription_graphql.Utils.makeVariables;

var Subscription = {
  makeVariables: Subscription_makeVariables,
  Types: undefined,
  subscribe: subscribe
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: ChainEditor_AddActionDependencyIdsMutation_graphql.node,
              variables: ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(ChainEditor_AddActionDependencyIdsMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: ChainEditor_AddActionDependencyIdsMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var AddActionDependencyIds_make_oneGraphAddActionDependencyIdsInput = ChainEditor_AddActionDependencyIdsMutation_graphql.Utils.make_oneGraphAddActionDependencyIdsInput;

var AddActionDependencyIds_makeVariables = ChainEditor_AddActionDependencyIdsMutation_graphql.Utils.makeVariables;

var AddActionDependencyIds_make_response_oneGraph_addActionDependencyIds_action = ChainEditor_AddActionDependencyIdsMutation_graphql.Utils.make_response_oneGraph_addActionDependencyIds_action;

var AddActionDependencyIds_make_response_oneGraph_addActionDependencyIds = ChainEditor_AddActionDependencyIdsMutation_graphql.Utils.make_response_oneGraph_addActionDependencyIds;

var AddActionDependencyIds_make_response_oneGraph = ChainEditor_AddActionDependencyIdsMutation_graphql.Utils.make_response_oneGraph;

var AddActionDependencyIds_makeOptimisticResponse = ChainEditor_AddActionDependencyIdsMutation_graphql.Utils.makeOptimisticResponse;

var AddActionDependencyIds = {
  make_oneGraphAddActionDependencyIdsInput: AddActionDependencyIds_make_oneGraphAddActionDependencyIdsInput,
  makeVariables: AddActionDependencyIds_makeVariables,
  make_response_oneGraph_addActionDependencyIds_action: AddActionDependencyIds_make_response_oneGraph_addActionDependencyIds_action,
  make_response_oneGraph_addActionDependencyIds: AddActionDependencyIds_make_response_oneGraph_addActionDependencyIds,
  make_response_oneGraph: AddActionDependencyIds_make_response_oneGraph,
  makeOptimisticResponse: AddActionDependencyIds_makeOptimisticResponse,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function commitMutation$1(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: ChainEditor_createChainActionMutation_graphql.node,
              variables: ChainEditor_createChainActionMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, ChainEditor_createChainActionMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? ChainEditor_createChainActionMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, ChainEditor_createChainActionMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$2(param) {
  var match = Hooks.useMutation(ChainEditor_createChainActionMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, ChainEditor_createChainActionMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? ChainEditor_createChainActionMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, ChainEditor_createChainActionMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: ChainEditor_createChainActionMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var CreateChainActionMutation_make_oneGraphCreateChainActionSubVariableInput = ChainEditor_createChainActionMutation_graphql.Utils.make_oneGraphCreateChainActionSubVariableInput;

var CreateChainActionMutation_make_oneGraphCreateChainActionInput = ChainEditor_createChainActionMutation_graphql.Utils.make_oneGraphCreateChainActionInput;

var CreateChainActionMutation_makeVariables = ChainEditor_createChainActionMutation_graphql.Utils.makeVariables;

var CreateChainActionMutation_make_response_oneGraph_createChainAction_chain = ChainEditor_createChainActionMutation_graphql.Utils.make_response_oneGraph_createChainAction_chain;

var CreateChainActionMutation_make_response_oneGraph_createChainAction = ChainEditor_createChainActionMutation_graphql.Utils.make_response_oneGraph_createChainAction;

var CreateChainActionMutation_make_response_oneGraph = ChainEditor_createChainActionMutation_graphql.Utils.make_response_oneGraph;

var CreateChainActionMutation_makeOptimisticResponse = ChainEditor_createChainActionMutation_graphql.Utils.makeOptimisticResponse;

var CreateChainActionMutation = {
  make_oneGraphCreateChainActionSubVariableInput: CreateChainActionMutation_make_oneGraphCreateChainActionSubVariableInput,
  make_oneGraphCreateChainActionInput: CreateChainActionMutation_make_oneGraphCreateChainActionInput,
  makeVariables: CreateChainActionMutation_makeVariables,
  make_response_oneGraph_createChainAction_chain: CreateChainActionMutation_make_response_oneGraph_createChainAction_chain,
  make_response_oneGraph_createChainAction: CreateChainActionMutation_make_response_oneGraph_createChainAction,
  make_response_oneGraph: CreateChainActionMutation_make_response_oneGraph,
  makeOptimisticResponse: CreateChainActionMutation_makeOptimisticResponse,
  Types: undefined,
  commitMutation: commitMutation$1,
  use: use$2
};

function commitMutation$2(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: ChainEditor_updateChainActionMutation_graphql.node,
              variables: ChainEditor_updateChainActionMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, ChainEditor_updateChainActionMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? ChainEditor_updateChainActionMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, ChainEditor_updateChainActionMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$3(param) {
  var match = Hooks.useMutation(ChainEditor_updateChainActionMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, ChainEditor_updateChainActionMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? ChainEditor_updateChainActionMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, ChainEditor_updateChainActionMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: ChainEditor_updateChainActionMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var UpdateChainActionMutation_make_oneGraphUpdateChainActionInput = ChainEditor_updateChainActionMutation_graphql.Utils.make_oneGraphUpdateChainActionInput;

var UpdateChainActionMutation_makeVariables = ChainEditor_updateChainActionMutation_graphql.Utils.makeVariables;

var UpdateChainActionMutation_make_response_oneGraph_updateChainAction_chain = ChainEditor_updateChainActionMutation_graphql.Utils.make_response_oneGraph_updateChainAction_chain;

var UpdateChainActionMutation_make_response_oneGraph_updateChainAction = ChainEditor_updateChainActionMutation_graphql.Utils.make_response_oneGraph_updateChainAction;

var UpdateChainActionMutation_make_response_oneGraph = ChainEditor_updateChainActionMutation_graphql.Utils.make_response_oneGraph;

var UpdateChainActionMutation_makeOptimisticResponse = ChainEditor_updateChainActionMutation_graphql.Utils.makeOptimisticResponse;

var UpdateChainActionMutation = {
  make_oneGraphUpdateChainActionInput: UpdateChainActionMutation_make_oneGraphUpdateChainActionInput,
  makeVariables: UpdateChainActionMutation_makeVariables,
  make_response_oneGraph_updateChainAction_chain: UpdateChainActionMutation_make_response_oneGraph_updateChainAction_chain,
  make_response_oneGraph_updateChainAction: UpdateChainActionMutation_make_response_oneGraph_updateChainAction,
  make_response_oneGraph: UpdateChainActionMutation_make_response_oneGraph,
  makeOptimisticResponse: UpdateChainActionMutation_makeOptimisticResponse,
  Types: undefined,
  commitMutation: commitMutation$2,
  use: use$3
};

var context = React.createContext(undefined);

var provider = context.Provider;

function ChainEditor$InspectedContextProvider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var InspectedContextProvider = {
  context: context,
  provider: provider,
  make: ChainEditor$InspectedContextProvider
};

function chainResultToRequestValueCache(chainExecutionResults) {
  return Belt_Array.reduce(chainExecutionResults.data.oneGraph.executeChain.results, {}, (function (acc, next) {
                var reqId = next.request.id;
                var result = Belt_Option.flatMap(Belt_Array.get(next.result, 0), (function (prim) {
                        if (prim == null) {
                          return ;
                        } else {
                          return Caml_option.some(prim);
                        }
                      }));
                if (result !== undefined) {
                  acc[reqId] = result;
                }
                return acc;
              }));
}

function persistChain(config, schema, param, chain, onComplete) {
  var appId = config.oneGraphAppId;
  var webhookUrl = Compiler.Exports.webhookUrlForAppId(config.oneGraphAppId);
  var compiled = Curry._1(Compiler.transformChain(chain)(schema), webhookUrl);
  var targetChain = compiled.chains[0];
  var freeVariables = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
          return exposed.exposedName;
        }));
  return OneGraphRe.persistQuery(appId, config.persistQueryToken, compiled.operationDoc, freeVariables, config.chainAccessToken, undefined, (function (results) {
                try {
                  var docId = results.data.oneGraph.createPersistedQuery.persistedQuery.id;
                  Chain.saveToLocalStorage(chain);
                  return Curry._1(onComplete, docId);
                }
                catch (raw_ex){
                  var ex = Caml_js_exceptions.internalToOCamlException(raw_ex);
                  console.error("Error saving chain locally", ex);
                  return ;
                }
              }));
}

function ChainEditor$Main(Props) {
  var schema = Props.schema;
  var initialChain = Props.initialChain;
  var config = Props.config;
  var oneGraphAuth = Props.oneGraphAuth;
  var onClose = Props.onClose;
  var initialTrace = Props.trace;
  var helpOpen = Props.helpOpen;
  var match = React.useState(function () {
        return [];
      });
  var setMissingAuthServices = match[1];
  var match$1 = use$1(undefined);
  var addDependencyId = match$1[0];
  var collaborationContext = React.useContext(CollaborationContext.context);
  var match$2 = React.useState(function () {
        return {
                card: Card.watchTwitterFollower,
                schema: schema,
                chainResult: undefined,
                chainExecutionResults: undefined,
                connectionDragState: /* Empty */0,
                actions: Card.blocks,
                inspected: /* Nothing */0,
                actionEditState: /* Nothing */0,
                actionSearchOpen: false,
                scriptEditor: {
                  isOpen: true,
                  editor: undefined,
                  monaco: undefined
                },
                savedChainId: undefined,
                requestValueCache: RequestValueCache.make(undefined),
                debugUIItems: [],
                subscriptionClient: undefined,
                trace: initialTrace
              };
      });
  var setState = match$2[1];
  var state = match$2[0];
  var setDragState = function (connectionDrag) {
    return Curry._1(setState, (function (oldState) {
                  return {
                          card: oldState.card,
                          schema: oldState.schema,
                          chainResult: oldState.chainResult,
                          chainExecutionResults: oldState.chainExecutionResults,
                          connectionDragState: connectionDrag,
                          actions: oldState.actions,
                          inspected: oldState.inspected,
                          actionEditState: oldState.actionEditState,
                          actionSearchOpen: oldState.actionSearchOpen,
                          scriptEditor: oldState.scriptEditor,
                          savedChainId: oldState.savedChainId,
                          requestValueCache: oldState.requestValueCache,
                          debugUIItems: oldState.debugUIItems,
                          subscriptionClient: oldState.subscriptionClient,
                          trace: oldState.trace
                        };
                }));
  };
  React.useEffect((function () {
          return (function (param) {
                    
                  });
        }), []);
  var connectSourceToTargetActions = function (sourceActionId, targetActionId) {
    Curry.app(addDependencyId, [
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          undefined,
          {
            input: {
              addActionDependencyIds: [sourceActionId],
              actionId: targetActionId
            }
          },
          undefined,
          undefined
        ]);
    
  };
  var compilerChain = Compiler.CompilerFragment.use(initialChain.fragmentRefs);
  console.log("TS def for compiler chain: ", Compiler.typeScriptDefinition(schema, compilerChain), compilerChain);
  var onPotentialVariableSourceConnect = function (connectionDrag) {
    console.log("onPotentialVariableSourceConnect, old=>new:  ", state.connectionDragState, connectionDrag);
    return setDragState(connectionDrag);
  };
  var onPotentialActionSourceConnect = function (connectionDrag) {
    console.log("onPotentialActionSourceConnect, old=>new:  ", state.connectionDragState, connectionDrag);
    var tmp;
    if (typeof connectionDrag === "number" || connectionDrag.TAG !== /* Completed */3) {
      tmp = /* Empty */0;
    } else {
      var match = connectionDrag.target;
      if (match.TAG === /* Action */2) {
        connectSourceToTargetActions(connectionDrag.sourceActionId, match.targetActionId);
        tmp = /* Empty */0;
      } else {
        tmp = /* Empty */0;
      }
    }
    return setDragState(tmp);
  };
  var match$3 = ReactFlowRenderer.useZoomPanHelper();
  var fitView = match$3.fitView;
  var onInspectAction = function (actionId) {
    var inspected = {
      TAG: 0,
      _0: actionId,
      [Symbol.for("name")]: "Action"
    };
    return Curry._1(setState, (function (oldState) {
                  return {
                          card: oldState.card,
                          schema: oldState.schema,
                          chainResult: oldState.chainResult,
                          chainExecutionResults: oldState.chainExecutionResults,
                          connectionDragState: oldState.connectionDragState,
                          actions: oldState.actions,
                          inspected: inspected,
                          actionEditState: oldState.actionEditState,
                          actionSearchOpen: oldState.actionSearchOpen,
                          scriptEditor: oldState.scriptEditor,
                          savedChainId: oldState.savedChainId,
                          requestValueCache: oldState.requestValueCache,
                          debugUIItems: oldState.debugUIItems,
                          subscriptionClient: oldState.subscriptionClient,
                          trace: oldState.trace
                        };
                }));
  };
  React.useEffect((function () {
          if (initialChain.actions.length > 3) {
            Curry._1(fitView, {
                  padding: 0.2,
                  includeHiddenNodes: false
                });
          }
          
        }), [initialChain.actions.length]);
  var trace = state.trace;
  var definitionResultData = trace !== undefined ? chainResultToRequestValueCache(trace.trace) : state.requestValueCache;
  var onExecuteAction = function (actionId, variables, authToken) {
    console.log("onExecuteAction: ", actionId, variables, authToken);
    var action = Belt_Array.getBy(initialChain.actions, (function (action) {
            return action.id === actionId;
          }));
    return Belt_Option.forEach(action, (function (action) {
                  var ast = Graphql.parse(action.graphqlOperation);
                  var operationName = Caml_array.get(ast.definitions, 0).name.value;
                  var chainFragments = Belt_Array.keepMap(initialChain.actions, (function (action) {
                            var match = action.graphqlOperationKind;
                            if (match === "FRAGMENT") {
                              return action.graphqlOperation;
                            }
                            
                          })).join("\n\n");
                  var fullDoc = (action.graphqlOperation + "\n\n" + chainFragments).trim();
                  console.log("Config oneGraphAuth: ", oneGraphAuth);
                  var oneGraphAuth$1 = Belt_Option.getWithDefault(Belt_Option.flatMap(authToken, (function (authToken) {
                              var tempAuth = OneGraphAuth.create({
                                    appId: config.oneGraphAppId,
                                    saveAuthToStorage: false
                                  });
                              Belt_Option.forEach(tempAuth, (function (tempAuth) {
                                      var accessToken = {
                                        accessToken: authToken
                                      };
                                      tempAuth.setToken(accessToken);
                                      
                                    }));
                              return tempAuth;
                            })), oneGraphAuth);
                  console.log("Used oneGraphAuth: ", oneGraphAuth$1);
                  var promise = OneGraphRe.fetchOneGraph(oneGraphAuth$1, fullDoc, operationName, Caml_option.some(variables));
                  promise.then(function (result) {
                        return Promise.resolve(Curry._1(setState, (function (oldState) {
                                          RequestValueCache.set(oldState.requestValueCache, actionId, result);
                                          var newOne = RequestValueCache.copy(oldState.requestValueCache);
                                          return {
                                                  card: oldState.card,
                                                  schema: oldState.schema,
                                                  chainResult: oldState.chainResult,
                                                  chainExecutionResults: oldState.chainExecutionResults,
                                                  connectionDragState: oldState.connectionDragState,
                                                  actions: oldState.actions,
                                                  inspected: oldState.inspected,
                                                  actionEditState: oldState.actionEditState,
                                                  actionSearchOpen: oldState.actionSearchOpen,
                                                  scriptEditor: oldState.scriptEditor,
                                                  savedChainId: oldState.savedChainId,
                                                  requestValueCache: newOne,
                                                  debugUIItems: oldState.debugUIItems,
                                                  subscriptionClient: oldState.subscriptionClient,
                                                  trace: oldState.trace
                                                };
                                        })));
                      });
                  
                }));
  };
  var match$4 = ScriptEditor.UpdateScriptMutation.use(undefined);
  var persistScript = match$4[0];
  var match$5 = use$2(undefined);
  var createChainAction = match$5[0];
  var match$6 = use$3(undefined);
  var updateChainAction = match$6[0];
  var default_0 = {
    id: initialChain.libraryScript.id,
    filename: initialChain.libraryScript.filename,
    concurrentSource: initialChain.libraryScript.concurrentSource
  };
  var default_1 = initialChain.libraryScript.fragmentRefs;
  var $$default = [
    default_0,
    default_1
  ];
  var actionId = state.inspected;
  var match$7;
  if (typeof actionId === "number" || actionId.TAG !== /* Action */0) {
    match$7 = $$default;
  } else {
    var actionId$1 = actionId._0;
    match$7 = Belt_Option.mapWithDefault(Belt_Array.getBy(initialChain.actions, (function (action) {
                return action.id === actionId$1;
              })), $$default, (function (action) {
            return [
                    {
                      id: action.script.id,
                      filename: action.script.filename,
                      concurrentSource: action.script.concurrentSource
                    },
                    action.script.fragmentRefs
                  ];
          }));
  }
  var editingSource = match$7[0];
  React.useEffect((function () {
          var id = editingSource.id;
          if (editingSource.concurrentSource !== undefined) {
            console.log("Script source already bootstrapped for " + editingSource.filename, editingSource);
          } else {
            console.log("Should initialize empty source");
            var ydocument = new Yjs.Doc();
            var ytext = ydocument.getText("monaco");
            ytext.insert(0, "// Let's get started!");
            var persistScript$1 = function (ydocument, onCompleted) {
              var concurrentSource = CollaborationContext.encodeUint8Array(Yjs.encodeStateAsUpdate(ydocument));
              var textualSource = ydocument.getText("monaco").toString();
              Debug.assignToWindowForDeveloperDebug("ydoc", ydocument);
              Curry.app(persistScript, [
                    undefined,
                    onCompleted,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    {
                      input: {
                        source: {
                          concurrentSource: concurrentSource,
                          textualSource: textualSource
                        },
                        id: id
                      }
                    },
                    undefined,
                    undefined
                  ]);
              
            };
            persistScript$1(ydocument, (function (param, param$1) {
                    console.log("Bootstrapped contents for file");
                    
                  }));
          }
          
        }), [editingSource.id]);
  React.useEffect((function () {
          var concurrentSource = editingSource.concurrentSource;
          if (concurrentSource !== undefined) {
            var channel = Curry._2(collaborationContext.getSharedChannel, initialChain.id, concurrentSource);
            if (channel !== undefined) {
              console.log("Got shared channel for chain: ", initialChain.id);
            } else {
              console.log("No shared channel for ", initialChain.id);
            }
          } else {
            console.log("Unable to get shared channel for chain with empty concurrent source", initialChain.id);
          }
          
        }), [
        editingSource.id,
        editingSource.concurrentSource
      ]);
  var tmp = {
    schema: state.schema,
    script: match$7[1],
    onMount: (function (editor, monaco) {
        return Curry._1(setState, (function (oldState) {
                      var init = oldState.scriptEditor;
                      return {
                              card: oldState.card,
                              schema: oldState.schema,
                              chainResult: oldState.chainResult,
                              chainExecutionResults: oldState.chainExecutionResults,
                              connectionDragState: oldState.connectionDragState,
                              actions: oldState.actions,
                              inspected: oldState.inspected,
                              actionEditState: oldState.actionEditState,
                              actionSearchOpen: oldState.actionSearchOpen,
                              scriptEditor: {
                                isOpen: init.isOpen,
                                editor: Caml_option.some(editor),
                                monaco: Caml_option.some(monaco)
                              },
                              savedChainId: oldState.savedChainId,
                              requestValueCache: oldState.requestValueCache,
                              debugUIItems: oldState.debugUIItems,
                              subscriptionClient: oldState.subscriptionClient,
                              trace: oldState.trace
                            };
                    }));
      })
  };
  var tmp$1 = state.scriptEditor.isOpen ? undefined : "none";
  if (tmp$1 !== undefined) {
    tmp.className = Caml_option.valFromOption(tmp$1);
  }
  var scriptEditor = React.createElement(ScriptEditor.make, tmp);
  var actionSearch = React.createElement(ActionSearch.make, {
        onAdd: (function (param) {
            
          }),
        onInspect: (function (param) {
            
          }),
        onCreate: (function (kind) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chainResult: oldState.chainResult,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  connectionDragState: oldState.connectionDragState,
                                  actions: oldState.actions,
                                  inspected: oldState.inspected,
                                  actionEditState: {
                                    TAG: 0,
                                    _0: ActionGraphQLEditor.makeBlankAction(kind),
                                    [Symbol.for("name")]: "Create"
                                  },
                                  actionSearchOpen: oldState.actionSearchOpen,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems,
                                  subscriptionClient: oldState.subscriptionClient,
                                  trace: oldState.trace
                                };
                        }));
          }),
        onClose: (function (param) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chainResult: oldState.chainResult,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  connectionDragState: oldState.connectionDragState,
                                  actions: oldState.actions,
                                  inspected: oldState.inspected,
                                  actionEditState: oldState.actionEditState,
                                  actionSearchOpen: false,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems,
                                  subscriptionClient: oldState.subscriptionClient,
                                  trace: oldState.trace
                                };
                        }));
          })
      });
  var sidebar = React.createElement(Inspector.make, {
        inspected: state.inspected,
        onReset: (function (param) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chainResult: oldState.chainResult,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  connectionDragState: oldState.connectionDragState,
                                  actions: oldState.actions,
                                  inspected: /* Nothing */0,
                                  actionEditState: oldState.actionEditState,
                                  actionSearchOpen: oldState.actionSearchOpen,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems,
                                  subscriptionClient: oldState.subscriptionClient,
                                  trace: oldState.trace
                                };
                        }));
          }),
        schema: state.schema,
        chainExecutionResults: state.chainExecutionResults,
        onLogin: (function (service) {
            var __x = oneGraphAuth.login(service);
            __x.then(function (param) {
                  var __x = oneGraphAuth.isLoggedIn(service);
                  return __x.then(function (isLoggedIn) {
                              return Promise.resolve(isLoggedIn ? Curry._1(setMissingAuthServices, (function (oldMissingAuthServices) {
                                                  return Belt_Array.keep(oldMissingAuthServices, (function (oldService) {
                                                                return oldService !== service;
                                                              }));
                                                })) : undefined);
                            });
                });
            
          }),
        onInspectActionCode: (function (actionId) {
            console.log("Should load up code for action: ", actionId);
            
          }),
        requestValueCache: state.requestValueCache,
        onInspectAction: onInspectAction,
        oneGraphAuth: oneGraphAuth,
        onClose: onClose,
        onPotentialVariableSourceConnect: onPotentialVariableSourceConnect,
        fragmentRefs: initialChain.fragmentRefs,
        onExecuteAction: onExecuteAction
      });
  var action = state.actionEditState;
  var tmp$2;
  if (typeof action === "number") {
    tmp$2 = null;
  } else if (action.TAG === /* Create */0) {
    var editor = React.createElement(ActionGraphQLEditor.Creator.make, {
          schema: state.schema,
          onClose: (function (param) {
              return Curry._1(setState, (function (oldState) {
                            return {
                                    card: oldState.card,
                                    schema: oldState.schema,
                                    chainResult: oldState.chainResult,
                                    chainExecutionResults: oldState.chainExecutionResults,
                                    connectionDragState: oldState.connectionDragState,
                                    actions: oldState.actions,
                                    inspected: oldState.inspected,
                                    actionEditState: /* Nothing */0,
                                    actionSearchOpen: oldState.actionSearchOpen,
                                    scriptEditor: oldState.scriptEditor,
                                    savedChainId: oldState.savedChainId,
                                    requestValueCache: oldState.requestValueCache,
                                    debugUIItems: oldState.debugUIItems,
                                    subscriptionClient: oldState.subscriptionClient,
                                    trace: oldState.trace
                                  };
                          }));
            }),
          onSave: (function (param, modified) {
              try {
                var opDoc = Graphql.parse(modified.graphqlOperation);
                var variables = Belt_Array.map(GraphQLUtils.getOperationVariables(Belt_Array.getExn(opDoc.definitions, 0)), (function (param) {
                        return {
                                probePath: [],
                                method: "COMPUTED",
                                maxRecur: 0,
                                ifList: "FIRST",
                                ifMissing: "ERROR",
                                graphqlType: param[1],
                                description: undefined,
                                name: param[0]
                              };
                      }));
                Curry.app(createChainAction, [
                      undefined,
                      (function (param, param$1) {
                          return Curry._1(setState, (function (oldState) {
                                        return {
                                                card: oldState.card,
                                                schema: oldState.schema,
                                                chainResult: oldState.chainResult,
                                                chainExecutionResults: oldState.chainExecutionResults,
                                                connectionDragState: oldState.connectionDragState,
                                                actions: oldState.actions,
                                                inspected: oldState.inspected,
                                                actionEditState: /* Nothing */0,
                                                actionSearchOpen: oldState.actionSearchOpen,
                                                scriptEditor: oldState.scriptEditor,
                                                savedChainId: oldState.savedChainId,
                                                requestValueCache: oldState.requestValueCache,
                                                debugUIItems: oldState.debugUIItems,
                                                subscriptionClient: oldState.subscriptionClient,
                                                trace: oldState.trace
                                              };
                                      }));
                        }),
                      undefined,
                      undefined,
                      undefined,
                      undefined,
                      {
                        input: {
                          variables: variables,
                          services: [],
                          graphqlOperationKind: modified.kind,
                          graphqlOperation: modified.graphqlOperation,
                          description: undefined,
                          name: modified.name,
                          chainId: initialChain.id
                        }
                      },
                      undefined,
                      undefined
                    ]);
                return ;
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                console.warn("Exception trying to create action", exn);
                return ;
              }
            }),
          availableFragments: []
        });
    tmp$2 = React.createElement(Comps.Modal.make, {
          children: editor
        });
  } else {
    var actionId$2 = action._0;
    tmp$2 = Belt_Option.mapWithDefault(Belt_Array.getBy(initialChain.actions, (function (action) {
                return action.id === actionId$2;
              })), null, (function (action) {
            var editor = React.createElement(ActionGraphQLEditor.make, {
                  schema: state.schema,
                  onClose: (function (param) {
                      return Curry._1(setState, (function (oldState) {
                                    return {
                                            card: oldState.card,
                                            schema: oldState.schema,
                                            chainResult: oldState.chainResult,
                                            chainExecutionResults: oldState.chainExecutionResults,
                                            connectionDragState: oldState.connectionDragState,
                                            actions: oldState.actions,
                                            inspected: oldState.inspected,
                                            actionEditState: /* Nothing */0,
                                            actionSearchOpen: oldState.actionSearchOpen,
                                            scriptEditor: oldState.scriptEditor,
                                            savedChainId: oldState.savedChainId,
                                            requestValueCache: oldState.requestValueCache,
                                            debugUIItems: oldState.debugUIItems,
                                            subscriptionClient: oldState.subscriptionClient,
                                            trace: oldState.trace
                                          };
                                  }));
                    }),
                  onSave: (function (param, modified) {
                      try {
                        var opDoc = Graphql.parse(modified.graphqlOperation);
                        var name = Belt_Option.getWithDefault(Belt_Array.get(GraphQLJs.operationNames(opDoc), 0), "Untitled");
                        var services = Belt_Array.concatMany(Belt_Array.map(opDoc.definitions, (function (definition) {
                                    return Belt_Array.map(GraphQLUtils.gatherAllReferencedServices(schema, definition), (function (service) {
                                                  return service.slug;
                                                }));
                                  })));
                        Curry.app(updateChainAction, [
                              undefined,
                              (function (param, param$1) {
                                  return Curry._1(setState, (function (oldState) {
                                                return {
                                                        card: oldState.card,
                                                        schema: oldState.schema,
                                                        chainResult: oldState.chainResult,
                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                        connectionDragState: oldState.connectionDragState,
                                                        actions: oldState.actions,
                                                        inspected: oldState.inspected,
                                                        actionEditState: /* Nothing */0,
                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                        scriptEditor: oldState.scriptEditor,
                                                        savedChainId: oldState.savedChainId,
                                                        requestValueCache: oldState.requestValueCache,
                                                        debugUIItems: oldState.debugUIItems,
                                                        subscriptionClient: oldState.subscriptionClient,
                                                        trace: oldState.trace
                                                      };
                                              }));
                                }),
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              {
                                input: {
                                  upstreamActionIds: action.upstreamActionIds,
                                  services: services,
                                  graphqlOperation: modified.graphqlOperation,
                                  description: action.description,
                                  name: name,
                                  id: actionId$2
                                }
                              },
                              undefined,
                              undefined
                            ]);
                        return ;
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        console.warn("Error updating action: ", exn);
                        return ;
                      }
                    }),
                  availableFragments: [],
                  actionRef: action.fragmentRefs
                });
            return React.createElement(Comps.Modal.make, {
                        children: editor
                      });
          }));
  }
  var tmp$3;
  if (helpOpen) {
    var connectionsHelp = Belt_Array.keep(Help.videoTutorials, (function (video) {
            return video.category === /* Connections */0;
          }));
    tmp$3 = React.createElement(Comps.Modal.make, {
          children: React.createElement("div", {
                className: "w-full h-full m-2 bg-gray-900"
              }, React.createElement("h1", {
                    style: {
                      color: Comps.colors["gray-6"]
                    }
                  }, "Draw connections with drag and drop:"), React.createElement("ul", {
                    style: {
                      color: Comps.colors["gray-4"]
                    }
                  }, Belt_Array.map(connectionsHelp, (function (video) {
                          return React.createElement("li", {
                                      key: video.title
                                    }, video.oneLineDescription, React.createElement("a", {
                                          style: {
                                            color: Comps.colors["blue-1"]
                                          },
                                          href: video.link,
                                          target: "_blank"
                                        }, "[Tutorial video]"));
                        }))))
        });
  } else {
    tmp$3 = null;
  }
  return React.createElement("div", {
              style: {
                height: "calc(100vh - 56px)"
              }
            }, React.createElement(RequestValueCacheProvider.make, {
                  value: definitionResultData,
                  children: React.createElement(ChainEditor$InspectedContextProvider, {
                        value: state.inspected,
                        children: React.createElement(ConnectionContext.Provider.make, {
                              value: {
                                onDragStart: (function (connectionDrag) {
                                    if (typeof connectionDrag !== "number" && connectionDrag.TAG === /* StartedSource */0) {
                                      Curry._2(collaborationContext.updateConnectSourceActionId, initialChain.id, connectionDrag.sourceActionId);
                                    }
                                    return setDragState(connectionDrag);
                                  }),
                                onDragEnd: (function (param) {
                                    Curry._2(collaborationContext.updateConnectSourceActionId, initialChain.id, undefined);
                                    return Curry._1(setState, (function (oldState) {
                                                  var match = oldState.connectionDragState;
                                                  var tmp;
                                                  if (typeof match === "number") {
                                                    tmp = /* Empty */0;
                                                  } else {
                                                    switch (match.TAG | 0) {
                                                      case /* CompletedPendingVariable */2 :
                                                      case /* Completed */3 :
                                                          tmp = oldState.connectionDragState;
                                                          break;
                                                      default:
                                                        tmp = /* Empty */0;
                                                    }
                                                  }
                                                  return {
                                                          card: oldState.card,
                                                          schema: oldState.schema,
                                                          chainResult: oldState.chainResult,
                                                          chainExecutionResults: oldState.chainExecutionResults,
                                                          connectionDragState: tmp,
                                                          actions: oldState.actions,
                                                          inspected: oldState.inspected,
                                                          actionEditState: oldState.actionEditState,
                                                          actionSearchOpen: oldState.actionSearchOpen,
                                                          scriptEditor: oldState.scriptEditor,
                                                          savedChainId: oldState.savedChainId,
                                                          requestValueCache: oldState.requestValueCache,
                                                          debugUIItems: oldState.debugUIItems,
                                                          subscriptionClient: oldState.subscriptionClient,
                                                          trace: oldState.trace
                                                        };
                                                }));
                                  }),
                                value: state.connectionDragState,
                                onPotentialScriptSourceConnect: (function (scriptId, sourceActionId, sourceDom, scriptPosition, param) {
                                    return setDragState({
                                                TAG: 3,
                                                sourceActionId: sourceActionId,
                                                sourceDom: sourceDom,
                                                target: {
                                                  TAG: 1,
                                                  scriptId: scriptId,
                                                  scriptPosition: scriptPosition,
                                                  [Symbol.for("name")]: "Script"
                                                },
                                                windowPosition: [
                                                  param[0],
                                                  param[1]
                                                ],
                                                [Symbol.for("name")]: "Completed"
                                              });
                                  }),
                                onPotentialVariableSourceConnect: onPotentialVariableSourceConnect,
                                onPotentialActionSourceConnect: onPotentialActionSourceConnect
                              },
                              children: null
                            }, React.createElement("div", {
                                  className: "flex flex-row flex-nowrap"
                                }, state.actionSearchOpen ? React.createElement(ReactResizePanel, {
                                        direction: "e",
                                        style: {
                                          width: "400px"
                                        },
                                        handleClass: "ResizeHandleHorizontal",
                                        children: React.createElement("div", {
                                              className: "w-full",
                                              style: {
                                                backgroundColor: Comps.colors["gray-9"],
                                                height: "calc(100vh - 56px)"
                                              }
                                            }, actionSearch)
                                      }) : React.createElement("div", {
                                        className: "cursor-pointer",
                                        style: {
                                          color: "white",
                                          width: "25px"
                                        },
                                        onClick: (function (param) {
                                            return Curry._1(setState, (function (oldState) {
                                                          return {
                                                                  card: oldState.card,
                                                                  schema: oldState.schema,
                                                                  chainResult: oldState.chainResult,
                                                                  chainExecutionResults: oldState.chainExecutionResults,
                                                                  connectionDragState: oldState.connectionDragState,
                                                                  actions: oldState.actions,
                                                                  inspected: oldState.inspected,
                                                                  actionEditState: oldState.actionEditState,
                                                                  actionSearchOpen: true,
                                                                  scriptEditor: oldState.scriptEditor,
                                                                  savedChainId: oldState.savedChainId,
                                                                  requestValueCache: oldState.requestValueCache,
                                                                  debugUIItems: oldState.debugUIItems,
                                                                  subscriptionClient: oldState.subscriptionClient,
                                                                  trace: oldState.trace
                                                                };
                                                        }));
                                          })
                                      }, "▹"), React.createElement("div", {
                                      className: "flex-1 overflow-x-hidden"
                                    }, React.createElement("div", {
                                          style: {
                                            height: "calc(50vh - 28px)"
                                          },
                                          onDragEnter: (function ($$event) {
                                              $$event.stopPropagation();
                                              $$event.preventDefault();
                                              var dataTransfer = $$event.dataTransfer;
                                              dataTransfer.dropEffect = "copy";
                                              
                                            }),
                                          onDragOver: (function ($$event) {
                                              $$event.stopPropagation();
                                              $$event.preventDefault();
                                              var dataTransfer = $$event.dataTransfer;
                                              dataTransfer.dropEffect = "copy";
                                              
                                            }),
                                          onDrop: (function ($$event) {
                                              $$event.stopPropagation();
                                              var dataTransfer = $$event.dataTransfer;
                                              dataTransfer.dropEffect = "copy";
                                              var blockId = Curry._1(dataTransfer.getData, "text");
                                              return Belt_Option.forEach(Belt_Array.getBy(state.actions, (function (block) {
                                                                return block.id.toString() === blockId;
                                                              })), (function (block) {
                                                            var ast = Graphql.parse(block.body);
                                                            Belt_Array.map(ast.definitions, (function (definition) {
                                                                    var services = Belt_Array.map(GraphQLUtils.gatherAllReferencedServices(schema, definition), (function (service) {
                                                                            return service.slug;
                                                                          }));
                                                                    var blank = Card.makeBlankBlock("query");
                                                                    var match = definition.operation;
                                                                    return {
                                                                            id: Uuid.v4(),
                                                                            title: definition.name.value,
                                                                            description: blank.description,
                                                                            body: Graphql.print(definition),
                                                                            kind: match !== undefined ? (
                                                                                match === "mutation" ? /* Mutation */1 : (
                                                                                    match === "subscription" ? /* Subscription */2 : /* Query */0
                                                                                  )
                                                                              ) : /* Fragment */3,
                                                                            contributedBy: blank.contributedBy,
                                                                            services: services
                                                                          };
                                                                  }));
                                                            var inspectedReq;
                                                            var inspected = Belt_Option.getWithDefault(Belt_Option.map(inspectedReq, (function (actionId) {
                                                                        return {
                                                                                TAG: 0,
                                                                                _0: actionId,
                                                                                [Symbol.for("name")]: "Action"
                                                                              };
                                                                      })), state.inspected);
                                                            return Curry._1(setState, (function (oldState) {
                                                                          return {
                                                                                  card: oldState.card,
                                                                                  schema: oldState.schema,
                                                                                  chainResult: oldState.chainResult,
                                                                                  chainExecutionResults: oldState.chainExecutionResults,
                                                                                  connectionDragState: oldState.connectionDragState,
                                                                                  actions: oldState.actions,
                                                                                  inspected: inspected,
                                                                                  actionEditState: oldState.actionEditState,
                                                                                  actionSearchOpen: oldState.actionSearchOpen,
                                                                                  scriptEditor: oldState.scriptEditor,
                                                                                  savedChainId: oldState.savedChainId,
                                                                                  requestValueCache: oldState.requestValueCache,
                                                                                  debugUIItems: oldState.debugUIItems,
                                                                                  subscriptionClient: oldState.subscriptionClient,
                                                                                  trace: oldState.trace
                                                                                };
                                                                        }));
                                                          }));
                                            })
                                        }, React.createElement(ChainCanvas.make, {
                                              chainRef: initialChain.fragmentRefs,
                                              onActionInspected: (function (actionId) {
                                                  return Curry._1(setState, (function (oldState) {
                                                                return {
                                                                        card: oldState.card,
                                                                        schema: oldState.schema,
                                                                        chainResult: oldState.chainResult,
                                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                                        connectionDragState: oldState.connectionDragState,
                                                                        actions: oldState.actions,
                                                                        inspected: {
                                                                          TAG: 0,
                                                                          _0: actionId,
                                                                          [Symbol.for("name")]: "Action"
                                                                        },
                                                                        actionEditState: oldState.actionEditState,
                                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                                        scriptEditor: oldState.scriptEditor,
                                                                        savedChainId: oldState.savedChainId,
                                                                        requestValueCache: oldState.requestValueCache,
                                                                        debugUIItems: oldState.debugUIItems,
                                                                        subscriptionClient: oldState.subscriptionClient,
                                                                        trace: oldState.trace
                                                                      };
                                                              }));
                                                }),
                                              onEditAction: (function (actionId) {
                                                  return Curry._1(setState, (function (oldState) {
                                                                return {
                                                                        card: oldState.card,
                                                                        schema: oldState.schema,
                                                                        chainResult: oldState.chainResult,
                                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                                        connectionDragState: oldState.connectionDragState,
                                                                        actions: oldState.actions,
                                                                        inspected: oldState.inspected,
                                                                        actionEditState: {
                                                                          TAG: 1,
                                                                          _0: actionId,
                                                                          [Symbol.for("name")]: "Edit"
                                                                        },
                                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                                        scriptEditor: oldState.scriptEditor,
                                                                        savedChainId: oldState.savedChainId,
                                                                        requestValueCache: oldState.requestValueCache,
                                                                        debugUIItems: oldState.debugUIItems,
                                                                        subscriptionClient: oldState.subscriptionClient,
                                                                        trace: oldState.trace
                                                                      };
                                                              }));
                                                }),
                                              onSelectionCleared: (function (param) {
                                                  return Curry._1(setState, (function (oldState) {
                                                                return {
                                                                        card: oldState.card,
                                                                        schema: oldState.schema,
                                                                        chainResult: oldState.chainResult,
                                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                                        connectionDragState: oldState.connectionDragState,
                                                                        actions: oldState.actions,
                                                                        inspected: /* Nothing */0,
                                                                        actionEditState: oldState.actionEditState,
                                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                                        scriptEditor: oldState.scriptEditor,
                                                                        savedChainId: oldState.savedChainId,
                                                                        requestValueCache: oldState.requestValueCache,
                                                                        debugUIItems: oldState.debugUIItems,
                                                                        subscriptionClient: oldState.subscriptionClient,
                                                                        trace: oldState.trace
                                                                      };
                                                              }));
                                                }),
                                              onConnect: connectSourceToTargetActions
                                            })), React.createElement("div", {
                                          style: {
                                            height: "calc(50vh - 67px)"
                                          }
                                        }, React.createElement("div", {
                                              className: "",
                                              onClick: (function (param) {
                                                  return Curry._1(setState, (function (oldState) {
                                                                var init = oldState.scriptEditor;
                                                                return {
                                                                        card: oldState.card,
                                                                        schema: oldState.schema,
                                                                        chainResult: oldState.chainResult,
                                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                                        connectionDragState: oldState.connectionDragState,
                                                                        actions: oldState.actions,
                                                                        inspected: oldState.inspected,
                                                                        actionEditState: oldState.actionEditState,
                                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                                        scriptEditor: {
                                                                          isOpen: !oldState.scriptEditor.isOpen,
                                                                          editor: init.editor,
                                                                          monaco: init.monaco
                                                                        },
                                                                        savedChainId: oldState.savedChainId,
                                                                        requestValueCache: oldState.requestValueCache,
                                                                        debugUIItems: oldState.debugUIItems,
                                                                        subscriptionClient: oldState.subscriptionClient,
                                                                        trace: oldState.trace
                                                                      };
                                                              }));
                                                })
                                            }, React.createElement(Comps.Header.make, {
                                                  style: {
                                                    backgroundColor: Comps.colors["gray-9"],
                                                    display: "flex",
                                                    marginRight: "0px",
                                                    marginLeft: "0px"
                                                  },
                                                  children: null
                                                }, React.createElement("div", {
                                                      className: "flex-grow"
                                                    }, "Chain JavaScript (" + editingSource.filename + ")"), React.createElement("div", undefined, React.createElement("button", {
                                                          title: "Format code",
                                                          onClick: (function (param) {
                                                              return Belt_Option.forEach(state.scriptEditor.editor, (function (editor) {
                                                                            var script = editor.getValue();
                                                                            Prettier.format(script, {
                                                                                  parser: "babel",
                                                                                  plugins: [ParserBabel],
                                                                                  singleQuote: true
                                                                                });
                                                                            
                                                                          }));
                                                            })
                                                        }, React.createElement(Icons.Prettier.Dark.make, {
                                                              width: "16px",
                                                              height: "16px"
                                                            }))))), scriptEditor)), React.createElement(ReactResizePanel, {
                                      direction: "w",
                                      style: {
                                        width: "400px"
                                      },
                                      handleClass: "ResizeHandleHorizontal",
                                      children: React.createElement("div", {
                                            className: "w-full",
                                            style: {
                                              backgroundColor: Comps.colors["gray-9"],
                                              height: "calc(100vh - 56px)"
                                            }
                                          }, sidebar)
                                    })), tmp$2, React.createElement(ConnectionVisualizer.make, {
                                  chainRef: initialChain.fragmentRefs
                                }))
                      })
                }), tmp$3);
}

var Main = {
  make: ChainEditor$Main
};

function ChainEditor(Props) {
  var schema = Props.schema;
  var chainRefs = Props.chainRefs;
  var config = Props.config;
  var onClose = Props.onClose;
  var trace = Props.trace;
  var helpOpen = Props.helpOpen;
  var environment = RescriptRelay.useEnvironmentFromContext(undefined);
  var initialChain = use(chainRefs);
  React.useEffect((function () {
          var subscription = subscribe(environment, {
                chainId: initialChain.id
              }, undefined, undefined, (function (_data) {
                  
                }), undefined, undefined);
          return (function (param) {
                    console.log("Tearing down subscription...");
                    subscription.dispose();
                    
                  });
        }), []);
  var match = React.useState(function () {
        return OneGraphAuth.create({
                    appId: RelayEnv.appId
                  });
      });
  return Belt_Option.getWithDefault(Belt_Option.map(match[0], (function (oneGraphAuth) {
                    return React.createElement(ReactFlowRenderer.ReactFlowProvider, {
                                children: React.createElement(ChainEditor$Main, {
                                      schema: schema,
                                      initialChain: initialChain,
                                      config: config,
                                      oneGraphAuth: oneGraphAuth,
                                      onClose: onClose,
                                      trace: trace,
                                      helpOpen: helpOpen
                                    })
                              });
                  })), "Loading Chain Editor...");
}

var httpRequest = "\ntype OutgoingHttpResponse {\n  body: String\n  headers: [[String!]!]\n  status: Int!\n}";

var make = ChainEditor;

export {
  Fragment ,
  Subscription ,
  AddActionDependencyIds ,
  CreateChainActionMutation ,
  UpdateChainActionMutation ,
  httpRequest ,
  InspectedContextProvider ,
  chainResultToRequestValueCache ,
  persistChain ,
  Main ,
  make ,
  
}
/* context Not a pure module */
