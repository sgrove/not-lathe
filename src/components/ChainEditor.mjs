// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Yjs from "yjs";
import * as Card from "../Card.mjs";
import * as Help from "./Help.mjs";
import * as Uuid from "uuid";
import * as Acorn from "../bindings/Acorn.mjs";
import * as Chain from "../Chain.mjs";
import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Debug from "../Debug.mjs";
import * as Icons from "../Icons.mjs";
import * as Acorn$1 from "acorn";
import * as React from "react";
import * as Graphql from "graphql";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Compiler from "../lib/Compiler.mjs";
import * as Prettier from "prettier";
import * as GraphQLJs from "../bindings/GraphQLJs.mjs";
import * as Inspector from "./Inspector.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as OneGraphRe from "../OneGraphRe.mjs";
import * as TypeScript from "../bindings/TypeScript.mjs";
import * as Typescript from "typescript";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChainCanvas from "./ChainCanvas.mjs";
import * as SharedRooms from "./SharedRooms.mjs";
import * as ActionSearch from "./ActionSearch.mjs";
import * as GraphQLUtils from "../bindings/GraphQLUtils.mjs";
import * as OneGraphAuth from "../bindings/OneGraphAuth.mjs";
import * as ScriptEditor from "./ScriptEditor.mjs";
import * as ConnectionContext from "./ConnectionContext.mjs";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as RequestValueCache from "../RequestValueCache.mjs";
import * as Hooks from "react-relay/hooks";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";
import ReactResizePanel from "react-resize-panel";
import * as ActionGraphQLEditor from "./ActionGraphQLEditor.mjs";
import * as ReactFlowRenderer from "react-flow-renderer";
import ParserBabel from "prettier/parser-babel";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as RequestValueCacheProvider from "./RequestValueCacheProvider.mjs";
import * as ChainEditor_oneGraphAppPackageChain_graphql from "../__generated__/ChainEditor_oneGraphAppPackageChain_graphql.mjs";
import * as RecordStore from "@insightdotjs-hackers/platform/lib/core/RecordStore";

function use(fRef) {
  var data = Hooks.useFragment(ChainEditor_oneGraphAppPackageChain_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(ChainEditor_oneGraphAppPackageChain_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(ChainEditor_oneGraphAppPackageChain_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return ChainEditor_oneGraphAppPackageChain_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var Fragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function namedGraphQLScalarTypeScriptType(typ) {
  switch (typ) {
    case "Float" :
    case "Int" :
        return "number";
    case "JSON" :
        return "any";
    case "ID" :
    case "String" :
        return "string";
    default:
      return typ;
  }
}

function compileChain(schema, chain) {
  try {
    var compiled = Chain.compileAsObj(chain);
    var parsedOperationDoc = Graphql.parse(compiled.operationDoc);
    var mockedVariables = GraphQLJs.Mock.mockOperationDocVariables(schema, parsedOperationDoc);
    return {
            compiled: compiled,
            variables: mockedVariables
          };
  }
  catch (_ex){
    return ;
  }
}

var context = React.createContext(undefined);

var provider = context.Provider;

function ChainEditor$InspectedContextProvider(Props) {
  var value = Props.value;
  var children = Props.children;
  return React.createElement(provider, {
              value: value,
              children: children
            });
}

var InspectedContextProvider = {
  context: context,
  provider: provider,
  make: ChainEditor$InspectedContextProvider
};

function emptyGraphLevel(level) {
  return {
          nodeCount: 0,
          width: 0,
          nodes: [],
          level: level
        };
}

function chainResultToRequestValueCache(chainExecutionResults) {
  return Belt_Array.reduce(chainExecutionResults.data.oneGraph.executeChain.results, {}, (function (acc, next) {
                var reqId = next.request.id;
                var result = Belt_Option.flatMap(Belt_Array.get(next.result, 0), (function (prim) {
                        if (prim == null) {
                          return ;
                        } else {
                          return Caml_option.some(prim);
                        }
                      }));
                if (result !== undefined) {
                  acc[reqId] = result;
                }
                return acc;
              }));
}

function persistChain(config, schema, param, chain, onComplete) {
  var appId = config.oneGraphAppId;
  var webhookUrl = Compiler.Exports.webhookUrlForAppId(config.oneGraphAppId);
  var compiled = Curry._1(Compiler.transformChain(chain)(schema), webhookUrl);
  var targetChain = compiled.chains[0];
  var freeVariables = Belt_Array.map(targetChain.exposedVariables, (function (exposed) {
          return exposed.exposedName;
        }));
  return OneGraphRe.persistQuery(appId, config.persistQueryToken, compiled.operationDoc, freeVariables, config.chainAccessToken, undefined, (function (results) {
                try {
                  var docId = results.data.oneGraph.createPersistedQuery.persistedQuery.id;
                  Chain.saveToLocalStorage(chain);
                  return Curry._1(onComplete, docId);
                }
                catch (raw_ex){
                  var ex = Caml_js_exceptions.internalToOCamlException(raw_ex);
                  console.error("Error saving chain locally", ex);
                  return ;
                }
              }));
}

function ChainEditor$Main(Props) {
  var schema = Props.schema;
  var initialChain = Props.initialChain;
  var localStorageChain = Props.localStorageChain;
  var oneGraphAuth = Props.oneGraphAuth;
  var onClose = Props.onClose;
  var initialTrace = Props.trace;
  var helpOpen = Props.helpOpen;
  var match = React.useState(function () {
        return [];
      });
  var setMissingAuthServices = match[1];
  var match$1 = React.useState(function () {
        var scriptFunctions;
        try {
          scriptFunctions = Acorn.collectExportedFunctionNames(Acorn$1.parse(localStorageChain.script, {
                    ecmaVersion: 2020,
                    sourceType: "module"
                  }));
        }
        catch (exn){
          scriptFunctions = [];
        }
        return {
                card: Card.watchTwitterFollower,
                schema: schema,
                chainResult: undefined,
                scriptFunctions: scriptFunctions,
                chainExecutionResults: undefined,
                actions: Card.blocks,
                inspected: /* Nothing */0,
                actionEditState: /* Nothing */0,
                actionSearchOpen: false,
                scriptEditor: {
                  isOpen: true,
                  editor: undefined,
                  monaco: undefined
                },
                savedChainId: undefined,
                requestValueCache: RequestValueCache.make(undefined),
                debugUIItems: [],
                connectionDrag: /* Empty */0,
                subscriptionClient: undefined,
                trace: initialTrace,
                insight: {
                  store: new RecordStore.RecordStore(),
                  latestRunId: 0,
                  previousRunId: -1
                }
              };
      });
  var setState = match$1[1];
  var state = match$1[0];
  React.useEffect((function () {
          return (function (param) {
                    
                  });
        }), []);
  var onPotentialVariableSourceConnect = function (connectionDrag) {
    return Curry._1(setState, (function (oldState) {
                  return {
                          card: oldState.card,
                          schema: oldState.schema,
                          chainResult: oldState.chainResult,
                          scriptFunctions: oldState.scriptFunctions,
                          chainExecutionResults: oldState.chainExecutionResults,
                          actions: oldState.actions,
                          inspected: oldState.inspected,
                          actionEditState: oldState.actionEditState,
                          actionSearchOpen: oldState.actionSearchOpen,
                          scriptEditor: oldState.scriptEditor,
                          savedChainId: oldState.savedChainId,
                          requestValueCache: oldState.requestValueCache,
                          debugUIItems: oldState.debugUIItems,
                          connectionDrag: connectionDrag,
                          subscriptionClient: oldState.subscriptionClient,
                          trace: oldState.trace,
                          insight: oldState.insight
                        };
                }));
  };
  var match$2 = ReactFlowRenderer.useZoomPanHelper();
  var fitView = match$2.fitView;
  var onInspectAction = function (actionId) {
    var inspected = {
      TAG: 0,
      _0: actionId,
      [Symbol.for("name")]: "Action"
    };
    return Curry._1(setState, (function (oldState) {
                  return {
                          card: oldState.card,
                          schema: oldState.schema,
                          chainResult: oldState.chainResult,
                          scriptFunctions: oldState.scriptFunctions,
                          chainExecutionResults: oldState.chainExecutionResults,
                          actions: oldState.actions,
                          inspected: inspected,
                          actionEditState: oldState.actionEditState,
                          actionSearchOpen: oldState.actionSearchOpen,
                          scriptEditor: oldState.scriptEditor,
                          savedChainId: oldState.savedChainId,
                          requestValueCache: oldState.requestValueCache,
                          debugUIItems: oldState.debugUIItems,
                          connectionDrag: oldState.connectionDrag,
                          subscriptionClient: oldState.subscriptionClient,
                          trace: oldState.trace,
                          insight: oldState.insight
                        };
                }));
  };
  React.useEffect((function () {
          if (initialChain.actions.length > 3) {
            Curry._1(fitView, {
                  padding: 0.2,
                  includeHiddenNodes: false
                });
          }
          
        }), [initialChain.actions.length]);
  var trace = state.trace;
  var definitionResultData = trace !== undefined ? chainResultToRequestValueCache(trace.trace) : state.requestValueCache;
  var removeRequest = function (oldChain, targetRequest) {
    var newRequests = Belt_Array.keepMap(oldChain.requests, (function (request) {
            if (request.id === targetRequest.id) {
              return ;
            }
            var varDeps = Belt_Array.map(request.variableDependencies, (function (varDep) {
                    var argDep = varDep.dependency;
                    var dependency;
                    switch (argDep.TAG | 0) {
                      case /* ArgumentDependency */0 :
                          var argDep$1 = argDep._0;
                          dependency = {
                            TAG: 0,
                            _0: {
                              functionFromScript: argDep$1.functionFromScript,
                              maxRecur: argDep$1.maxRecur,
                              ifMissing: argDep$1.ifMissing,
                              ifList: argDep$1.ifList,
                              fromRequestIds: Belt_Array.keep(argDep$1.fromRequestIds, (function (id) {
                                      return id !== targetRequest.id;
                                    })),
                              name: argDep$1.name
                            },
                            [Symbol.for("name")]: "ArgumentDependency"
                          };
                          break;
                      case /* Direct */1 :
                      case /* GraphQLProbe */2 :
                          dependency = argDep;
                          break;
                      
                    }
                    return {
                            name: varDep.name,
                            dependency: dependency
                          };
                  }));
            return {
                    id: request.id,
                    variableDependencies: varDeps,
                    operation: request.operation,
                    dependencyRequestIds: Belt_Array.keep(request.dependencyRequestIds, (function (id) {
                            return id !== targetRequest.id;
                          }))
                  };
          }));
    var newScript = Belt_Result.getWithDefault(Compiler.ScriptHelpers.deleteRequestFunctionIfEmpty(undefined, oldChain.script, targetRequest, undefined), oldChain.script).trim();
    return {
            name: oldChain.name,
            description: oldChain.description,
            id: oldChain.id,
            script: newScript,
            scriptDependencies: oldChain.scriptDependencies,
            requests: newRequests,
            blocks: Belt_Array.keep(oldChain.blocks, (function (oldBlock) {
                    return Caml_obj.caml_notequal(oldBlock, targetRequest.operation);
                  })),
            accessToken: oldChain.accessToken,
            traceRetentionPolicy: oldChain.traceRetentionPolicy,
            yjsScript: oldChain.yjsScript
          };
  };
  var removeEdge = function (oldChain, dependencyId, targetRequestId) {
    var newRequests = Belt_Array.map(oldChain.requests, (function (request) {
            if (request.id !== targetRequestId) {
              return request;
            }
            var varDeps = Belt_Array.map(request.variableDependencies, (function (varDep) {
                    var argDep = varDep.dependency;
                    var dependency;
                    switch (argDep.TAG | 0) {
                      case /* ArgumentDependency */0 :
                          var argDep$1 = argDep._0;
                          dependency = {
                            TAG: 0,
                            _0: {
                              functionFromScript: argDep$1.functionFromScript,
                              maxRecur: argDep$1.maxRecur,
                              ifMissing: argDep$1.ifMissing,
                              ifList: argDep$1.ifList,
                              fromRequestIds: Belt_Array.keep(argDep$1.fromRequestIds, (function (id) {
                                      return id !== dependencyId;
                                    })),
                              name: argDep$1.name
                            },
                            [Symbol.for("name")]: "ArgumentDependency"
                          };
                          break;
                      case /* Direct */1 :
                      case /* GraphQLProbe */2 :
                          dependency = argDep;
                          break;
                      
                    }
                    return {
                            name: varDep.name,
                            dependency: dependency
                          };
                  }));
            return {
                    id: request.id,
                    variableDependencies: varDeps,
                    operation: request.operation,
                    dependencyRequestIds: Belt_Array.keep(request.dependencyRequestIds, (function (id) {
                            return id !== dependencyId;
                          }))
                  };
          }));
    return {
            name: oldChain.name,
            description: oldChain.description,
            id: oldChain.id,
            script: oldChain.script,
            scriptDependencies: oldChain.scriptDependencies,
            requests: newRequests,
            blocks: oldChain.blocks,
            accessToken: oldChain.accessToken,
            traceRetentionPolicy: oldChain.traceRetentionPolicy,
            yjsScript: oldChain.yjsScript
          };
  };
  var match$3 = ScriptEditor.UpdateScriptMutation.use(undefined);
  var persistScript = match$3[0];
  React.useEffect((function () {
          var match = initialChain.libraryScript;
          var exit = 0;
          if (match !== undefined && match.concurrentSource !== undefined) {
            console.log("Script source already bootstrapped for " + match.filename);
          } else {
            exit = 1;
          }
          if (exit === 1) {
            console.log("Should initialize empty source");
            var ydocument = new Yjs.Doc();
            var ytext = ydocument.getText("monaco");
            ytext.insert(0, "// Let's get started!");
            SharedRooms.encodeUint8Array(Yjs.encodeStateAsUpdate(ydocument));
            var persistScript$1 = function (ydocument, onCompleted) {
              var concurrentSource = SharedRooms.encodeUint8Array(Yjs.encodeStateAsUpdate(ydocument));
              var textualSource = ydocument.getText("monaco").toString();
              Debug.assignToWindowForDeveloperDebug("ydoc", ydocument);
              Curry.app(persistScript, [
                    undefined,
                    onCompleted,
                    undefined,
                    undefined,
                    undefined,
                    undefined,
                    {
                      input: {
                        source: {
                          concurrentSource: concurrentSource,
                          textualSource: textualSource
                        },
                        id: "ee423369-0e69-443b-91c2-0b0112da8943"
                      }
                    },
                    undefined,
                    undefined
                  ]);
              
            };
            persistScript$1(ydocument, (function (param, param$1) {
                    console.log("Bootsrapped contents for file");
                    
                  }));
          }
          
        }), [Belt_Option.map(initialChain.libraryScript, (function (script) {
                return script.id;
              }))]);
  var scriptEditor = Belt_Option.mapWithDefault(initialChain.libraryScript, "Loading script...", (function (script) {
          var tmp = {
            schema: state.schema,
            script: script.fragmentRefs,
            onChange: (function (newScript) {
                
              }),
            onMount: (function (editor, monaco) {
                return Curry._1(setState, (function (oldState) {
                              var init = oldState.scriptEditor;
                              return {
                                      card: oldState.card,
                                      schema: oldState.schema,
                                      chainResult: oldState.chainResult,
                                      scriptFunctions: oldState.scriptFunctions,
                                      chainExecutionResults: oldState.chainExecutionResults,
                                      actions: oldState.actions,
                                      inspected: oldState.inspected,
                                      actionEditState: oldState.actionEditState,
                                      actionSearchOpen: oldState.actionSearchOpen,
                                      scriptEditor: {
                                        isOpen: init.isOpen,
                                        editor: Caml_option.some(editor),
                                        monaco: Caml_option.some(monaco)
                                      },
                                      savedChainId: oldState.savedChainId,
                                      requestValueCache: oldState.requestValueCache,
                                      debugUIItems: oldState.debugUIItems,
                                      connectionDrag: oldState.connectionDrag,
                                      subscriptionClient: oldState.subscriptionClient,
                                      trace: oldState.trace,
                                      insight: oldState.insight
                                    };
                            }));
              }),
            onPotentialScriptSourceConnect: (function (sourceRequest, sourceDom, scriptPosition, param) {
                var y = param[1];
                var x = param[0];
                return Curry._1(setState, (function (oldState) {
                              var connectionDrag_2 = {
                                TAG: 1,
                                scriptPosition: scriptPosition,
                                [Symbol.for("name")]: "Script"
                              };
                              var connectionDrag_3 = [
                                x,
                                y
                              ];
                              var connectionDrag = {
                                TAG: 3,
                                sourceRequest: sourceRequest,
                                sourceDom: sourceDom,
                                target: connectionDrag_2,
                                windowPosition: connectionDrag_3,
                                [Symbol.for("name")]: "Completed"
                              };
                              return {
                                      card: oldState.card,
                                      schema: oldState.schema,
                                      chainResult: oldState.chainResult,
                                      scriptFunctions: oldState.scriptFunctions,
                                      chainExecutionResults: oldState.chainExecutionResults,
                                      actions: oldState.actions,
                                      inspected: oldState.inspected,
                                      actionEditState: oldState.actionEditState,
                                      actionSearchOpen: oldState.actionSearchOpen,
                                      scriptEditor: oldState.scriptEditor,
                                      savedChainId: oldState.savedChainId,
                                      requestValueCache: oldState.requestValueCache,
                                      debugUIItems: oldState.debugUIItems,
                                      connectionDrag: connectionDrag,
                                      subscriptionClient: oldState.subscriptionClient,
                                      trace: oldState.trace,
                                      insight: oldState.insight
                                    };
                            }));
              }),
            insight: {
              TAG: 0,
              _0: state.insight,
              [Symbol.for("name")]: "Ok"
            },
            chainName: initialChain.name
          };
          var tmp$1 = state.scriptEditor.isOpen ? undefined : "none";
          if (tmp$1 !== undefined) {
            tmp.className = Caml_option.valFromOption(tmp$1);
          }
          return React.createElement(ScriptEditor.make, tmp);
        }));
  var actionSearch = React.createElement(ActionSearch.make, {
        onAdd: (function (param) {
            
          }),
        onInspect: (function (param) {
            
          }),
        onCreate: (function (kind) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  actions: oldState.actions,
                                  inspected: oldState.inspected,
                                  actionEditState: {
                                    TAG: 0,
                                    _0: Card.makeBlankBlock(kind),
                                    [Symbol.for("name")]: "Create"
                                  },
                                  actionSearchOpen: oldState.actionSearchOpen,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems,
                                  connectionDrag: oldState.connectionDrag,
                                  subscriptionClient: oldState.subscriptionClient,
                                  trace: oldState.trace,
                                  insight: oldState.insight
                                };
                        }));
          }),
        onClose: (function (param) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  actions: oldState.actions,
                                  inspected: oldState.inspected,
                                  actionEditState: oldState.actionEditState,
                                  actionSearchOpen: false,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems,
                                  connectionDrag: oldState.connectionDrag,
                                  subscriptionClient: oldState.subscriptionClient,
                                  trace: oldState.trace,
                                  insight: oldState.insight
                                };
                        }));
          })
      });
  var sidebar = React.createElement(Inspector.make, {
        inspected: state.inspected,
        onReset: (function (param) {
            return Curry._1(setState, (function (oldState) {
                          return {
                                  card: oldState.card,
                                  schema: oldState.schema,
                                  chainResult: oldState.chainResult,
                                  scriptFunctions: oldState.scriptFunctions,
                                  chainExecutionResults: oldState.chainExecutionResults,
                                  actions: oldState.actions,
                                  inspected: /* Nothing */0,
                                  actionEditState: oldState.actionEditState,
                                  actionSearchOpen: oldState.actionSearchOpen,
                                  scriptEditor: oldState.scriptEditor,
                                  savedChainId: oldState.savedChainId,
                                  requestValueCache: oldState.requestValueCache,
                                  debugUIItems: oldState.debugUIItems,
                                  connectionDrag: oldState.connectionDrag,
                                  subscriptionClient: oldState.subscriptionClient,
                                  trace: oldState.trace,
                                  insight: oldState.insight
                                };
                        }));
          }),
        schema: state.schema,
        chainExecutionResults: state.chainExecutionResults,
        onLogin: (function (service) {
            var __x = oneGraphAuth.login(service);
            __x.then(function (param) {
                  var __x = oneGraphAuth.isLoggedIn(service);
                  return __x.then(function (isLoggedIn) {
                              return Promise.resolve(isLoggedIn ? Curry._1(setMissingAuthServices, (function (oldMissingAuthServices) {
                                                  return Belt_Array.keep(oldMissingAuthServices, (function (oldService) {
                                                                return oldService !== service;
                                                              }));
                                                })) : undefined);
                            });
                });
            
          }),
        onInspectActionCode: (function (actionId) {
            var request = Belt_Array.getBy(initialChain.actions, (function (action) {
                    return actionId === action.id;
                  }));
            return Belt_Option.forEach(request, (function (request) {
                          var names = Chain.requestScriptNames(request.name);
                          var functionName = names.functionName;
                          var source = Belt_Option.flatMap(initialChain.libraryScript, (function (script) {
                                  return script.textualSource;
                                }));
                          return Belt_Option.forEach(source, (function (source) {
                                        var sourceFile = Typescript.createSourceFile("main.ts", source, 99, true);
                                        var pos = TypeScript.findFnPos(sourceFile, functionName);
                                        return Belt_Option.forEach(pos, (function (param) {
                                                      var end = param.end;
                                                      var start = param.start;
                                                      return Belt_Option.forEach(state.scriptEditor.editor, (function (editor) {
                                                                    var model = editor.getModel("file://main.tsx");
                                                                    var start$1 = model.getPositionAt(start);
                                                                    var end$1 = model.getPositionAt(end);
                                                                    editor.revealLineInCenter(start$1.lineNumber, 1);
                                                                    editor.setSelection({
                                                                          startLineNumber: start$1.lineNumber,
                                                                          startColumn: start$1.column,
                                                                          endLineNumber: end$1.lineNumber,
                                                                          endColumn: end$1.column
                                                                        });
                                                                    
                                                                  }));
                                                    }));
                                      }));
                        }));
          }),
        requestValueCache: state.requestValueCache,
        onDeleteEdge: (function (targetRequestId, dependencyId) {
            
          }),
        onInspectAction: onInspectAction,
        oneGraphAuth: oneGraphAuth,
        onClose: onClose,
        onPotentialVariableSourceConnect: onPotentialVariableSourceConnect,
        fragmentRefs: initialChain.fragmentRefs
      });
  var libraryScript = initialChain.libraryScript;
  var filename = libraryScript !== undefined ? libraryScript.filename : "Loading script...";
  var action = state.actionEditState;
  var tmp;
  if (typeof action === "number") {
    tmp = null;
  } else {
    var action$1;
    if (typeof action === "number" || action.TAG === /* Create */0) {
      action$1 = undefined;
    } else {
      var actionId = action._0;
      action$1 = Belt_Array.getBy(initialChain.actions, (function (action) {
              return action.id === actionId;
            }));
    }
    var editor = React.createElement(ActionGraphQLEditor.make, {
          schema: state.schema,
          onClose: (function (param) {
              return Curry._1(setState, (function (oldState) {
                            return {
                                    card: oldState.card,
                                    schema: oldState.schema,
                                    chainResult: oldState.chainResult,
                                    scriptFunctions: oldState.scriptFunctions,
                                    chainExecutionResults: oldState.chainExecutionResults,
                                    actions: oldState.actions,
                                    inspected: oldState.inspected,
                                    actionEditState: /* Nothing */0,
                                    actionSearchOpen: oldState.actionSearchOpen,
                                    scriptEditor: oldState.scriptEditor,
                                    savedChainId: oldState.savedChainId,
                                    requestValueCache: oldState.requestValueCache,
                                    debugUIItems: oldState.debugUIItems,
                                    connectionDrag: oldState.connectionDrag,
                                    subscriptionClient: oldState.subscriptionClient,
                                    trace: oldState.trace,
                                    insight: oldState.insight
                                  };
                          }));
            }),
          onSave: (function (initial, superBlock) {
              
            }),
          availableFragments: [],
          actionRef: Belt_Option.map(action$1, (function (action) {
                  return action.fragmentRefs;
                }))
        });
    tmp = React.createElement(Comps.Modal.make, {
          children: editor
        });
  }
  var tmp$1;
  if (helpOpen) {
    var connectionsHelp = Belt_Array.keep(Help.videoTutorials, (function (video) {
            return video.category === /* Connections */0;
          }));
    tmp$1 = React.createElement(Comps.Modal.make, {
          children: React.createElement("div", {
                className: "w-full h-full m-2 bg-gray-900"
              }, React.createElement("h1", {
                    style: {
                      color: Comps.colors["gray-6"]
                    }
                  }, "Draw connections with drag and drop:"), React.createElement("ul", {
                    style: {
                      color: Comps.colors["gray-4"]
                    }
                  }, Belt_Array.map(connectionsHelp, (function (video) {
                          return React.createElement("li", {
                                      key: video.title
                                    }, video.oneLineDescription, React.createElement("a", {
                                          style: {
                                            color: Comps.colors["blue-1"]
                                          },
                                          href: video.link,
                                          target: "_blank"
                                        }, "[Tutorial video]"));
                        }))))
        });
  } else {
    tmp$1 = null;
  }
  return React.createElement("div", {
              style: {
                height: "calc(100vh - 56px)"
              }
            }, React.createElement(RequestValueCacheProvider.make, {
                  value: definitionResultData,
                  children: React.createElement(ChainEditor$InspectedContextProvider, {
                        value: state.inspected,
                        children: React.createElement(ConnectionContext.Provider.make, {
                              value: state.connectionDrag,
                              children: null
                            }, React.createElement("div", {
                                  className: "flex flex-row flex-nowrap"
                                }, state.actionSearchOpen ? React.createElement(ReactResizePanel, {
                                        direction: "e",
                                        style: {
                                          width: "400px"
                                        },
                                        handleClass: "ResizeHandleHorizontal",
                                        children: React.createElement("div", {
                                              className: "w-full",
                                              style: {
                                                backgroundColor: Comps.colors["gray-9"],
                                                height: "calc(100vh - 56px)"
                                              }
                                            }, actionSearch)
                                      }) : React.createElement("div", {
                                        className: "cursor-pointer",
                                        style: {
                                          color: "white",
                                          width: "25px"
                                        },
                                        onClick: (function (param) {
                                            return Curry._1(setState, (function (oldState) {
                                                          return {
                                                                  card: oldState.card,
                                                                  schema: oldState.schema,
                                                                  chainResult: oldState.chainResult,
                                                                  scriptFunctions: oldState.scriptFunctions,
                                                                  chainExecutionResults: oldState.chainExecutionResults,
                                                                  actions: oldState.actions,
                                                                  inspected: oldState.inspected,
                                                                  actionEditState: oldState.actionEditState,
                                                                  actionSearchOpen: true,
                                                                  scriptEditor: oldState.scriptEditor,
                                                                  savedChainId: oldState.savedChainId,
                                                                  requestValueCache: oldState.requestValueCache,
                                                                  debugUIItems: oldState.debugUIItems,
                                                                  connectionDrag: oldState.connectionDrag,
                                                                  subscriptionClient: oldState.subscriptionClient,
                                                                  trace: oldState.trace,
                                                                  insight: oldState.insight
                                                                };
                                                        }));
                                          })
                                      }, "▹"), React.createElement("div", {
                                      className: "flex-1 overflow-x-hidden"
                                    }, React.createElement("div", {
                                          style: {
                                            height: "calc(50vh - 28px)"
                                          },
                                          onDragEnter: (function ($$event) {
                                              $$event.stopPropagation();
                                              $$event.preventDefault();
                                              var dataTransfer = $$event.dataTransfer;
                                              dataTransfer.dropEffect = "copy";
                                              
                                            }),
                                          onDragOver: (function ($$event) {
                                              $$event.stopPropagation();
                                              $$event.preventDefault();
                                              var dataTransfer = $$event.dataTransfer;
                                              dataTransfer.dropEffect = "copy";
                                              
                                            }),
                                          onDrop: (function ($$event) {
                                              $$event.stopPropagation();
                                              var dataTransfer = $$event.dataTransfer;
                                              dataTransfer.dropEffect = "copy";
                                              var blockId = Curry._1(dataTransfer.getData, "text");
                                              return Belt_Option.forEach(Belt_Array.getBy(state.actions, (function (block) {
                                                                return block.id.toString() === blockId;
                                                              })), (function (block) {
                                                            var ast = Graphql.parse(block.body);
                                                            Belt_Array.map(ast.definitions, (function (definition) {
                                                                    var services = Belt_Array.map(GraphQLUtils.gatherAllReferencedServices(schema, definition), (function (service) {
                                                                            return service.slug;
                                                                          }));
                                                                    var blank = Card.makeBlankBlock("query");
                                                                    var match = definition.operation;
                                                                    return {
                                                                            id: Uuid.v4(),
                                                                            title: definition.name.value,
                                                                            description: blank.description,
                                                                            body: Graphql.print(definition),
                                                                            kind: match !== undefined ? (
                                                                                match === "mutation" ? /* Mutation */1 : (
                                                                                    match === "subscription" ? /* Subscription */2 : /* Query */0
                                                                                  )
                                                                              ) : /* Fragment */3,
                                                                            contributedBy: blank.contributedBy,
                                                                            services: services
                                                                          };
                                                                  }));
                                                            var inspectedReq;
                                                            var inspected = Belt_Option.getWithDefault(Belt_Option.map(inspectedReq, (function (request) {
                                                                        return {
                                                                                TAG: 0,
                                                                                _0: request.id,
                                                                                [Symbol.for("name")]: "Action"
                                                                              };
                                                                      })), state.inspected);
                                                            return Curry._1(setState, (function (oldState) {
                                                                          return {
                                                                                  card: oldState.card,
                                                                                  schema: oldState.schema,
                                                                                  chainResult: oldState.chainResult,
                                                                                  scriptFunctions: oldState.scriptFunctions,
                                                                                  chainExecutionResults: oldState.chainExecutionResults,
                                                                                  actions: oldState.actions,
                                                                                  inspected: inspected,
                                                                                  actionEditState: oldState.actionEditState,
                                                                                  actionSearchOpen: oldState.actionSearchOpen,
                                                                                  scriptEditor: oldState.scriptEditor,
                                                                                  savedChainId: oldState.savedChainId,
                                                                                  requestValueCache: oldState.requestValueCache,
                                                                                  debugUIItems: oldState.debugUIItems,
                                                                                  connectionDrag: oldState.connectionDrag,
                                                                                  subscriptionClient: oldState.subscriptionClient,
                                                                                  trace: oldState.trace,
                                                                                  insight: oldState.insight
                                                                                };
                                                                        }));
                                                          }));
                                            })
                                        }, React.createElement(ChainCanvas.make, {
                                              removeEdge: removeEdge,
                                              removeRequest: removeRequest,
                                              trace: state.trace,
                                              chainRef: initialChain.fragmentRefs,
                                              onActionInspected: (function (actionId) {
                                                  return Curry._1(setState, (function (oldState) {
                                                                return {
                                                                        card: oldState.card,
                                                                        schema: oldState.schema,
                                                                        chainResult: oldState.chainResult,
                                                                        scriptFunctions: oldState.scriptFunctions,
                                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                                        actions: oldState.actions,
                                                                        inspected: {
                                                                          TAG: 0,
                                                                          _0: actionId,
                                                                          [Symbol.for("name")]: "Action"
                                                                        },
                                                                        actionEditState: oldState.actionEditState,
                                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                                        scriptEditor: oldState.scriptEditor,
                                                                        savedChainId: oldState.savedChainId,
                                                                        requestValueCache: oldState.requestValueCache,
                                                                        debugUIItems: oldState.debugUIItems,
                                                                        connectionDrag: oldState.connectionDrag,
                                                                        subscriptionClient: oldState.subscriptionClient,
                                                                        trace: oldState.trace,
                                                                        insight: oldState.insight
                                                                      };
                                                              }));
                                                }),
                                              onEditAction: (function (actionId) {
                                                  return Curry._1(setState, (function (oldState) {
                                                                return {
                                                                        card: oldState.card,
                                                                        schema: oldState.schema,
                                                                        chainResult: oldState.chainResult,
                                                                        scriptFunctions: oldState.scriptFunctions,
                                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                                        actions: oldState.actions,
                                                                        inspected: oldState.inspected,
                                                                        actionEditState: {
                                                                          TAG: 1,
                                                                          _0: actionId,
                                                                          [Symbol.for("name")]: "Edit"
                                                                        },
                                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                                        scriptEditor: oldState.scriptEditor,
                                                                        savedChainId: oldState.savedChainId,
                                                                        requestValueCache: oldState.requestValueCache,
                                                                        debugUIItems: oldState.debugUIItems,
                                                                        connectionDrag: oldState.connectionDrag,
                                                                        subscriptionClient: oldState.subscriptionClient,
                                                                        trace: oldState.trace,
                                                                        insight: oldState.insight
                                                                      };
                                                              }));
                                                })
                                            })), React.createElement("div", {
                                          style: {
                                            height: "calc(50vh - 67px)"
                                          }
                                        }, React.createElement("div", {
                                              className: "",
                                              onClick: (function (param) {
                                                  return Curry._1(setState, (function (oldState) {
                                                                var init = oldState.scriptEditor;
                                                                return {
                                                                        card: oldState.card,
                                                                        schema: oldState.schema,
                                                                        chainResult: oldState.chainResult,
                                                                        scriptFunctions: oldState.scriptFunctions,
                                                                        chainExecutionResults: oldState.chainExecutionResults,
                                                                        actions: oldState.actions,
                                                                        inspected: oldState.inspected,
                                                                        actionEditState: oldState.actionEditState,
                                                                        actionSearchOpen: oldState.actionSearchOpen,
                                                                        scriptEditor: {
                                                                          isOpen: !oldState.scriptEditor.isOpen,
                                                                          editor: init.editor,
                                                                          monaco: init.monaco
                                                                        },
                                                                        savedChainId: oldState.savedChainId,
                                                                        requestValueCache: oldState.requestValueCache,
                                                                        debugUIItems: oldState.debugUIItems,
                                                                        connectionDrag: oldState.connectionDrag,
                                                                        subscriptionClient: oldState.subscriptionClient,
                                                                        trace: oldState.trace,
                                                                        insight: oldState.insight
                                                                      };
                                                              }));
                                                })
                                            }, React.createElement(Comps.Header.make, {
                                                  style: {
                                                    backgroundColor: Comps.colors["gray-9"],
                                                    display: "flex",
                                                    marginRight: "0px",
                                                    marginLeft: "0px"
                                                  },
                                                  children: null
                                                }, React.createElement("div", {
                                                      className: "flex-grow"
                                                    }, "Chain JavaScript" + ("(" + filename + ")")), React.createElement("div", undefined, React.createElement("button", {
                                                          title: "Format code",
                                                          onClick: (function (param) {
                                                              return Belt_Option.forEach(state.scriptEditor.editor, (function (editor) {
                                                                            var script = editor.getValue();
                                                                            Prettier.format(script, {
                                                                                  parser: "babel",
                                                                                  plugins: [ParserBabel],
                                                                                  singleQuote: true
                                                                                });
                                                                            
                                                                          }));
                                                            })
                                                        }, React.createElement(Icons.Prettier.Dark.make, {
                                                              width: "16px",
                                                              height: "16px"
                                                            }))))), scriptEditor)), React.createElement(ReactResizePanel, {
                                      direction: "w",
                                      style: {
                                        width: "400px"
                                      },
                                      handleClass: "ResizeHandleHorizontal",
                                      children: React.createElement("div", {
                                            className: "w-full",
                                            style: {
                                              backgroundColor: Comps.colors["gray-9"],
                                              height: "calc(100vh - 56px)"
                                            }
                                          }, sidebar)
                                    })), tmp)
                      })
                }), tmp$1, React.createElement("audio", {
                  id: "test-audio-tag",
                  autoPlay: true
                }));
}

var Main = {
  make: ChainEditor$Main
};

function ChainEditor(Props) {
  var schema = Props.schema;
  var chainRefs = Props.chainRefs;
  var localStorageChain = Props.localStorageChain;
  var config = Props.config;
  var onSaveChain = Props.onSaveChain;
  var onClose = Props.onClose;
  var onSaveAndClose = Props.onSaveAndClose;
  var trace = Props.trace;
  var helpOpen = Props.helpOpen;
  var oneGraphAuth = OneGraphAuth.create({
        appId: config.oneGraphAppId
      });
  var initialChain = use(chainRefs);
  return Belt_Option.getWithDefault(Belt_Option.map(oneGraphAuth, (function (oneGraphAuth) {
                    return React.createElement(ReactFlowRenderer.ReactFlowProvider, {
                                children: React.createElement(ChainEditor$Main, {
                                      schema: schema,
                                      initialChain: initialChain,
                                      localStorageChain: localStorageChain,
                                      config: config,
                                      oneGraphAuth: oneGraphAuth,
                                      onSaveChain: onSaveChain,
                                      onClose: onClose,
                                      onSaveAndClose: onSaveAndClose,
                                      trace: trace,
                                      helpOpen: helpOpen
                                    })
                              });
                  })), "Loading Chain Editor...");
}

var httpRequest = "\ntype OutgoingHttpResponse {\n  body: String\n  headers: [[String!]!]\n  status: Int!\n}";

var make = ChainEditor;

export {
  Fragment ,
  httpRequest ,
  namedGraphQLScalarTypeScriptType ,
  compileChain ,
  InspectedContextProvider ,
  emptyGraphLevel ,
  chainResultToRequestValueCache ,
  persistChain ,
  Main ,
  make ,
  
}
/* context Not a pure module */
