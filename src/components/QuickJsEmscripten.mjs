// Generated by ReScript, PLEASE EDIT WITH CARE

import * as QuickjsEmscripten from "@dww/quickjs-emscripten";

var VM = {};

var Scope = {};

function main(param) {
  var __x = QuickjsEmscripten.getQuickJS();
  __x.then(function (quickjs) {
        var vm = quickjs.createVm();
        var $$global = vm.global;
        var state = {
          contents: 0
        };
        var fnHandle = vm.newFunction("nextId", (function (param) {
                state.contents = state.contents + 1 | 0;
                return vm.newNumber(state.contents);
              }));
        var recorderFnHandle = vm.newFunction("baseRecorder", (function (value) {
                var value$1 = vm.dump(value);
                console.log("Recorder called from wasm: ", value$1);
                var json = JSON.parse(value$1);
                console.log("\tJSON:", json);
                return vm.undefined;
              }));
        vm.setProp($$global, "nextId", fnHandle);
        vm.setProp($$global, "baseRecorder", recorderFnHandle);
        var result = vm.evalCode("nextId(); nextId(); nextId(); __$i({\"hi\": true});__$i({\"hi\": false, \"other\": 42}); nextId();\n\n\nfunction __$i(value,source,line,name,filePath,runId,runGroup,fileVersion,scopeId,callNum) {\nlet serializedRecord = JSON.stringify({\n  value: value,\n  source: source,\n  line: line,\n  name: name,\n  filePath: filePath,\n  runId: runId,\n  runGroup: runGroup,\n  fileVersion: fileVersion,\n  scopeId: scopeId,\n  callNum: callNum\n  });\n\n  baseRecorder(serializedRecord)\n\n  return value\n}");
        var nextId = vm.unwrapResult(result);
        console.log("vm result: ", vm.getNumber(nextId), "native state: ", state.contents);
        fnHandle.dispose();
        recorderFnHandle.dispose();
        nextId.dispose();
        vm.dispose();
        return Promise.resolve(undefined);
      });
  
}

export {
  VM ,
  Scope ,
  main ,
  
}
/* @dww/quickjs-emscripten Not a pure module */
