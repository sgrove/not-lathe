// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Comps from "./Comps.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Icons from "../Icons.mjs";
import * as Utils from "../Utils.mjs";
import * as React from "react";
import * as Package from "./Package.mjs";
import * as RelayEnv from "../RelayEnv.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as ChainEditor from "./ChainEditor.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Js_null_undefined from "rescript/lib/es6/js_null_undefined.js";
import * as Hooks from "react-relay/hooks";
import * as RescriptRelay_Internal from "rescript-relay/src/RescriptRelay_Internal.mjs";
import * as PackageViewer_package_graphql from "../__generated__/PackageViewer_package_graphql.mjs";
import * as PackageViewer_authTokens_graphql from "../__generated__/PackageViewer_authTokens_graphql.mjs";
import * as PackageViewer_createChainMutation_graphql from "../__generated__/PackageViewer_createChainMutation_graphql.mjs";

function use(fRef) {
  var data = Hooks.useFragment(PackageViewer_package_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PackageViewer_package_graphql.Internal.convertFragment, data);
}

function useOpt(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PackageViewer_package_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PackageViewer_package_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var PackageFragment = {
  Types: undefined,
  use: use,
  useOpt: useOpt
};

function commitMutation(environment, variables, optimisticUpdater, optimisticResponse, updater, onCompleted, onError, uploadables, param) {
  return RelayRuntime.commitMutation(environment, {
              mutation: PackageViewer_createChainMutation_graphql.node,
              variables: PackageViewer_createChainMutation_graphql.Internal.convertVariables(variables),
              onCompleted: (function (res, err) {
                  if (onCompleted !== undefined) {
                    return Curry._2(onCompleted, PackageViewer_createChainMutation_graphql.Internal.convertResponse(res), (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              onError: (function (err) {
                  if (onError !== undefined) {
                    return Curry._1(onError, (err == null) ? undefined : Caml_option.some(err));
                  }
                  
                }),
              optimisticResponse: optimisticResponse !== undefined ? PackageViewer_createChainMutation_graphql.Internal.convertWrapRawResponse(optimisticResponse) : undefined,
              optimisticUpdater: optimisticUpdater,
              updater: updater !== undefined ? (function (store, r) {
                    return Curry._2(updater, store, PackageViewer_createChainMutation_graphql.Internal.convertResponse(r));
                  }) : undefined,
              uploadables: uploadables
            });
}

function use$1(param) {
  var match = Hooks.useMutation(PackageViewer_createChainMutation_graphql.node);
  var mutate = match[0];
  return [
          React.useMemo((function () {
                  return function (param, param$1, param$2, param$3, param$4, param$5, param$6, param$7, param$8) {
                    return Curry._1(mutate, {
                                onError: param,
                                onCompleted: param$1 !== undefined ? (function (r, errors) {
                                      return Curry._2(param$1, PackageViewer_createChainMutation_graphql.Internal.convertResponse(r), (errors == null) ? undefined : Caml_option.some(errors));
                                    }) : undefined,
                                onUnsubscribe: param$2,
                                optimisticResponse: param$3 !== undefined ? PackageViewer_createChainMutation_graphql.Internal.convertWrapRawResponse(param$3) : undefined,
                                optimisticUpdater: param$4,
                                updater: param$5 !== undefined ? (function (store, r) {
                                      return Curry._2(param$5, store, PackageViewer_createChainMutation_graphql.Internal.convertResponse(r));
                                    }) : undefined,
                                variables: PackageViewer_createChainMutation_graphql.Internal.convertVariables(param$6),
                                uploadables: param$7
                              });
                  };
                }), [mutate]),
          match[1]
        ];
}

var CreateChainMutation_make_oneGraphCreateChainInput = PackageViewer_createChainMutation_graphql.Utils.make_oneGraphCreateChainInput;

var CreateChainMutation_makeVariables = PackageViewer_createChainMutation_graphql.Utils.makeVariables;

var CreateChainMutation_make_response_oneGraph_createChain_package = PackageViewer_createChainMutation_graphql.Utils.make_response_oneGraph_createChain_package;

var CreateChainMutation_make_response_oneGraph_createChain_chain = PackageViewer_createChainMutation_graphql.Utils.make_response_oneGraph_createChain_chain;

var CreateChainMutation_make_response_oneGraph_createChain = PackageViewer_createChainMutation_graphql.Utils.make_response_oneGraph_createChain;

var CreateChainMutation_make_response_oneGraph = PackageViewer_createChainMutation_graphql.Utils.make_response_oneGraph;

var CreateChainMutation_makeOptimisticResponse = PackageViewer_createChainMutation_graphql.Utils.makeOptimisticResponse;

var CreateChainMutation = {
  make_oneGraphCreateChainInput: CreateChainMutation_make_oneGraphCreateChainInput,
  makeVariables: CreateChainMutation_makeVariables,
  make_response_oneGraph_createChain_package: CreateChainMutation_make_response_oneGraph_createChain_package,
  make_response_oneGraph_createChain_chain: CreateChainMutation_make_response_oneGraph_createChain_chain,
  make_response_oneGraph_createChain: CreateChainMutation_make_response_oneGraph_createChain,
  make_response_oneGraph: CreateChainMutation_make_response_oneGraph,
  makeOptimisticResponse: CreateChainMutation_makeOptimisticResponse,
  Types: undefined,
  commitMutation: commitMutation,
  use: use$1
};

function use$2(fRef) {
  var data = Hooks.useFragment(PackageViewer_authTokens_graphql.node, fRef);
  return RescriptRelay_Internal.internal_useConvertedValue(PackageViewer_authTokens_graphql.Internal.convertFragment, data);
}

function useOpt$1(opt_fRef) {
  var fr = opt_fRef !== undefined ? Caml_option.some(Caml_option.valFromOption(opt_fRef)) : undefined;
  var nullableFragmentData = Hooks.useFragment(PackageViewer_authTokens_graphql.node, fr !== undefined ? Js_null_undefined.fromOption(Caml_option.some(Caml_option.valFromOption(fr))) : null);
  var data = (nullableFragmentData == null) ? undefined : Caml_option.some(nullableFragmentData);
  return RescriptRelay_Internal.internal_useConvertedValue((function (rawFragment) {
                if (rawFragment !== undefined) {
                  return PackageViewer_authTokens_graphql.Internal.convertFragment(rawFragment);
                }
                
              }), data);
}

var AuthTokensFragment = {
  Types: undefined,
  use: use$2,
  useOpt: useOpt$1
};

function PackageViewer$EditorTemp(Props) {
  var schema = Props.schema;
  var chain = Props.chain;
  var config = {
    oneGraphAppId: RelayEnv.appId,
    persistQueryToken: "",
    chainAccessToken: undefined
  };
  return React.createElement(ChainEditor.make, {
              schema: schema,
              chainRefs: chain.fragmentRefs,
              config: config,
              onClose: (function (param) {
                  
                }),
              trace: undefined,
              helpOpen: false
            });
}

var EditorTemp = {
  make: PackageViewer$EditorTemp
};

function PackageViewer(Props) {
  var schema = Props.schema;
  var onInspectChain = Props.onInspectChain;
  var onEditChain = Props.onEditChain;
  var onDeleteChain = Props.onDeleteChain;
  var onEditPackage = Props.onEditPackage;
  var onPublishPackageToNpm = Props.onPublishPackageToNpm;
  var onPublishPackageToGitHub = Props.onPublishPackageToGitHub;
  var oneGraphAppPackageRef = Props.oneGraphAppPackageRef;
  var authTokensRef = Props.authTokensRef;
  var $$package = use(oneGraphAppPackageRef);
  var chains = $$package.chains;
  var authTokens = Belt_Option.mapWithDefault(authTokensRef, [], (function (authTokensRef) {
          var oneGraphUser = use$2(authTokensRef);
          return Belt_Option.getWithDefault(oneGraphUser.personalTokens, []);
        }));
  var match = use$1(undefined);
  var createChain = match[0];
  var match$1 = React.useState(function () {
        return {
                view: Belt_Option.mapWithDefault(Belt_Array.get(chains, 0), /* Nothing */0, (function (chain) {
                        return {
                                TAG: 1,
                                _0: chain.id,
                                [Symbol.for("name")]: "Chain"
                              };
                      }))
              };
      });
  var setState = match$1[1];
  var state = match$1[0];
  var id = state.view;
  var tmp;
  if (typeof id === "number") {
    tmp = id === /* Nothing */0 ? React.createElement(React.Fragment, undefined, React.createElement("li", {
                className: "font-bold"
              }, React.createElement("a", {
                    className: "text-blue ",
                    href: "#",
                    onClick: (function (param) {
                        return Curry._1(setState, (function (param) {
                                      return {
                                              view: /* Nothing */0
                                            };
                                    }));
                      })
                  }, $$package.name))) : React.createElement(React.Fragment, undefined, React.createElement("li", undefined, React.createElement("a", {
                    className: "text-blue ",
                    href: "#",
                    onClick: (function (param) {
                        return Curry._1(setState, (function (param) {
                                      return {
                                              view: /* Nothing */0
                                            };
                                    }));
                      })
                  }, $$package.name)), React.createElement("li", undefined, React.createElement("span", {
                    className: "mx-2"
                  }, "/")), React.createElement("li", {
                className: "font-bold"
              }, "Settings"));
  } else if (id.TAG === /* Publish */0) {
    tmp = React.createElement(React.Fragment, undefined, React.createElement("li", undefined, React.createElement("a", {
                  className: "text-blue ",
                  href: "#",
                  onClick: (function (param) {
                      return Curry._1(setState, (function (param) {
                                    return {
                                            view: /* Nothing */0
                                          };
                                  }));
                    })
                }, $$package.name)), React.createElement("li", undefined, React.createElement("span", {
                  className: "mx-2"
                }, "/")), React.createElement("li", {
              className: "font-bold"
            }, "Publish new version"));
  } else {
    var id$1 = id._0;
    var chain = Belt_Array.getBy(chains, (function (chain) {
            return chain.id === id$1;
          }));
    tmp = React.createElement(React.Fragment, undefined, React.createElement("li", undefined, React.createElement("a", {
                  className: "text-blue ",
                  href: "#",
                  onClick: (function (param) {
                      return Curry._1(setState, (function (param) {
                                    return {
                                            view: /* Nothing */0
                                          };
                                  }));
                    })
                }, $$package.name)), React.createElement("li", undefined, React.createElement("span", {
                  className: "mx-2"
                }, "/")), React.createElement("li", {
              className: "font-bold"
            }, Belt_Option.mapWithDefault(chain, null, (function (chain) {
                    return chain.name;
                  }))));
  }
  var nav = React.createElement("nav", {
        className: "bg-grey-light p-3 rounded font-sans w-full"
      }, React.createElement("ol", {
            className: "list-reset flex text-grey-dark"
          }, React.createElement("li", undefined, React.createElement("a", {
                    className: "text-blue",
                    href: "#"
                  }, "Home")), React.createElement("li", undefined, React.createElement("span", {
                    className: "mx-2"
                  }, "/")), tmp));
  var id$2 = state.view;
  var tmp$1;
  var exit = 0;
  if (typeof id$2 === "number" || id$2.TAG !== /* Chain */1) {
    exit = 1;
  } else {
    var id$3 = id$2._0;
    var chain$1 = Belt_Array.getBy(chains, (function (chain) {
            return chain.id === id$3;
          }));
    tmp$1 = Belt_Option.mapWithDefault(chain$1, null, (function (chain) {
            return React.createElement(React.Fragment, undefined, React.createElement(PackageViewer$EditorTemp, {
                            schema: schema,
                            chain: chain
                          }));
          }));
  }
  if (exit === 1) {
    var diff = state.view;
    var tmp$2;
    tmp$2 = typeof diff === "number" ? (
        diff === /* Nothing */0 ? null : React.createElement(Comps.Modal.make, {
                children: React.createElement("div", {
                      className: "flex w-full flex-col"
                    }, React.createElement("div", {
                          className: "flex flex-grow flex-row h-full"
                        }, React.createElement("table", {
                              className: ""
                            }, React.createElement("thead", undefined, React.createElement("tr", {
                                      className: "text-gray-600 text-sm leading-normal",
                                      style: {
                                        color: Comps.colors["gray-3"]
                                      }
                                    }, React.createElement("th", {
                                          className: "py-3 px-6 text-left"
                                        }, "Name"), React.createElement("th", {
                                          className: "py-3 px-6 text-left"
                                        }, "Setting"))), React.createElement("tbody", {
                                  className: ""
                                }, React.createElement("tr", {
                                      className: "rounded-md border-4 border-gray-900 ",
                                      style: {
                                        backgroundColor: Comps.colors["gray-15"],
                                        color: Comps.colors["gray-6"],
                                        marginTop: "5px"
                                      }
                                    }, React.createElement("td", {
                                          className: "py-3 px-6 text-left whitespace-nowrap"
                                        }, React.createElement("div", {
                                              className: "flex items-center"
                                            }, React.createElement("span", {
                                                  className: "font-medium cursor-pointer mr-2"
                                                }, "Package name: "))), React.createElement("td", {
                                          className: "py-3 px-6 "
                                        }, React.createElement("div", {
                                              className: "relative text-lg bg-transparent text-gray-800"
                                            }, React.createElement("div", {
                                                  className: "flex items-center ml-2 mr-2"
                                                }, React.createElement("input", {
                                                      defaultValue: $$package.name,
                                                      className: "border-none px-2 leading-tight outline-none text-white form-input",
                                                      style: {
                                                        backgroundColor: Comps.colors["gray-9"]
                                                      },
                                                      placeholder: "npm-package-name",
                                                      type: "text",
                                                      onChange: (function ($$event) {
                                                          var value = $$event.target.value;
                                                          return Curry._1(onEditPackage, {
                                                                      description: $$package.description,
                                                                      id: $$package.id,
                                                                      name: value,
                                                                      version: $$package.version,
                                                                      chains: $$package.chains
                                                                    });
                                                        })
                                                    }))))), React.createElement("tr", {
                                      className: "rounded-md border-4 border-gray-900 ",
                                      style: {
                                        backgroundColor: Comps.colors["gray-15"],
                                        color: Comps.colors["gray-6"],
                                        marginTop: "5px"
                                      }
                                    }, React.createElement("td", {
                                          className: "py-3 px-6 text-left whitespace-nowrap"
                                        }, React.createElement("div", {
                                              className: "flex items-center"
                                            }, React.createElement("span", {
                                                  className: "font-medium cursor-pointer mr-2"
                                                }, "Package descriptions: "))), React.createElement("td", {
                                          className: "py-3 px-6 "
                                        }, React.createElement("div", {
                                              className: "relative text-lg bg-transparent text-gray-800"
                                            }, React.createElement("div", {
                                                  className: "flex items-center ml-2 mr-2"
                                                }, React.createElement("input", {
                                                      defaultValue: Belt_Option.getWithDefault($$package.description, ""),
                                                      className: "border-none px-2 leading-tight outline-none text-white form-input",
                                                      style: {
                                                        backgroundColor: Comps.colors["gray-9"]
                                                      },
                                                      type: "text",
                                                      onChange: (function ($$event) {
                                                          var other = $$event.target.value.trim();
                                                          var value = other === "" ? undefined : other;
                                                          return Curry._1(onEditPackage, {
                                                                      description: value,
                                                                      id: $$package.id,
                                                                      name: $$package.name,
                                                                      version: $$package.version,
                                                                      chains: $$package.chains
                                                                    });
                                                        })
                                                    }))))), React.createElement("tr", {
                                      className: "rounded-md border-4 border-gray-900 ",
                                      style: {
                                        backgroundColor: Comps.colors["gray-15"],
                                        color: Comps.colors["gray-6"],
                                        marginTop: "5px"
                                      }
                                    }, React.createElement("td", {
                                          className: "py-3 px-6 text-left whitespace-nowrap"
                                        }, React.createElement("div", {
                                              className: "flex items-center"
                                            }, React.createElement("span", {
                                                  className: "font-medium cursor-pointer mr-2"
                                                }, "Manually set package version ('int.int.int'): "))), React.createElement("td", {
                                          className: "py-3 px-6 "
                                        }, React.createElement("div", {
                                              className: "relative text-lg bg-transparent text-gray-800"
                                            }, React.createElement("div", {
                                                  className: "flex items-center ml-2 mr-2"
                                                }))))))), React.createElement("div", {
                          className: "w-full ml-auto flex"
                        }, React.createElement(Comps.Button.make, {
                              onClick: (function (param) {
                                  return Curry._1(setState, (function (oldState) {
                                                return {
                                                        view: /* Nothing */0
                                                      };
                                              }));
                                }),
                              className: "flex-grow",
                              children: "Close"
                            })))
              })
      ) : (
        diff.TAG === /* Publish */0 ? React.createElement(Comps.Modal.make, {
                children: React.createElement("div", {
                      className: "w-full h-full shadow-md rounded my-6 text-white flex flex-col"
                    }, React.createElement("div", {
                          className: "overflow-y-scroll flex flex-col"
                        }, React.createElement("h1", {
                              className: "m-5 flex-1 font-bold block",
                              style: {
                                color: Comps.colors["gray-6"]
                              }
                            }, "Publish package changes: ", React.createElement("span", {
                                  className: "mx-2"
                                }, React.createElement("code", undefined, $$package.version)), React.createElement("span", {
                                  className: "mx-2"
                                }, " => "), React.createElement("span", {
                                  className: "mx-2"
                                })), React.createElement("table", {
                              className: "min-w-max h-full w-full table-auto"
                            }, React.createElement("thead", undefined, React.createElement("tr", {
                                      className: "text-gray-600 text-sm leading-normal",
                                      style: {
                                        color: Comps.colors["gray-3"]
                                      }
                                    }, React.createElement("th", {
                                          className: "py-3 px-6 text-left"
                                        }, "Function"), React.createElement("th", {
                                          className: "py-3 px-6 text-left"
                                        }, "Input"), React.createElement("th", {
                                          className: "py-3 px-6 text-center"
                                        }, "Return"))), React.createElement("tbody", {
                                  className: "text-gray-600 text-sm font-light"
                                }))), React.createElement("div", {
                          className: "w-full ml-auto flex"
                        }, React.createElement(Comps.Button.make, {
                              className: "flex-grow",
                              children: "Save",
                              disabled: true
                            }), React.createElement(Comps.Button.make, {
                              onClick: (function (param) {
                                  return Curry._1(setState, (function (oldState) {
                                                return {
                                                        view: /* Nothing */0
                                                      };
                                              }));
                                }),
                              className: "flex-grow",
                              children: "Cancel"
                            })))
              }) : null
      );
    tmp$1 = React.createElement("div", {
          className: "w-full m-2 h-full bg-white flex items-center justify-center font-sans overflow-hidden",
          style: {
            backgroundColor: Comps.colors["gray-8"]
          }
        }, React.createElement("div", {
              className: "w-full h-full "
            }, React.createElement("div", {
                  className: "flex justify-between"
                }, React.createElement("h1", {
                      className: "m-5 flex-1 font-bold",
                      style: {
                        color: Comps.colors["gray-6"]
                      }
                    }, $$package.name, React.createElement("span", {
                          className: "mx-2"
                        }, React.createElement("code", undefined, $$package.version))), React.createElement("div", {
                      className: "m-2"
                    }, React.createElement(Comps.Button.make, {
                          onClick: (function (param) {
                              return Curry._1(setState, (function (oldState) {
                                            return {
                                                    view: /* Settings */1
                                                  };
                                          }));
                            }),
                          children: null
                        }, React.createElement(Icons.Gears.make, {
                              className: "inline-block ",
                              color: Comps.colors["gray-4"]
                            }), " Package Settings")), React.createElement("div", {
                      className: "m-2"
                    }, React.createElement(Comps.Button.make, {
                          onClick: (function (param) {
                              
                            }),
                          children: null,
                          disabled: true
                        }, React.createElement(Icons.Gears.make, {
                              className: "inline-block ",
                              color: Comps.colors["gray-4"]
                            }), " View Diff")), React.createElement("div", {
                      className: "m-2"
                    }, React.createElement(Comps.Button.make, {
                          onClick: (function (param) {
                              var apiToken = prompt("Enter npm api token to publish:", undefined);
                              if (!(apiToken == null)) {
                                return Curry._1(onPublishPackageToNpm, {
                                            apiToken: apiToken
                                          });
                              }
                              
                            }),
                          children: null
                        }, React.createElement(Icons.Login.make, {
                              className: "inline-block ",
                              color: Comps.colors["gray-4"]
                            }), " Publish changes to npm")), React.createElement("div", {
                      className: "m-2"
                    }, React.createElement(Comps.Button.make, {
                          onClick: (function (param) {
                              var apiToken = prompt("Enter GitHub OAuth token (with repo and write:packages scopes) to publish:", undefined);
                              if (!(apiToken == null)) {
                                return Curry._1(onPublishPackageToGitHub, apiToken);
                              }
                              
                            }),
                          children: null
                        }, React.createElement(Icons.Login.make, {
                              className: "inline-block ",
                              color: Comps.colors["gray-4"]
                            }), " Publish changes to GitHub registry")), React.createElement("div", {
                      className: "m-2"
                    }, React.createElement(Comps.Button.make, {
                          onClick: (function (param) {
                              var other = Belt_Option.mapWithDefault(Caml_option.nullable_to_opt(prompt("New chain name", "newChain")), "", (function (name) {
                                      return name.trim();
                                    }));
                              if (other === "") {
                                return ;
                              }
                              Curry.app(createChain, [
                                    undefined,
                                    (function (results, errors) {
                                        console.log("Results: ", results, errors);
                                        return Belt_Option.forEach(results.oneGraph.createChain, (function (result) {
                                                      return Curry._1(setState, (function (oldState) {
                                                                    return {
                                                                            view: {
                                                                              TAG: 1,
                                                                              _0: result.chain.id,
                                                                              [Symbol.for("name")]: "Chain"
                                                                            }
                                                                          };
                                                                  }));
                                                    }));
                                      }),
                                    undefined,
                                    undefined,
                                    undefined,
                                    undefined,
                                    {
                                      input: {
                                        description: undefined,
                                        name: other,
                                        packageId: $$package.id
                                      }
                                    },
                                    undefined,
                                    undefined
                                  ]);
                              
                            }),
                          children: null
                        }, React.createElement(Icons.Plus.make, {
                              className: "inline-block ",
                              color: Comps.colors["gray-4"]
                            }), " New Chain"))), React.createElement("div", {
                  className: "w-full h-full shadow-md rounded my-6"
                }, React.createElement("table", {
                      className: "min-w-max h-full w-full table-auto"
                    }, React.createElement("thead", undefined, React.createElement("tr", {
                              className: "text-gray-600 text-sm leading-normal",
                              style: {
                                color: Comps.colors["gray-3"]
                              }
                            }, React.createElement("th", {
                                  className: "py-3 px-6 text-left"
                                }, "Chain Name"), React.createElement("th", {
                                  className: "py-3 px-6 text-left"
                                }, "Auth Token"), React.createElement("th", {
                                  className: "py-3 px-6 text-center"
                                }, "Data Retention"), React.createElement("th", {
                                  className: "py-3 px-6 text-center"
                                }, "Team Access"), React.createElement("th", {
                                  className: "py-3 px-6 text-center"
                                }, "Status"), React.createElement("th", {
                                  className: "py-3 px-6 text-center"
                                }, "Actions"))), React.createElement("tbody", {
                          className: "text-gray-600 text-sm font-light"
                        }, Belt_Array.mapWithIndex(chains, (function (index, chain) {
                                var even = index % 2 === 0;
                                var style = {
                                  backgroundColor: Comps.colors["gray-15"],
                                  color: Comps.colors["gray-6"],
                                  marginTop: "5px"
                                };
                                var className = even ? " text-gray-50 hover:bg-gray-400" : " text-gray-50 hover:bg-gray-700";
                                var images = Belt_Array.keepMap(Belt_Array.mapWithIndex([], (function (idx, service) {
                                            return Belt_Option.map(Utils.serviceImageUrl(undefined, undefined, service), (function (param) {
                                                          var friendlyServiceName = param[1];
                                                          return React.createElement("img", {
                                                                      key: friendlyServiceName,
                                                                      className: " rounded-full border-gray-200 border-2 transform hover:scale-125 " + (
                                                                        idx > 0 ? "-m-1" : ""
                                                                      ),
                                                                      title: friendlyServiceName,
                                                                      alt: friendlyServiceName,
                                                                      src: param[0],
                                                                      width: "24px"
                                                                    });
                                                        }));
                                          })), (function (el) {
                                        return el;
                                      }));
                                return React.createElement("tr", {
                                            key: chain.id,
                                            className: "rounded-md border-4 border-gray-900 " + className,
                                            style: style
                                          }, React.createElement("td", {
                                                className: "py-3 px-6 text-left whitespace-nowrap"
                                              }, React.createElement("div", {
                                                    className: "flex items-center"
                                                  }, React.createElement("span", {
                                                        className: "font-medium cursor-pointer mr-2",
                                                        onClick: (function (param) {
                                                            return Curry._1(setState, (function (oldState) {
                                                                          return {
                                                                                  view: {
                                                                                    TAG: 1,
                                                                                    _0: chain.id,
                                                                                    [Symbol.for("name")]: "Chain"
                                                                                  }
                                                                                };
                                                                        }));
                                                          })
                                                      }, chain.name), React.createElement("div", {
                                                        className: "flex items-center"
                                                      }, React.createElement("div", {
                                                            className: "flex items-center justify-center"
                                                          }, images.length !== 0 ? images : " ")))), React.createElement("td", {
                                                className: "py-3 px-6 "
                                              }, React.createElement(Comps.Select.make, {
                                                    children: null,
                                                    className: "inline-block comp-select",
                                                    onChange: (function ($$event) {
                                                        var value = $$event.target.value;
                                                        value === "";
                                                        
                                                      }),
                                                    value: Belt_Option.mapWithDefault(chain.authToken, "", (function (authToken) {
                                                            return authToken.obscuredToken;
                                                          }))
                                                  }, React.createElement("option", {
                                                        value: ""
                                                      }, "None"), Belt_Array.map(authTokens, (function (authToken) {
                                                          return React.createElement("option", {
                                                                      key: authToken.obscuredToken,
                                                                      value: authToken.token
                                                                    }, Belt_Option.getWithDefault(authToken.name, "Unnamed") + " (" + authToken.obscuredToken + ")");
                                                        })))), React.createElement("td", undefined, React.createElement(Comps.Select.make, {
                                                    children: null,
                                                    className: "inline-block comp-select",
                                                    onChange: (function ($$event) {
                                                        var value = $$event.target.value;
                                                        switch (value) {
                                                          case "ALL" :
                                                              break;
                                                          case "ERRORS" :
                                                              break;
                                                          case "NEVER" :
                                                              break;
                                                          default:
                                                            
                                                        }
                                                        
                                                      }),
                                                    value: "ALL"
                                                  }, React.createElement("option", {
                                                        value: "ALL"
                                                      }, "Keep trace for every invocation"), React.createElement("option", {
                                                        value: "ERRORS"
                                                      }, "Only keep trace for invocations with errors"), React.createElement("option", {
                                                        value: "NEVER"
                                                      }, "Never retain any trace data")), React.createElement("br", undefined), null), React.createElement("td", {
                                                className: "py-3 px-6 text-center"
                                              }, React.createElement("div", {
                                                    className: "flex items-center justify-center"
                                                  }, Belt_Array.mapWithIndex([
                                                        "sgrove",
                                                        "dwwoelfel"
                                                      ], (function (idx, username) {
                                                          return React.createElement("img", {
                                                                      key: username,
                                                                      className: " rounded-full border-gray-200 border transform hover:scale-125 " + (
                                                                        idx > 0 ? "-m-1" : ""
                                                                      ),
                                                                      title: username,
                                                                      alt: username,
                                                                      src: "https://github.com/" + username + ".png?size=200",
                                                                      width: "24px"
                                                                    });
                                                        })))), React.createElement("td", {
                                                className: "py-3 px-6 text-center"
                                              }, Package.active(undefined)), React.createElement("td", {
                                                className: "py-3 px-6 text-center"
                                              }, React.createElement("div", {
                                                    className: "flex item-center justify-center"
                                                  }, React.createElement("div", {
                                                        className: "mr-2 transform hover:bg-gray-800 hover:scale-110 cursor-pointer border rounded-lg p-2",
                                                        style: {
                                                          borderColor: Comps.colors["gray-2"]
                                                        },
                                                        onClick: (function (param) {
                                                            return Curry._1(onInspectChain, chain);
                                                          })
                                                      }, React.createElement(Icons.Visibility.make, {
                                                            color: Comps.colors["gray-4"]
                                                          })), React.createElement("div", {
                                                        className: "mr-2 transform hover:bg-gray-800 hover:scale-110 cursor-pointer border rounded-lg p-2",
                                                        style: {
                                                          borderColor: Comps.colors["gray-2"]
                                                        },
                                                        onClick: (function (param) {
                                                            return Curry._2(onEditChain, chain, undefined);
                                                          })
                                                      }, React.createElement(Icons.EditPencil.make, {
                                                            color: Comps.colors["gray-4"]
                                                          })), React.createElement("div", {
                                                        className: "mr-2 transform hover:bg-gray-800 hover:scale-110 cursor-pointer border rounded-lg p-2",
                                                        style: {
                                                          borderColor: Comps.colors["gray-2"]
                                                        },
                                                        onClick: (function (param) {
                                                            if (confirm("Really delete chain: " + chain.name + "?")) {
                                                              return Curry._1(onDeleteChain, chain);
                                                            }
                                                            
                                                          })
                                                      }, React.createElement(Icons.Trash.make, {
                                                            color: Comps.colors["gray-4"]
                                                          })))));
                              })))))), tmp$2);
  }
  return React.createElement(React.Fragment, undefined, nav, tmp$1);
}

var make = PackageViewer;

export {
  PackageFragment ,
  CreateChainMutation ,
  AuthTokensFragment ,
  EditorTemp ,
  make ,
  
}
/* Comps Not a pure module */
