// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Fetch from "bs-fetch/src/Fetch.mjs";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as OneGraphAuth from "./bindings/OneGraphAuth.mjs";
import * as RescriptRelay from "rescript-relay/src/RescriptRelay.mjs";
import * as RelayRuntime from "relay-runtime";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as OnegraphSubscriptionClient from "onegraph-subscription-client";

var appId = "4c1c8469-89fa-4995-ab5a-b22db4587381";

var match = typeof window === "undefined" ? undefined : window;

var isSsr = match === undefined;

var oneGraphUrl = "https://serve.onegraph.io/graphql?app_id=" + "0b066ba6-ed39-4db8-a497-ba0be34d5b2a";

var authConfig = {
  appId: appId
};

var auth = isSsr ? undefined : OneGraphAuth.create(authConfig);

var Graphql_error = /* @__PURE__ */Caml_exceptions.create("RelayEnv.Graphql_error");

function fetchQuery(operation, variables, _cacheConfig, _uploadables) {
  Belt_Option.flatMap(auth, OneGraphAuth.authHeaders);
  var __x = fetch(oneGraphUrl, Fetch.RequestInit.make(/* Post */2, {
              "content-type": "application/json",
              accept: "application/json",
              Authorization: "Bearer eH7zBV9qnXx1NDX_Bo94WyHRVK2qCuVc6LYN38ye7bA"
            }, Caml_option.some(JSON.stringify(Js_dict.fromList({
                          hd: [
                            "query",
                            operation.text
                          ],
                          tl: {
                            hd: [
                              "variables",
                              variables
                            ],
                            tl: /* [] */0
                          }
                        }))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined));
  return __x.then(function (resp) {
              if (resp.ok) {
                return resp.json();
              } else {
                return Promise.reject({
                            RE_EXN_ID: Graphql_error,
                            _1: "Request failed: " + resp.statusText
                          });
              }
            });
}

var OneGraphSubscriptionClient = {};

var oneGraphSubscriptionClient = Belt_Option.map(auth, (function (oneGraphAuth) {
        return new OnegraphSubscriptionClient.SubscriptionClient(appId, {
                    oneGraphAuth: oneGraphAuth
                  });
      }));

var subscriptionFunction = Belt_Option.map(oneGraphSubscriptionClient, (function (oneGraphSubscriptionClient, operation, variables, _cacheConfig) {
        var subscribeObservable = oneGraphSubscriptionClient.request({
              query: operation.text,
              variables: variables,
              operationName: operation.name
            });
        return RelayRuntime.Observable.create(function (sink) {
                    subscribeObservable.subscribe({
                          next: (function (data) {
                              return Curry._1(sink.next, data);
                            }),
                          error: sink.error,
                          complete: sink.complete
                        });
                    
                  });
      }));

var network = RelayRuntime.Network.create(fetchQuery, subscriptionFunction !== undefined ? Caml_option.valFromOption(subscriptionFunction) : undefined);

var environment = RescriptRelay.Environment.make(network, RescriptRelay.Store.make(new RelayRuntime.RecordSource(undefined), 100, undefined, undefined), undefined, undefined, undefined, undefined);

export {
  appId ,
  isSsr ,
  oneGraphUrl ,
  authConfig ,
  auth ,
  Graphql_error ,
  fetchQuery ,
  OneGraphSubscriptionClient ,
  oneGraphSubscriptionClient ,
  subscriptionFunction ,
  network ,
  environment ,
  
}
/* match Not a pure module */
