// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Uuid from "./bindings/Uuid.mjs";
import * as Uuid$1 from "uuid";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "rescript/lib/es6/js_dict.js";
import * as Graphql from "graphql";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as GraphQLUtils from "./bindings/GraphQLUtils.mjs";
import * as OneGraphJs from "./OneGraph.js";

function makeBlankBlock(kind) {
  var match = kind === "mutation" ? [
      /* Mutation */1,
      "mutation Untitled { __typename }"
    ] : (
      kind === "compute" ? [
          /* Compute */4,
          "# Fields on ComputeType will turn into variables for you to compute\n# based on other blocks or user input\ntype ComputeType {\n  name: String!\n}"
        ] : (
          kind === "subscription" ? [
              /* Subscription */2,
              "subscription Untitled { __typename }"
            ] : [
              /* Query */0,
              "query Untitled { __typename }"
            ]
        )
    );
  return {
          id: Uuid$1.v4(),
          title: "Untitled",
          description: "TODO",
          body: match[1],
          kind: match[0],
          contributedBy: undefined,
          services: []
        };
}

var fetchOneGraph = OneGraphJs.fetchOneGraph;

var baseState = JSON.parse("{}");

function Card(Props) {
  var block = Props.block;
  var ports = Props.ports;
  var onVariableInspected = Props.onVariableInspected;
  var onBlockInspected = Props.onBlockInspected;
  var ports$1 = Belt_Option.getWithDefault(ports, {});
  var ast = Graphql.parse(block.body);
  var operationDef = Belt_Array.get(ast.definitions, 0);
  if (operationDef === undefined) {
    return "Couldn't parse operation doc";
  }
  var other = block.title;
  var title = other === "Unknown" ? operationDef.name.value : other;
  var match = React.useState(function () {
        return {
                tab: /* Block */0,
                ast: ast
              };
      });
  var match$1 = operationDef.operation;
  var match$2 = match[0].tab;
  var tmp;
  if (match$2) {
    tmp = React.createElement("code", undefined, React.createElement("pre", {
              className: "text-black flex-1 bg-white w-full block rounded max-h-96 overflow-scroll text-sm whitespace-pre p-2"
            }, block.body));
  } else {
    var variables = Belt_Option.getWithDefault(Belt_Option.getExn(Belt_Array.get(ast.definitions, 0)).variableDefinitions, []);
    var variableEls = Belt_Array.map(variables, (function (def) {
            var name = def.variable.name.value;
            var port = Belt_Option.getWithDefault(Js_dict.get(ports$1, name), null);
            return React.createElement("li", {
                        onClick: (function ($$event) {
                            return Curry._3(onVariableInspected, $$event, block, def.variable.name.value);
                          })
                      }, React.createElement("div", {
                            className: "flex justify-start cursor-pointer text-gray-700 hover:text-blue-400 hover:bg-blue-200 bg-blue-100 rounded-md my-1 content-center"
                          }, React.createElement("div", {
                                className: "flex flex-grow font-medium align-middle inline-block content-center"
                              }, port, React.createElement("code", {
                                    className: "align-middle inline-block content-center"
                                  }, "$" + name))));
          }));
    tmp = React.createElement(React.Fragment, undefined, React.createElement("form", {
              className: "text-white"
            }, React.createElement("ul", undefined, variableEls)));
  }
  return React.createElement("div", {
              key: title,
              className: "bg-gray-900 shadow-lg rounded p-1"
            }, React.createElement("div", {
                  className: "group relative"
                }, React.createElement("div", {
                      className: "bg-gradient-to-b p-2 " + (
                        match$1 === "query" ? "bg-green-400" : (
                            match$1 === "mutation" ? "bg-red-400" : (
                                match$1 === "fragment" ? "bg-gray-400" : (
                                    match$1 === "subscription" ? "bg-yellow-400" : "bg-green-900"
                                  )
                              )
                          )
                      ),
                      onClick: (function ($$event) {
                          return Curry._2(onBlockInspected, $$event, block);
                        })
                    }, React.createElement("h3", {
                          className: "text-white text-sm overflow-x-scroll"
                        }, title)), tmp));
}

var createAssetWithStuff_id = Uuid.parseExn("812d3bb6-7552-41c6-8899-944a67cd7188");

var createAssetWithStuff_contributedBy = "@sgrove";

var createAssetWithStuff_services = ["mux"];

var createAssetWithStuff = {
  id: createAssetWithStuff_id,
  title: "CreateMuxAssetWithStuff",
  description: "Just a test",
  body: "mutation CreateMuxAssetWithStuff(\n  $normalizeAudio: Boolean = false\n  $perTitleEncode: Boolean = false\n  $playbackPolicy: [MuxVideoPlaybackPolicyEnumArg!] = PUBLIC\n) {\n  mux {\n    createAsset(\n      input: {\n        sourceUrl: \"\"\n        settings: {\n          normalizeAudio: $normalizeAudio\n          perTitleEncode: $perTitleEncode\n          playbackPolicy: $playbackPolicy\n        }\n      }\n    ) {\n      asset {\n        aspectRatio\n      }\n    }\n  }\n}",
  kind: /* Mutation */1,
  contributedBy: createAssetWithStuff_contributedBy,
  services: createAssetWithStuff_services
};

var gitHubUserFragment_id = Uuid.parseExn("084beb2a-aae1-4a59-a3e8-7beaa323bd1a");

var gitHubUserFragment_body = "fragment User on GitHubUser {\n  status {\n    indicatesLimitedAvailability\n    message\n    expiresAt\n    emojiHTML\n    emoji\n    createdAt\n  }\n}\n";

var gitHubUserFragment_contributedBy = "@sgrove";

var gitHubUserFragment_services = ["github"];

var gitHubUserFragment = {
  id: gitHubUserFragment_id,
  title: "GitHubUserWithStatus",
  description: "TODO",
  body: gitHubUserFragment_body,
  kind: /* Fragment */3,
  contributedBy: gitHubUserFragment_contributedBy,
  services: gitHubUserFragment_services
};

var setSlackStatus_id = Uuid.parseExn("084beb2a-aae1-4a59-a3e8-7ceaa383bd1a");

var setSlackStatus_body = "mutation SetSlackStatus($jsonBody: JSON!) {\n  slack {\n    makeRestCall {\n      post(\n        path: \"/api/users.profile.set\"\n        contentType: \"application/json\"\n        jsonBody: $jsonBody\n      ) {\n        jsonBody\n      }\n    }\n  }\n}";

var setSlackStatus_contributedBy = "@sgrove";

var setSlackStatus_services = ["slack"];

var setSlackStatus = {
  id: setSlackStatus_id,
  title: "SetSlackStatus",
  description: "Given some JSON, set the slack status",
  body: setSlackStatus_body,
  kind: /* Mutation */1,
  contributedBy: setSlackStatus_contributedBy,
  services: setSlackStatus_services
};

var gitHubStatus_id = Uuid.parseExn("262af487-b0f6-4658-ab89-99ad06bafc60");

var gitHubStatus_services = ["github"];

var gitHubStatus = {
  id: gitHubStatus_id,
  title: "GitHubStatus",
  description: "Get the current status message for a GitHub user.\n",
  body: "query GitHubStatus($login: String!) {\n  gitHub {\n    user(login: $login) {\n      status {\n        message\n        emoji\n        emojiHTML\n        expiresAt\n        indicatesLimitedAvailability\n      }\n    }\n  }\n}",
  kind: /* Query */0,
  contributedBy: undefined,
  services: gitHubStatus_services
};

var gitHubStatusChangeNotification_id = Uuid.parseExn("812d3bb6-7552-41c6-8899-944a67cd7128");

var gitHubStatusChangeNotification_contributedBy = "@sgrove";

var gitHubStatusChangeNotification_services = ["github"];

var gitHubStatusChangeNotification = {
  id: gitHubStatusChangeNotification_id,
  title: "GitHubStatusChangeNotification",
  description: "Be notified when a user updates their status on GitHub",
  body: "subscription GitHubStatusChangeNotification($login: String!, $pollingFrequencyInMinutes: Int = 1, $webhookUrl: String!) {\n  poll(\n    schedule: {every: {minutes: $pollingFrequencyInMinutes}}\n    onlyTriggerWhenPayloadChanged: true\n    webhookUrl: $webhookUrl\n  ) {\n    query {\n      gitHub {\n        user(login: $login) {\n          status {\n            emoji\n            emojiHTML\n            expiresAt\n            indicatesLimitedAvailability\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
  kind: /* Subscription */2,
  contributedBy: gitHubStatusChangeNotification_contributedBy,
  services: gitHubStatusChangeNotification_services
};

var watchTwitterFollower_id = Uuid.parseExn("ba5bcd62-ddc9-4195-9e5f-e87e8c6d812c");

var watchTwitterFollower_contributedBy = "@sgrove";

var watchTwitterFollower_services = ["twitter"];

var watchTwitterFollower = {
  id: watchTwitterFollower_id,
  title: "WatchTwitterFollowers",
  description: "Watch for Twitter follower count change",
  body: "subscription WatchTwitterFollowers($twitterHandle: String!) {\n  poll(\n    schedule: { every: { minutes: 1 } }\n    onlyTriggerWhenPayloadChanged: true\n    webhookUrl: \"https://serve.onegraph.com/webhook/null\"\n  ) {\n    query {\n      twitter {\n        user(screenName: $twitterHandle) {\n          followersCount\n        }\n      }\n    }\n  }\n}",
  kind: /* Subscription */2,
  contributedBy: watchTwitterFollower_contributedBy,
  services: watchTwitterFollower_services
};

var insertFollowersMutation_id = Uuid.parseExn("bd8c0be8-16e0-40ed-9ef8-5b9c2a9b822f");

var insertFollowersMutation_contributedBy = "@sgrove";

var insertFollowersMutation_services = ["google"];

var insertFollowersMutation = {
  id: insertFollowersMutation_id,
  title: "InsertFollowersMutation",
  description: "Watch for Twitter follower count change",
  body: "mutation InsertFollowersMutation(\n  $sheetId: String!\n  $sheetName: String = \"Sheet1\"\n  $followerCount: String!\n  $timestamp: String!\n) {\n  google {\n    sheets {\n      appendValues(\n        id: $sheetId\n        majorDimenson: \"ROWS\"\n        range: $sheetName\n        valueInputOption: \"RAW\"\n        insertDataOption: \"INSERT_ROWS\"\n        values: [\n          [\n            $followerCount\n            $timestamp\n          ]\n        ]\n      ) {\n        spreadsheetId\n        updates {\n          updatedCells\n          updatedColumns\n        }\n      }\n    }\n  }\n}",
  kind: /* Mutation */1,
  contributedBy: insertFollowersMutation_contributedBy,
  services: insertFollowersMutation_services
};

var slackReactionEvent_id = Uuid.parseExn("900b0c65-9953-4921-9428-4e30232d3872");

var slackReactionEvent_contributedBy = "@sgrove";

var slackReactionEvent_services = ["slack"];

var slackReactionEvent = {
  id: slackReactionEvent_id,
  title: "SlackReactionSubscription",
  description: "Get notified when a reaction is added to a message",
  body: "subscription SlackReactionSubscription {\n  slack(webhookUrl: \"https://serve.onegraph.com/webhook/null\") {\n    reactionAddedEvent {\n      eventTime\n      event {\n        user {\n          id\n          name          \n        }        \n        eventTs\n        reaction\n        item {\n          channel {\n            name\n          }\n          message {\n            permaLink\n            user {\n              id\n              name              \n            }\n            text\n            ts\n          }\n        }        \n      }\n    }\n  }\n}\n",
  kind: /* Subscription */2,
  contributedBy: slackReactionEvent_contributedBy,
  services: slackReactionEvent_services
};

var addToDocMutation_id = Uuid.parseExn("2ebf702b-5c89-4bab-9f4b-2a5860f13de0");

var addToDocMutation_contributedBy = "@daniel";

var addToDocMutation_services = ["google"];

var addToDocMutation = {
  id: addToDocMutation_id,
  title: "AddToDocMutation",
  description: "",
  body: "mutation AddToDocMutation($sheetId: String!, $row: [String!]!) {\n  google {\n    sheets {\n      appendValues(\n        id: $sheetId\n        valueInputOption: \"USER_ENTERED\"\n        majorDimenson: \"ROWS\"\n        range: \"'Raw Data'!A1\"\n        values: [$row]\n      ) {\n        updates {\n          spreadsheetId\n          updatedRange\n          updatedCells\n          updatedData {\n            values\n          }\n        }\n      }\n    }\n  }\n}\n",
  kind: /* Mutation */1,
  contributedBy: addToDocMutation_contributedBy,
  services: addToDocMutation_services
};

var blocks = [
  {
    id: Uuid.parseExn("fc16a4bb-89ea-4685-93a1-3d42ff9d875a"),
    title: "CreateLead",
    description: "TODO",
    body: "mutation CreateLead(\n  $firstName: String!\n  $lastName: String!\n  $email: String!\n) {\n  salesforce {\n    createLead(\n      input: {\n        lead: {\n          firstName: $firstName\n          lastName: $lastName\n          email: $email\n          company: \"Unknown\"\n        }\n      }\n    ) {\n      lead {\n        id\n        oneGraphId\n        email\n        name\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["salesforce"]
  },
  {
    id: Uuid.parseExn("fc26a4bb-89ca-4685-93a1-3d42ff9d875a"),
    title: "CreateIssue",
    description: "TODO",
    body: "mutation CreateIssue(\n  $repositoryId: ID!\n  $title: String!\n  $labelIds: [ID!]!\n  $body: String!\n) {\n  gitHub {\n    createIssue(\n      input: {\n        repositoryId: $repositoryId\n        title: $title\n        labelIds: $labelIds\n        body: $body\n      }\n    ) {\n      issue {\n        id\n        oneGraphId\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("fc16a4bb-89eb-4685-93a1-3d42ff9d875a"),
    title: "LinkNodes",
    description: "TODO",
    body: "mutation LinkNodes(\n  $endNodeOneGraphId: ID!\n  $startNodeOneGraphId: ID!\n) {\n  oneGraph {\n   forward: linkOneGraphNodes(\n      input: {\n        startNodeOneGraphId: $startNodeOneGraphId\n        endNodeOneGraphId: $endNodeOneGraphId\n      }\n    ) {\n      __typename\n    }\n   backward: linkOneGraphNodes(\n      input: {\n        startNodeOneGraphId: $endNodeOneGraphId\n        endNodeOneGraphId: $startNodeOneGraphId\n      }\n    ) {\n      __typename\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["onegraph"]
  },
  {
    id: Uuid.parseExn("fc16a4fb-89eb-4685-93a1-3d42ff9d875a"),
    title: "IssueEvents",
    description: "TODO",
    body: "subscription IssueEvents(\n  $repoOwner: String!\n  $repoName: String!\n) {\n  github {\n    issuesEvent(\n      input: { repoOwner: $repoOwner, repoName: $repoName }\n    ) {\n      issue {\n        title\n        id\n        number\n      }\n      action\n    }\n  }\n}",
    kind: /* Subscription */2,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("fc16a4bb-89ea-4885-93a1-3d42ff9d875a"),
    title: "AmILoggedIntoDevTo",
    description: "Tell if a user is logged in (either via an `$apiKey` or the OAuth flow).\nNote: We'll deprecate this field in favor of `id` as with our other integrations if/when DEV adds an endpoint to retrieve information about the currently logged in user. However, this field can be safely relied on to work even after that happens.\n\nYou can find or create your DEV.to API keys in [the settings menu on dev.to](https://dev.to/settings/account)\n",
    body: "query AmILoggedIntoDevTo($apiKey: String) {\n  me(auths: { devToAuth: { apiKey: $apiKey } }) {\n    devTo {\n      isLoggedIn\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("df9d1ca1-3e72-4c82-8175-c072e619e3ec"),
    title: "CreateDevToArticle",
    description: "Creates an (unpublished) article on DEV.to\n\nSee the [Publishing and Unpublishing](SetDevToArticlePublished) example for how to publish the article after creating it.\n",
    body: "mutation CreateDevToArticle($apiKey: String!) {\n  devTo(auths: { devToAuth: { apiKey: $apiKey } }) {\n    createArticle(\n      input: {\n        article: {\n          title: \"Posting articles to dev.to from any programming language via GraphQL: An Exhaustive Guide\"\n          bodyMarkdown: \"Just use OneGraph, of course!\"\n          tags: [\"graphql\", \"onegraph\"]\n        }\n      }\n    ) {\n      article {\n        bodyHtml\n        bodyMarkdown\n        id\n        slug\n        tags\n        url\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("a444b655-f9ea-4c7e-8616-4213e6f0706a"),
    title: "CreateDevToWebhook",
    description: "Creates a webhook that will be notified whenever an article is created or published on DEV.to\n\nSee the counter example on [Destroying a Webhook on DEV.to](DestroyDevToWebhook).\n\nYou can find or create your DEV.to API keys in [the settings menu on dev.to](https://dev.to/settings/account)\n",
    body: "mutation CreateDevToWebhook($apiKey: String!) {\n  devTo(auths: { devToAuth: { apiKey: $apiKey } }) {\n    createWebhook(\n      input: {\n        webhookEndpoint: {\n          source: \"OneGraph\"\n          targetUrl: \"https://websmee.com/hook/dev-to-example?_websmee_inspect\"\n          events: [\n            \"article_created\"\n            \"article_updated\"\n          ]\n        }\n      }\n    ) {\n      webhook {\n        id\n        source\n        targetUrl\n        events\n        createdAt\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("ccc225f9-7b87-46c0-8657-6b5d831b1f8f"),
    title: "DestroyDevToWebhook",
    description: "Destroys a webhook on DEV.to by its `id`.\n\nSee the counter example on [Creating a Webhook on DEV.to](CreateDevToWebhook).\n\nYou can find or create your DEV.to API keys in [the settings menu on dev.to](https://dev.to/settings/account)\n",
    body: "mutation DestroyDevToWebhook($apiKey: String!, $id: Int!) {\n  devTo(auths: { devToAuth: { apiKey: $apiKey } }) {\n    destroyWebhook(input: { id: $id }) {\n      webhook {\n        id\n        source\n        targetUrl\n        events\n        createdAt\n        user {\n          name\n          username\n          twitterUsername\n          githubUsername\n          websiteUrl\n          profileImage\n          profileImage90\n        }\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("13206aaf-93d9-4452-b1b3-aaa4358b2be6"),
    title: "FindMyDevToWebhooks",
    description: "Lists all of the webhooks you've created on DEV.to\n\nYou can find or create your DEV.to API keys in [the settings menu on dev.to](https://dev.to/settings/account)\n",
    body: "query FindMyDevToWebhooks($apiKey: String!) {\n  me(auths: { devToAuth: { apiKey: $apiKey } }) {\n    devTo {\n      webhooks {\n        id\n        source\n        targetUrl\n        events\n        createdAt\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("2fd6b964-2f0e-4428-a53f-83d20995efb4"),
    title: "FindMyTwitchUserIdAndEmail",
    description: "Finds a few details about the user if they're logged into Twitch:\n\n- Twitch `userId`\n- email\n- whether the email has been verified by Twitch (`emailVerified`)\n- The display name (what you'd see in the Twitch chat)\n",
    body: "query FindMyTwitchUserIdAndEmail {\n  me {\n    twitchTv {\n      id\n      email\n      emailVerified\n      displayName\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["twitch-tv"]
  },
  {
    id: Uuid.parseExn("d6b0e341-5da8-4c00-b424-a1d0e6027266"),
    title: "FindUserContributionToOrgCount",
    description: "Finds out how many PRs have been merged across an org for a given user - use this to reward your community members, like Gatsby!\n",
    body: "query FindUserContributionToOrgCount(\n  # You'll need to format this string when fetching this query\n  # at runtime.\n  # For example, your JavaScript might look like:\n  # const query = `org:${repoOwner} author:${username} type:pr is:merged`;\n  $query: String = \"org:onegraph author:sgrove type:pr is:merged\"\n) {\n  gitHub {\n    search(first: 1, query: $query, type: ISSUE) {\n      contributionCount: issueCount\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("658fa568-0f76-4616-9c7f-e926cbed805d"),
    title: "GetNpmPackageDownloads",
    description: "Get the downloads for a package on npm given the package name\n",
    body: "query GetNpmPackageDownloads($name: String!) {\n  npm {\n    package(name: $name) {\n      downloads {\n        lastMonth {\n          count\n        }\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["npm"]
  },
  {
    id: Uuid.parseExn("eb934b23-8d20-4507-bc3d-d85cbc2b913a"),
    title: "AddPullRequestCommentMutation",
    description: "Add a comment to a pull request given its id - see the [GitHubGetPullRequest example](GitHubGetPullRequest) for how to find a PR's id given its repository and number.\n",
    body: "mutation AddPullRequestCommentMutation(\n  $pullRequestId: ID!\n  $body: String!\n) {\n  gitHub {\n    addComment(\n      input: { body: $body, subjectId: $pullRequestId }\n    ) {\n      subject {\n        ... on GitHubPullRequest {\n          id\n          title\n          comments {\n            nodes {\n              id\n              body\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("c3f66bab-d8d7-4081-9a2f-c4d907db071c"),
    title: "CreateBranchMutation",
    description: "Create a branch name `$branchName` (from `master`) on the GitHub project `${repoOwner}/${repoName}`\n",
    body: "mutation CreateBranchMutation(\n  $repoOwner: String!\n  $repoName: String!\n  $branchName: String!\n) {\n  gitHub {\n    createBranch_oneGraph(\n      input: {\n        branchName: $branchName\n        repoName: $repoName\n        repoOwner: $repoOwner\n      }\n    ) {\n      ref_: ref {\n        name\n        id\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("27c77920-dd82-4596-a293-bfc0e12128bb"),
    title: "GitHubCreateIssueCommentMutation",
    description: "Add a new comment on a GitHub issue.\n",
    body: "mutation GitHubCreateIssueCommentMutation {\n  gitHub {\n    addComment(\n      input: {\n        body: \"Comment added from OneGraph\"\n        subjectId: \"MDU6SXNzdWU0MTQ4ODg3MTM=\"\n      }\n    ) {\n      commentEdge {\n        node {\n          body\n          url\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("c50233e0-1331-4f83-bc67-8285af9ee41e"),
    title: "UpdateFileMutation",
    description: "Create a single commit on the GitHub project `${repoOwner}/${repoName}` that \"upserts\" (creates a new file if it doesn't exist, or updates it if it does).\n\nFor example, to add a new file \"/examples/MyExample.md\" to the [OneGraph GraphQL Docs Repository](https://github.com/OneGraph/graphql-docs/tree/master/src/examples), the following variables would work:\njavascript\n{\n  \"repoName\": \"graphql-docs\",\n  \"repoOwner\": \"OneGraph\",\n  \"branchName\": \"master\",\n  \"path\": \"src/examples/MyExample.md\",\n  \"message\": \"Adding a new example\",\n  \"content\": \"Example file content here\",\n  \"sha\": null\n}\n\nNote that if you're _updating_ a file, you'll need to provide its *current* sha for the mutation to succeed. See the [GitHubGetFileShaAndContent example](GitHubGetFileShaAndContent) for how to find an existing file's sha.\n",
    body: "mutation UpdateFileMutation(\n  $repoOwner: String!\n  $repoName: String!\n  $branchName: String!\n  $path: String!\n  $message: String!\n  $content: String!\n  $sha: String!\n) {\n  gitHub {\n    createOrUpdateFileContent_oneGraph(\n      input: {\n        message: $message\n        path: $path\n        repoName: $repoName\n        repoOwner: $repoOwner\n        branchName: $branchName\n        plainContent: $content\n        existingFileSha: $sha\n      }\n    ) {\n      commit {\n        message\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("38c2109d-f1d5-403a-800e-b0439f622531"),
    title: "DeleteIssueById",
    description: "You'll need to find the GitHub issue id first (see the [GitHubFindIssueIdByNumber](GitHubFindIssueIdByNumber) example) to use as the argument to `issueId`.\n\nSince issue ids are globally unique across every kind of object in GitHub, you won't need to add the repository owner/name, just the `id`!\njavascript\n{\n  \"id\": \"MDU6SXNzdWU1NDUyNDk2ODg=\"\n}\n",
    body: "mutation DeleteIssueById($id: ID!) {\n  gitHub {\n    deleteIssue(input: { issueId: $id }) {\n      repository {\n        issues(\n          first: 0\n          orderBy: { direction: DESC, field: CREATED_AT }\n        ) {\n          totalCount\n        }\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("fa51e70b-3918-4814-af03-11267f5b55d6"),
    title: "GitHubFindIssueIdByNumber",
    description: "Given a repository `$repoOwner`/`$repoName`, find the id of an issue by its `$number`.\n\nUsually users think of \"issue #10\", but most GitHub GraphQL mutations refer to issues by their id, so you'll find this query quite helpful! For example, you'll need the issue id if you want to [Delete a GitHub issue](GitHubDeleteIssueById).\n\n\nTo find the id of issue #3 on the [OneGraph GraphQL Docs Repository](https://github.com/OneGraph/graphql-docs/issues/1), we could pass in the following variables:\n  \n  ```javascript\n  {\n    \"repoName\": \"graphql-docs\",\n    \"repoOwner\": \"OneGraph\",\n    \"number\": 3\n  }\n  ```\n",
    body: "query GitHubFindIssueIdByNumber(\n  $repoOwner: String!\n  $repoName: String!\n  $number: Int!\n) {\n  gitHub {\n    repository(owner: $repoOwner, name: $repoName) {\n      issue(number: $number) {\n        id\n        title\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("78ff6314-a4cd-4bf4-adf9-783e5339ec02"),
    title: "GetFileTextContentsQuery",
    description: "Get the (textual) value of a file in a GitHub repo via GraphQL\n- `$branchAndFilePath` should be formatted as `${branchName}:${filePath without the leading\"/'}`\n\nNote that the `text` field will be null if the file is a binary blog (such as an image).\n\nIf you need to read the binary content, email [support@onegraph.com](mailto:support@onegraph.com?subject=Can you add a base64-encoded binary content field to the `GitHubBlob` type on OneGraph?) and we can stitch in the [corresponding REST endpoint](https://developer.github.com/v3/git/blobs/#get-a-blob)\n",
    body: "query GetFileTextContentsQuery($repoName: String!, $repoOwner: String!, $branchAndFilePath: String = \"master:README.md\") {\n  gitHub {\n    repository(name: $repoName, owner: $repoOwner) {\n      object_: object(expression: $branchAndFilePath) {\n        ... on GitHubBlob {\n          sha: oid # alias this to `sha`, as that's a bit more familiar\n          byteSize\n          isBinary\n          # Note the text content will be null if\n          # `isBinary` is true\n          text\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("42ccb1c1-cb45-4db7-be7a-17c22e063d80"),
    title: "GetPullRequest",
    description: "Get the details of a pull request by its number.\n\nAlso see:\n- how to [Merge a Pull Request](GitHubMergePullRequest)\n- how to [Add a comment to a Pull Request](GitHubAddPullRequestComment)\n",
    body: "query GetPullRequest {\n  gitHub {\n    repository(owner: \"OneGraph\", name: \"graphql-docs\") {\n      pullRequest(number: 1) {\n        id # The `id` is useful if you want to add a comment to the PR\n        headRefOid # The `headRefOid` sha is useful if you need to merge this PR\n        title\n        state\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("4730f263-e470-44af-a9ce-12812eb7080e"),
    title: "GitHubIsRepositoryAFork",
    description: "Given a GitHub `$repoOwner`/`$repoName`, find if the corresponding repository is fork (`gitHub.repository.isFork`) - and if so, what the original repository is `gitHub.repository.parent.nameWithOwner`.\n",
    body: "query GitHubIsRepositoryAFork(\n  $repoOwner: String!\n  $repoName: String!\n) {\n  gitHub {\n    repository(owner: $repoOwner, name: $repoName) {\n      id\n      ## Is this repository a fork?\n      isFork\n      parent {\n        ## if it is a fork, what's the original?\n        nameWithOwner\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("fee8f921-f984-4ac0-b8c4-298a102a3f0f"),
    title: "MergePullRequest",
    description: "Merge a GitHub pull request by its number with `$title` as the commit message.\n\nNote as a precaution against merging a PR into the wrong target, you'll need to provide the current sha of the target branch head. You can find the sha under the `headRef.oid` field of the Pull Request, as per the [GitHubGetPullRequest example](GitHubGetPullRequest)\n\nTo merge the first PR on the [OneGraph GraphQL Docs Repository](https://github.com/OneGraph/graphql-docs/pulls/1), we could pass in the following variables:\njavascript\n{\n  \"repoName\": \"graphql-docs\",\n  \"repoOwner\": \"OneGraph\",\n  \"number\": 1,\n  \"title\": \"Merge the GitHub examples, thank you @dwwoelfel!\",\n  \"sha\": \"44d4e20fd739f486411049b7e94849d7b3332770\"\n}\n",
    body: "mutation MergePullRequest(\n  $repoOwner: String!\n  $repoName: String!\n  $number: Int!\n  $sha: String!\n  $title: String!\n) {\n  gitHub {\n    mergePullRequest_oneGraph(\n      input: {\n        repoOwner: $repoOwner\n        repoName: $repoName\n        number: $number\n        sha: $sha\n        commitTitle: $title\n      }\n    ) {\n      pullRequest {\n        id\n        title\n        merged\n        state\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("688de94a-95a7-4cae-893f-ec66b2791a65"),
    title: "GitHubOpenPullRequestsQuery",
    description: "Fetch the first ten open pull requests for a GitHub repository, sorted by when they were opened.\n",
    body: "query GitHubOpenPullRequestsQuery {\n  gitHub {\n    repository(name: \"graphql-js\", owner: \"graphql\") {\n      pullRequests(\n        orderBy: {direction: DESC, field: CREATED_AT}\n        first: 10\n        states: OPEN\n      ) {\n        nodes {\n          title\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("1a8b5ab8-1682-4f58-9ff8-0aa25b167ff3"),
    title: "GitHubUnresolvedIssuesQuery",
    description: "Fetch the first ten open issues for a GitHub repository, sorted by when they were created.\n",
    body: "query GitHubUnresolvedIssuesQuery {\n  gitHub {\n    viewer {\n      issues(\n        orderBy: {direction: DESC, field: CREATED_AT}\n        first: 10\n        states: OPEN\n      ) {\n        edges {\n          node {\n            title\n            repository {\n              nameWithOwner\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["github"]
  },
  {
    id: Uuid.parseExn("c8aed900-23ea-42d8-85ee-6be09146d36e"),
    title: "IntercomCreateUserMutation",
    description: "Create a new user on Intercom.\n",
    body: "mutation IntercomCreateUserMutation {\n  intercom {\n    createUser(input: {email: \"newuser@example.com\", name: \"New User\"}) {\n      user {\n        id\n        email\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["intercom"]
  },
  {
    id: Uuid.parseExn("0e76d866-b536-4375-a039-aacee06809fc"),
    title: "IntercomOpenConversations",
    description: "List open conversations on Intercom.\n",
    body: "query IntercomOpenConversations {\n  intercom {\n    conversations(\n      displayAsPlaintext: true\n      orderBy: ASC\n      sortByField: WAITING_SINCE\n    ) {\n      nodes {\n        conversationMessage {\n          body\n        }\n        customers {\n          name\n          email\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["intercom"]
  },
  {
    id: Uuid.parseExn("eaf18a0d-7330-4787-ae26-08895681ef12"),
    title: "IntercomUsersWithConversationsQuery",
    description: "List Intercom conversations for users that have been active recently.\n",
    body: "query IntercomUsersWithConversationsQuery {\n  intercom {\n    users(first: 10, orderBy: DESC, sortByField: LAST_REQUEST_AT) {\n      nodes {\n        email\n        conversations(displayAsPlaintext: true) {\n          nodes {\n            id\n            conversationMessage {\n              body\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["intercom"]
  },
  {
    id: Uuid.parseExn("d72c91f8-ab50-417e-aaaa-50cee543871f"),
    title: "IsDomainAvailableQueryOnZeit",
    description: "Check if a domain is available on Zeit\n",
    body: "query IsDomainAvailableQuery($domain: String!) {\n  zeit {\n    domainAvailable(name: $domain) {\n      available\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["zeit"]
  },
  {
    id: Uuid.parseExn("3fb362ac-440b-4876-9f74-23eae7009e4b"),
    title: "MuxCreateVideoAsset",
    description: "Create a video asset on Mux with a source video, an image overlay, and textual subtitles.\n\nYou'll need your Mux access token `id`/`secret` for the variables (find them on the [Mux dashboard settings](https://dashboard.mux.com/settings/access-tokens)):\n\n{\n  \"secret\": \"mymuxsecret\",\n  \"tokenId\": \"mytokenid\"\n}\n",
    body: "mutation MuxCreateVideoAsset($secret: String!, $tokenId: String!) {\n  mux(auths: {muxAuth: {accessToken: {secret: $secret, tokenId: $tokenId}}}) {\n    createAsset(\n      input: {\n        # The source video to start with (thanks to http://techslides.com/sample-webm-ogg-and-mp4-video-files-for-html5 for providing this!)\n        sourceUrl: \"http://techslides.com/demos/sample-videos/small.mp4\"\n        # Any images we want to overlay on top of the video\n        imageInputs: [\n          {\n            url: \"https://avatars2.githubusercontent.com/u/35296?s=460&u=9753e52e664dba2ab83b2c08b9a6cc90a5cac7bb&v=4\"\n            overlaySettings: {\n              verticalAlign: BOTTOM\n              horizontalAlign: LEFT\n              verticalMargin: \"5%\"\n              horizontalMargin: \"5%\"\n              width: \"15%\"\n              height: \"15%\"\n            }\n          }\n        ]\n        # Subtitles or closed captions: each will be included as a separate option in the final video\n        textualInputs: [\n          {\n            url: \"https://egghead.io/api/v1/lessons/graphql-use-graphql-primitive-types/subtitles\"\n            textType: SUBTITLES\n            languageCode: \"en\"\n            name: \"English\"\n            passthrough: \"Data attached to this subtitle resource\"\n          }\n        ]\n        # Metadata to control permissions for the playback, to attach some custom data to the resource, set the mp4 support level, etc.\n        settings: {\n          isTest: false\n          masterAccess: TEMPORARY\n          mp4Support: STANDARD\n          normalizeAudio: true\n          passthrough: \"{\\\"json-also-works\\\": true}\"\n          perTitleEncode: true\n          playbackPolicy: PUBLIC\n          demo: false\n        }\n      }\n    ) {\n      # Our created asset!\n      asset {\n        ...MuxVideoAssetFragment\n      }\n    }\n  }\n}\n\nfragment MuxVideoAssetFragment on MuxVideoAsset {\n  isLive\n  id\n  isTest\n  errors {\n    type\n    messages\n  }\n  playbackIds {\n    id\n    policy\n  }\n  status\n}\n",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["mux"]
  },
  {
    id: Uuid.parseExn("97202a25-b47d-48af-96f5-cd14725d0e6d"),
    title: "MuxListVideoAssetNoPaginationQuery",
    description: "List your video asset on Mux (without pagination).\n\nYou'll need your Mux access token `id`/`secret` for the variables (find them on the [Mux dashboard settings](https://dashboard.mux.com/settings/access-tokens)):\n\n{\n  \"secret\": \"mymuxsecret\",\n  \"tokenId\": \"mytokenid\"\n}\n",
    body: "query MuxListAssetQuery(\n  $secret: String!\n  $tokenId: String!\n) {\n  mux(\n    auths: {\n      muxAuth: {\n        accessToken: { secret: $secret, tokenId: $tokenId }\n      }\n    }\n  ) {\n    video {\n      assets {\n        edges {\n          node {\n            ...MuxVideoAssetFragment\n          }\n        }\n      }\n    }\n  }\n}\n\nfragment MuxVideoAssetFragment on MuxVideoAsset {\n  isLive\n  id\n  isTest\n  errors {\n    type\n    messages\n  }\n  playbackIds {\n    id\n    policy\n  }\n  status\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["mux"]
  },
  {
    id: Uuid.parseExn("22211818-3225-47bf-87c6-be8028f54123"),
    title: "MuxVideoAssetByOneGraphNodeId",
    description: "Look up a Mux video asset directly by its oneGraphNodeId.\n\nYou'll need your Mux access token `id`/`secret` for the variables (find them on the [Mux dashboard settings](https://dashboard.mux.com/settings/access-tokens)):\n\n{\n  \"secret\": \"mymuxsecret\",\n  \"tokenId\": \"mytokenid\"\n}\n",
    body: "query MuxVideoAssetByOneGraphNodeId(\n  $tokenId: String!\n  $secret: String!\n  $oneGraphNodeId: ID!\n) {\n  oneGraphNode(\n    auths: {\n      muxAuth: {\n        accessToken: { secret: $secret, tokenId: $tokenId }\n      }\n    }\n    oneGraphId: $oneGraphNodeId\n  ) {\n    ... on MuxVideoAsset {\n      ...MuxVideoAssetFragment\n    }\n  }\n}\n\nfragment MuxVideoAssetFragment on MuxVideoAsset {\n  isLive\n  id\n  isTest\n  errors {\n    type\n    messages\n  }\n  playbackIds {\n    id\n    policy\n  }\n  status\n  oneGraphId\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["mux"]
  },
  {
    id: Uuid.parseExn("8dd80b56-1d1a-4fce-97cd-b63d3f63526c"),
    title: "MuxVideoAssetQuery",
    description: "Find a VideoAsset on Mux via its id.\n\nYou'll need your Mux access token `id`/`secret` for the variables (find them on the [Mux dashboard settings](https://dashboard.mux.com/settings/access-tokens)), and the id of your Mux asset:\n\n{\n  \"secret\": \"mymuxsecret\"\n  \"tokenId\": \"mytokenid\"\n  \"id\": \"assetId\"\n}\n",
    body: "query MuxAssetQuery(\n  $id: String!\n  $secret: String!\n  $tokenId: String!\n) {\n  mux(\n    auths: {\n      muxAuth: {\n        accessToken: { secret: $secret, tokenId: $tokenId }\n      }\n    }\n  ) {\n    video {\n      asset(id: $id) {\n        ...MuxVideoAssetFragment\n      }\n    }\n  }\n}\n\nfragment MuxVideoAssetFragment on MuxVideoAsset {\n  isLive\n  id\n  isTest\n  errors {\n    type\n    messages\n  }\n  playbackIds {\n    id\n    policy\n  }\n  status\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["mux"]
  },
  {
    id: Uuid.parseExn("8fdae3d2-cd71-429f-9e93-74a669ab7094"),
    title: "MyDevToArticlesPendingPublication",
    description: "Finds all articles I've written on DEV.to (sorted by recency) that haven't been published yet.\n",
    body: "query MyDevToArticlesPendingPublication($apiKey: String!) {\n  me(auths: { devToAuth: { apiKey: $apiKey } }) {\n    devTo {\n      articles(publishStatus: UNPUBLISHED) {\n        nodes {\n          id\n          title\n          bodyMarkdown\n        }\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("71d791bc-80d1-47d9-800b-d7d41059dd34"),
    title: "RecentlyRisingTopArticles",
    description: "Find the recently rising top articles on DEV\n",
    body: "query RecentlyRisingTopArticles {\n  devTo {\n    articles(state: \"rising\") {\n      nodes {\n        id\n        title\n        url\n        socialImage\n        publishedAt\n        user {\n          name\n          username\n          githubUsername\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("27abfd2c-02e6-42b4-bfe5-99fe838d00a8"),
    title: "RssFeeds",
    description: "You can build a podcast player with GraphQL simply by passing in a `$url` param, for example:\n\n{\"url\": \"https://feeds.simplecast.com/tRYUp5wn\"}\n",
    body: "query RssFeed($url: String!) {\n  rss {\n    rss2Feed(url: $url) {\n      title\n      items {\n        title\n        ## Enclosure contains the link to the podcast audio\n        enclosure {\n          url # Use this in an <audio src=\"\"> tag for a podcast player!\n          length\n          mime\n        }\n        content\n        description\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@dabit3",
    services: ["rss"]
  },
  {
    id: Uuid.parseExn("c0b24dcd-1f05-46f9-bea0-2d8aa038883f"),
    title: "SalesforceCasesQuery",
    description: "List open cases on Salesforce.\n",
    body: "query SalesforceCasesQuery {\n  salesforce {\n    cases(\n      filter: {status: {notEqualTo: \"Closed\"}}\n      sortByField: PRIORITY\n      orderBy: ASC\n    ) {\n      edges {\n        node {\n          id\n          status\n          priority\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["salesforce"]
  },
  {
    id: Uuid.parseExn("06fa326f-464c-4d03-aefa-4b5f9875d51c"),
    title: "SalesforceLeadsQuery",
    description: "List leads on Salesforce, ordered by when they were created.\n",
    body: "query SalesforceLeadsQuery {\n  salesforce {\n    leads(sortByField: CREATED_DATE, orderBy: DESC, first: 10) {\n      nodes {\n        firstName\n        lastName\n        email\n        createdDate\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["salesforce"]
  },
  {
    id: Uuid.parseExn("9b67d6cf-a422-417c-9e32-4dfb12f133cf"),
    title: "SalesforceOpportunitiesQuery",
    description: "List Opportunities on Salesforce, where the account has more then 10 employees.\n",
    body: "query SalesforceOpportunitiesQuery {\n  salesforce {\n    opportunities(\n      first: 10\n      filter: {account: {numberOfEmployees: {greaterThan: 10}}}\n    ) {\n      nodes {\n        name\n        expectedRevenue\n        probability\n        stageName\n        account {\n          name\n          numberOfEmployees\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["salesforce"]
  },
  {
    id: Uuid.parseExn("c0cad642-8fa0-43f8-b84c-64c06340c948"),
    title: "SetDevToArticlePublished",
    description: "Publishes (and un-publishes) an article by its `id` (`$articleId`).\n\nYou can find or create your DEV.to API keys in [the settings menu on dev.to](https://dev.to/settings/account)\n",
    body: "mutation SetDevToArticlePublished(\n  $apiKey: String!\n  $articleId: Int!\n  $isPublished: Boolean!\n) {\n  devTo(auths: { devToAuth: { apiKey: $apiKey } }) {\n    setArticlePublished(\n      input: { id: $articleId, published: $isPublished }\n    ) {\n      article {\n        bodyHtml\n        bodyMarkdown\n        id\n        slug\n        tags\n        publishedAt\n        publishedTimestamp\n        url\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["dev-to"]
  },
  {
    id: Uuid.parseExn("28bf49b2-1d8f-4f8f-8ccb-7eb2acaf397e"),
    title: "SpecificRangeInGoogleSheets",
    description: "Reads from a specific range of cells in a Google sheets\n",
    body: "query SpecificRangeInGoogleSheets(\n  # The id of the sheet to pull data from, in\n  # https://docs.google.com/spreadsheets/d/1CRUduucIQKot-Bwvh4teSblQTWPsIoNUs6AGLAg7Sjs/edit\n  # it would be \"1CRUduucIQKot-Bwvh4teSblQTWPsIoNUs6AGLAg7Sjs\"\n  $id: String!\n  # Normal syntax for selecting ranges in sheets\n  $ranges: String = \"e12:f16\"\n) {\n  google {\n    sheets {\n      sheet(\n        id: $id\n        ranges: $ranges\n        includeGridData: true\n      ) {\n        sheets {\n          data {\n            rowData {\n              values {\n                formattedValue\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["google"]
  },
  {
    id: Uuid.parseExn("7f31ca47-3715-4c95-8a19-a897078ce98b"),
    title: "AboutMe",
    description: "Find the currently logged-in Spotify user's email, name, profile image, etc. from GraphQL!\n",
    body: "## Find some information about the currently logged-in\n## Spotify user.\nquery AboutMe {\n  me {\n    spotify {\n      country\n      displayName\n      email\n      href\n      id\n      images {\n        height\n        url\n        width\n      }\n      product\n      type\n      uri\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["spotify"]
  },
  {
    id: Uuid.parseExn("ac28feb9-dbed-4116-afb1-d9bce22a8629"),
    title: "FullPlayer",
    description: "Control your Spotify player completely from GraphQL!\n\n- Find the currently logged-in Spotify user with `AboutMe`\n- Search for matching Spotify tracks (songs) with the GraphQL operation `Search`\n- Use the mutations (`Resume`/`Pause`/`Next`/`Previous`/`Play`) to control the Spotify player\n",
    body: "\n## Find some information about the currently logged-in\n## Spotify user.\nquery AboutMe {\n  me {\n    spotify {\n      birthdate\n      country\n      displayName\n      email\n      href\n      id\n      images {\n        height\n        url\n        width\n      }\n      product\n      type\n      uri\n    }\n  }\n}\n\n## Note that by default this will affect the\n## currently active device. If you get an error,\n## either specify `deviceId`, or start playing\n## a song on any of your Spotify devices.\nmutation Pause {\n  __typename\n  spotify {\n    pausePlayer {\n      player {\n        ...Player\n      }\n    }\n  }\n}\n\nmutation Resume {\n  __typename\n  spotify {\n    skipNextTrack {\n      player {\n        ...Player\n      }\n    }\n  }\n}\n\nmutation Next {\n  __typename\n  spotify {\n    skipPreviousTrack {\n      player {\n        ...Player\n      }\n    }\n  }\n}\n\nfragment Player on SpotifyPlayer {\n  timestamp\n  progressMs\n  isPlaying\n  currentlyPlayingType\n  repeatState\n  shuffleState\n  item {\n    id\n    name\n  }\n}",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["spotify"]
  },
  {
    id: Uuid.parseExn("ac28feb9-dbed-4226-afb1-d9bce22a8629"),
    title: "Search",
    description: "Search for matching Spotify tracks (songs) with the GraphQL operation `Search`",
    body: "query Search($query: String!) {\n  spotify {\n    search(data: { query: $query }) {\n      tracks {\n        name\n        id\n        album {\n          name\n          id\n          images {\n            height\n            url\n            width\n          }\n          href\n        }\n        href\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["spotify"]
  },
  {
    id: Uuid.parseExn("5be36d92-3012-411e-861e-fb51640482e0"),
    title: "SpotifyPlayTrack",
    description: "Play a song by trackId on Spotify",
    body: "mutation SpotifyPlayTrack($trackId: String!) {\n  spotify {\n    playTrack(\n      input: {\n        trackIds: [$trackId]\n      }\n    ) {\n      player {\n        isPlaying\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["spotify"]
  },
  {
    id: Uuid.parseExn("ee7505c6-99b8-4073-9183-051dd89ed74c"),
    title: "StripeCustomersQuery",
    description: "List customers on Stripe.\n",
    body: "query StripeCustomersQuery {\n  stripe {\n    customers {\n      nodes {\n        email\n        description\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["stripe"]
  },
  {
    id: Uuid.parseExn("b229bbcf-f370-4df0-a00d-06b5be888a86"),
    title: "StripeIssueRefundMutation",
    description: "Issue a refund for a charge on Stripe.\n",
    body: "mutation StripeIssueRefundMutation {\n  stripe {\n    refundCharge(data: {chargeId: \"YOUR_CHARGE_ID\"}) {\n      refund {\n        amount\n        charge {\n          customer {\n            ... on StripeCustomer {\n              email\n            }\n          }\n        }\n        id\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["stripe"]
  },
  {
    id: Uuid.parseExn("6bc549bd-8f28-4426-a12e-504aa2a9f0b4"),
    title: "StripeListRefundsQuery",
    description: "List refunds with charge and customer info on Stripe.\n",
    body: "query StripeListRefundsQuery {\n  stripe {\n    refunds {\n      nodes {\n        reason\n        amount\n        status\n        charge {\n          customer {\n            ... on StripeCustomer {\n              email\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["stripe"]
  },
  {
    id: Uuid.parseExn("c90242a6-9b17-4931-bf2d-e44dc283325b"),
    title: "StripeInvoicesQuery",
    description: "List unpaid invoices on Stripe.\n",
    body: "query StripeInvoicesQuery {\n  stripe {\n    invoices(first: 10, status: open) {\n      nodes {\n        amountDue\n        paid\n        customer {\n          ... on StripeCustomer {\n            email\n            description\n          }\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["stripe"]
  },
  {
    id: Uuid.parseExn("0b5a8474-c206-4b0b-b660-7ef2ed543049"),
    title: "TrelloCreateCardMutation",
    description: "Add a new card to a Trello list.\n",
    body: "mutation TrelloCreateCardMutation {\n  trello {\n    createCard(\n      input: {\n        idList: \"REPLACE_WITH_LIST_ID\"\n        name: \"New card created from OneGraph\"\n      }\n    ) {\n      card {\n        id\n        name\n        url\n      }\n    }\n  }\n}\n",
    kind: /* Mutation */1,
    contributedBy: undefined,
    services: ["trello"]
  },
  {
    id: Uuid.parseExn("587f3854-5ee1-46b8-8a9c-8d184875f874"),
    title: "TrelloListBoardsQuery",
    description: "Get all boards and cards on Trello for a given user.\n",
    body: "query TrelloListBoardsQuery {\n  trello {\n    member(username: \"spolsky\") {\n      boards {\n        nodes {\n          name\n          cards {\n            nodes {\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["trello"]
  },
  {
    id: Uuid.parseExn("262af487-b0f6-4658-ab89-99cd06bafc60"),
    title: "TrelloMemberInfo",
    description: "Get profile information on a Trello user.\n",
    body: "query TrelloMemberInfo {\n  trello {\n    member(username: \"spolsky\") {\n      fullName\n      bio\n      avatarUrl\n      url\n      email\n    }\n  }\n}\n",
    kind: /* Query */0,
    contributedBy: undefined,
    services: ["trello"]
  },
  {
    id: Uuid.parseExn("cfeff87c-486a-445d-b388-a620e51810ea"),
    title: "UpdateGitHubUserProfile",
    description: "Updates the currently authenticated GitHub user's profile. To run this, you'll need to either use a personal access token, or you'll need to make a custom GitHub app that requests the `user` permission. \n\nOnce you've made a custom GitHub app, set the client id/secret for it in your OneGraph dashboard, authenticate a user, and run this mutation!\n",
    body: "mutation UpdateGitHubUserProfile(\n  $hireable: Boolean\n  $name: String\n  $twitterUsername: String\n  $bio: String\n) {\n  gitHub {\n    # Note that you'll need a custom GitHub app\n    # with the `user` permission requested in\n    # order to update a user's profile\n    updateAuthenticatedUser_oneGraph(\n      input: {\n        bio: $bio\n        hireable: $hireable\n        name: $name\n        twitterUsername: $twitterUsername\n      }\n    ) {\n      updatedUser {\n        bio\n        email\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("cfeff87d-486a-445d-b388-a620e51810ea"),
    title: "PostSimpleMarkdownSlackMessage",
    description: "TODO",
    body: "mutation PostSimpleMarkdownSlackMessage(\n  $channel: String!\n  $text: String!\n) {\n  slack {\n    postMessage(\n      data: {\n        channel: $channel\n        markdown: true\n        text: $text\n      }\n    ) {\n      ok\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  createAssetWithStuff,
  gitHubStatusChangeNotification,
  setSlackStatus,
  gitHubStatus,
  insertFollowersMutation,
  gitHubUserFragment,
  {
    id: Uuid.parseExn("cfeff87d-486a-445d-b388-a620e11810ea"),
    title: "ListMyRepositories",
    description: "TODO",
    body: "query ListMyRepositories {\n  me {\n    github {\n      id\n      login\n      repositories(\n        first: 100\n        orderBy: { field: CREATED_AT, direction: DESC }\n        affiliations: [\n          OWNER\n          COLLABORATOR\n          ORGANIZATION_MEMBER\n        ]\n        ownerAffiliations: [\n          OWNER\n          COLLABORATOR\n          ORGANIZATION_MEMBER\n        ]\n      ) {\n        edges {\n          node {\n            id\n            nameWithOwner\n          }\n        }\n        totalCount\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("cfeff87d-486a-445d-b388-a611e11810ea"),
    title: "ListFilesOnDefaultBranch",
    description: "TODO",
    body: "query ListFilesOnDefaultBranch($owner: String!, $name: String!) {\n  gitHub {\n    repository(name: $name, owner: $owner) {\n      id\n      defaultBranchRef {\n        ... on GitHubRef {\n          id\n          name\n          target {\n            id\n            oid\n            ... on GitHubCommit {\n              history(first: 1) {\n                edges {\n                  node {\n                    tree {\n                      entries {\n                        name\n                        path\n                        oid\n                        object {\n                          ... on GitHubTree {\n                            id\n                            entries {\n                              name\n                              path\n                              oid\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              tree {\n                id\n                oid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("ffeff87d-423a-445d-b388-a611e11810ea"),
    title: "ReadData",
    description: "TODO",
    body: "query ReadData($databaseName: String!, $path: String!) {\n  firebase {\n    readData(databaseName: $databaseName, path: $path) {\n      json\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["firebase"]
  },
  {
    id: Uuid.parseExn("dfeff87d-424a-445d-b388-a611e11810ea"),
    title: "PushToList",
    description: "TODO",
    body: "mutation PushToList(\n  $databaseName: String!\n  $path: String!\n  $data: JSON!\n) {\n  firebase {\n    pushData(\n      input: {\n        data: $data\n        path: $path\n        databaseName: $databaseName\n      }\n    ) {\n      json\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["firebase"]
  },
  {
    id: Uuid.parseExn("bfeff87d-425a-445d-b388-a611e11810ea"),
    title: "SetData",
    description: "TODO",
    body: "mutation SetData(\n  $databaseName: String!\n  $path: String!\n  $data: JSON!\n) {\n  firebase {\n    setData(\n      input: {\n        data: $data\n        path: $path\n        databaseName: $databaseName\n      }\n    ) {\n      json\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["firebase"]
  },
  {
    id: Uuid.parseExn("afeff87d-426a-445d-b388-a611e11810ea"),
    title: "UpdateData",
    description: "TODO",
    body: "mutation UpdateData(\n  $databaseName: String!\n  $path: String!\n  $updates: [FirebaseUpdateDataUpdateArg!]!\n) {\n  firebase {\n    updateData(\n      input: {\n        path: $path\n        databaseName: $databaseName\n        updates: $updates\n      }\n    ) {\n      json\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["firebase"]
  },
  {
    id: Uuid.parseExn("afeff87d-426a-395d-b388-a611e11810ea"),
    title: "PostTweet",
    description: "TODO",
    body: "mutation PostTweet($text: String!) {\n  twitter {\n    postStatus(input: { status: $text }) {\n      tweet {\n        id\n        text\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["twitter"]
  },
  {
    id: Uuid.parseExn("afeff87d-426a-393d-b388-a611e11810ea"),
    title: "SetStatus",
    description: "TODO",
    body: "mutation SetStatus(\n  $message: String!\n  $limitedAvailability: Boolean = false\n) {\n  gitHub {\n    changeUserStatus(\n      input: {\n        message: $message\n        limitedAvailability: $limitedAvailability\n      }\n    ) {\n      status {\n        id\n        message\n        indicatesLimitedAvailability\n        updatedAt\n      }\n    }\n  }\n}",
    kind: /* Mutation */1,
    contributedBy: "@sgrove",
    services: ["github"]
  },
  {
    id: Uuid.parseExn("afeff87d-426a-393d-b388-a611a21810ea"),
    title: "CurrentlyListeningTo",
    description: "TODO",
    body: "query CurrentlyListeningTo {\n  spotify {\n    me {\n      player {\n        currentlyPlayingType\n        isPlaying\n        progressMs\n        repeatState\n        shuffleState\n        item {\n          id\n          name\n          previewUrl\n          trackNumber\n          uri\n          album {\n            name\n            uri\n            images {\n              url\n            }\n          }\n          artists {\n            name\n            images {\n              url\n            }\n            uri\n          }\n        }\n      }\n    }\n  }\n}",
    kind: /* Query */0,
    contributedBy: "@sgrove",
    services: ["spotify"]
  }
];

function blockServices(schema, block) {
  return GraphQLUtils.gatherAllReferencedServices(schema, Graphql.parse(block.body));
}

function getFirstVariables(block) {
  var ast = Graphql.parse(block.body);
  return GraphQLUtils.getOperationVariables(Belt_Option.getExn(Belt_Array.get(ast.definitions, 0)));
}

var selectedTab = "bg-white inline-block border-l border-t border-r rounded-t py-2 px-4 text-blue-dark font-semibold";

var idleTab = "bg-white inline-block py-2 px-4 text-blue hover:text-blue-darker font-semibold";

var make = Card;

export {
  makeBlankBlock ,
  fetchOneGraph ,
  selectedTab ,
  idleTab ,
  baseState ,
  make ,
  createAssetWithStuff ,
  gitHubUserFragment ,
  setSlackStatus ,
  gitHubStatus ,
  gitHubStatusChangeNotification ,
  watchTwitterFollower ,
  insertFollowersMutation ,
  slackReactionEvent ,
  addToDocMutation ,
  blocks ,
  blockServices ,
  getFirstVariables ,
  
}
/* fetchOneGraph Not a pure module */
