// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Uuid from "uuid";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Debug from "./Debug.js";
import * as Icons from "./Icons.js";
import * as Utils from "./Utils.js";
import * as React from "react";
import * as Graphql from "graphql";
import * as GraphQLJs from "./bindings/GraphQLJs.js";
import Head from "next/head";
import * as OneGraphRe from "./OneGraphRe.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as Belt_Result from "bs-platform/lib/es6/belt_Result.mjs";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
import * as OneGraphAuth from "./bindings/OneGraphAuth.js";
import * as Mock from "@graphql-tools/mock";

import dynamic from 'next/dynamic'
;

function Index$Inner(Props) {
  var mod = Props.mod;
  var config = Props.config;
  var match = React.useState(function () {
        return {
                schema: {
                  TAG: 0,
                  _0: "Loading schema...",
                  [Symbol.for("name")]: "Loading"
                },
                oneGraphAuth: undefined
              };
      });
  var setState = match[1];
  React.useEffect((function () {
          var oneGraphAuth = OneGraphAuth.create({
                appId: config.oneGraphAppId
              });
          Belt_Option.forEach(oneGraphAuth, (function (oneGraphAuth) {
                  var promise = OneGraphRe.fetchOneGraph(oneGraphAuth, Graphql.getIntrospectionQuery(), undefined, undefined);
                  GraphQLJs.install(undefined);
                  var __x = promise.then(function (result) {
                        var basicSchema = Graphql.buildClientSchema(result.data);
                        var schema = Mock.addMocksToSchema({
                              schema: basicSchema,
                              mocks: {
                                JSON: (function (param) {
                                    return {};
                                  })
                              }
                            });
                        Debug.assignToWindowForDeveloperDebug("mockedSchema", schema);
                        return Promise.resolve(Curry._1(setState, (function (oldState) {
                                          return {
                                                  schema: {
                                                    TAG: 2,
                                                    _0: schema,
                                                    [Symbol.for("name")]: "Loaded"
                                                  },
                                                  oneGraphAuth: oldState.oneGraphAuth
                                                };
                                        })));
                      });
                  __x.catch(function (error) {
                        var msg = "Error loading schema, check that CORS is allowed on https://onegraph.com/dashboard/app/" + oneGraphAuth.appId;
                        return Promise.resolve(Curry._1(setState, (function (_oldState) {
                                          return {
                                                  schema: {
                                                    TAG: 1,
                                                    msg: msg,
                                                    error: error,
                                                    [Symbol.for("name")]: "Dead"
                                                  },
                                                  oneGraphAuth: Caml_option.some(oneGraphAuth)
                                                };
                                        })));
                      });
                  
                }));
          
        }), []);
  var msg = match[0].schema;
  var tmp;
  switch (msg.TAG | 0) {
    case /* Loading */0 :
        tmp = React.createElement("div", {
              className: "flex h-screen"
            }, React.createElement("div", {
                  className: "m-auto"
                }, React.createElement("div", {
                      className: "bg-white rounded-lg border-gray-300 border p-3 shadow-lg"
                    }, React.createElement("div", {
                          className: "flex flex-row"
                        }, React.createElement("div", {
                              className: "px-2"
                            }, React.createElement(Icons.Play.make, {
                                  color: "gray"
                                })), React.createElement("div", {
                              className: "ml-2 mr-6"
                            }, React.createElement("span", {
                                  className: "font-semibold"
                                }, msg._0))))));
        break;
    case /* Dead */1 :
        var origin = Belt_Option.getWithDefault(Utils.windowLocationOrigin(undefined), "");
        tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
                  className: "flex h-screen"
                }, React.createElement("div", {
                      className: "m-auto"
                    }, React.createElement("div", {
                          className: "bg-white rounded-lg border-gray-300 border p-3 shadow-lg"
                        }, React.createElement("div", {
                              className: "flex flex-row"
                            }, React.createElement("div", {
                                  className: "px-2"
                                }, React.createElement(Icons.Trash.make, {
                                      color: "red"
                                    })), React.createElement("div", {
                                  className: "ml-2 mr-6"
                                }, React.createElement("span", {
                                      className: "font-semibold"
                                    }, "Make sure ", React.createElement("strong", undefined, origin), "is in your CORS origins on the", React.createElement("span", {
                                          className: "block text-blue-500 bg-blue-200"
                                        }, React.createElement("a", {
                                              href: "https://www.onegraph.com/dashboard/app/" + config.oneGraphAppId + "?add-cors-origin=" + origin,
                                              rel: "noopener noreferrer",
                                              target: "_blank"
                                            }, "OneGraph dashboard for your app")), "and then refresh to try again.")))))), React.createElement("pre", undefined, JSON.stringify(msg.error, null, 2)));
        break;
    case /* Loaded */2 :
        tmp = React.createElement(React.Fragment, undefined, React.createElement(mod.make, {
                  schema: msg._0,
                  config: config
                }));
        break;
    
  }
  return React.createElement("div", undefined, tmp);
}

var localStorageName = "oneGraphStudioConfig";

function saveToLocalStorage(config) {
  var jsonString = JSON.stringify(config);
  localStorage.setItem(localStorageName, jsonString);
  
}

function loadFromLocalStorage(param) {
  try {
    var jsonString = localStorage.getItem(localStorageName);
    return Belt_Option.flatMap(jsonString === null ? undefined : Caml_option.some(jsonString), (function (jsonString) {
                  return JSON.parse(jsonString);
                }));
  }
  catch (exn){
    return ;
  }
}

function checkValidConfig(config) {
  var invalidAppId = Belt_Option.getWithDefault(Belt_Option.map(config.oneGraphAppId, (function (id) {
              return !Uuid.validate(id);
            })), false);
  var match = config.oneGraphAppId;
  var match$1 = config.persistQueryToken;
  var match$2 = config.accessToken;
  if (match === undefined) {
    return {
            TAG: 1,
            _0: "Please enter appId",
            [Symbol.for("name")]: "Error"
          };
  }
  if (invalidAppId) {
    return {
            TAG: 1,
            _0: "Invalid appId",
            [Symbol.for("name")]: "Error"
          };
  }
  if (match$1 === undefined) {
    return {
            TAG: 1,
            _0: "Please enter PersistQueryToken",
            [Symbol.for("name")]: "Error"
          };
  }
  if (match$2 === undefined) {
    return {
            TAG: 1,
            _0: "Please enter AccessToken",
            [Symbol.for("name")]: "Error"
          };
  }
  var newConfig_chainAccessToken = config.accessToken;
  var newConfig = {
    oneGraphAppId: match,
    persistQueryToken: match$1,
    chainAccessToken: newConfig_chainAccessToken
  };
  return {
          TAG: 0,
          _0: newConfig,
          [Symbol.for("name")]: "Ok"
        };
}

function Index$ConfigEditor(Props) {
  var onUpdated = Props.onUpdated;
  var match = React.useState(function () {
        return {
                oneGraphAppId: undefined,
                persistQueryToken: undefined,
                accessToken: undefined
              };
      });
  var setConfig = match[1];
  var config = match[0];
  var validConfig = checkValidConfig(config);
  var validOneGraphAppId = Belt_Option.flatMap(config.oneGraphAppId, (function (id) {
          if (Uuid.validate(id)) {
            return id;
          }
          
        }));
  var persistQueryTokenLink = Belt_Option.map(validOneGraphAppId, (function (id) {
          return React.createElement("a", {
                      className: "text-blue-500",
                      href: "https://www.onegraph.com/dashboard/app/" + id + "/persisted-queries",
                      rel: "nofollow",
                      target: "_blank"
                    }, "(Create one here)");
        }));
  var accessTokenLink = Belt_Option.map(validOneGraphAppId, (function (id) {
          return React.createElement("a", {
                      className: "text-blue-500",
                      href: "https://www.onegraph.com/dashboard/app/" + id + "/auth/server-side",
                      rel: "nofollow",
                      target: "_blank"
                    }, "(Create one here)");
        }));
  var tmp;
  tmp = validConfig.TAG === /* Ok */0 ? "Save Config" : validConfig._0;
  return React.createElement("div", {
              className: "flex items-center min-h-screen bg-gray-900"
            }, React.createElement("div", {
                  className: "container mx-auto"
                }, React.createElement("div", {
                      className: "max-w-md mx-auto my-10 bg-gray-700 p-5 rounded-md shadow-sm"
                    }, React.createElement("div", {
                          className: "text-center"
                        }, React.createElement("h1", {
                              className: "my-3 text-3xl font-semibold text-gray-200"
                            }, "OneStudio Alpha Config"), React.createElement("p", {
                              className: "text-gray-400"
                            }, "Pardon the rough start, we just need a few tokens.")), React.createElement("div", {
                          className: "m-7"
                        }, React.createElement("form", {
                              onSubmit: (function ($$event) {
                                  $$event.preventDefault();
                                  if (validConfig.TAG === /* Ok */0) {
                                    return Curry._1(onUpdated, validConfig._0);
                                  }
                                  
                                })
                            }, React.createElement("div", {
                                  className: "mb-6"
                                }, React.createElement("label", {
                                      className: "block mb-2 text-sm text-gray-400",
                                      htmlFor: "name"
                                    }, "OneGraph App id", React.createElement("a", {
                                          className: "text-blue-500",
                                          href: "https://onegraph.com/dashboard",
                                          rel: "nofollow",
                                          target: "_blank"
                                        }, "(on your dashboard)")), React.createElement("input", {
                                      className: "w-full px-3 py-2 placeholder-gray-300 border border-gray-300 rounded-md focus:outline-none focus:ring bg-gray-700 text-white placeholder-gray-500 border-gray-600 focus:ring-gray-900 focus:border-gray-500",
                                      id: "name",
                                      name: "name",
                                      placeholder: "e.g. 4b34d36f-83e5-4789-9cf7-fe1ebe1ce527",
                                      required: true,
                                      type: "text",
                                      onChange: (function ($$event) {
                                          var other = $$event.target.value;
                                          var value = other === "" ? undefined : other;
                                          return Curry._1(setConfig, (function (oldConfig) {
                                                        return {
                                                                oneGraphAppId: value,
                                                                persistQueryToken: oldConfig.persistQueryToken,
                                                                accessToken: oldConfig.accessToken
                                                              };
                                                      }));
                                        })
                                    })), React.createElement("div", {
                                  className: "mb-6"
                                }, React.createElement("label", {
                                      className: "block mb-2 text-sm text-gray-400",
                                      htmlFor: "email"
                                    }, "PersistQueryToken", Belt_Option.getWithDefault(persistQueryTokenLink, null)), React.createElement("input", {
                                      className: "w-full px-3 py-2 placeholder-gray-300 border border-gray-300 rounded-md focus:outline-none focus:ring bg-gray-700 text-white placeholder-gray-500 border-gray-600 focus:ring-gray-900 focus:border-gray-500",
                                      id: "PersistQueryToken",
                                      disabled: Belt_Option.isNone(validOneGraphAppId),
                                      name: "PersistQueryToken",
                                      required: true,
                                      type: "password",
                                      onChange: (function ($$event) {
                                          var other = $$event.target.value;
                                          var value = other === "" ? undefined : other;
                                          return Curry._1(setConfig, (function (oldConfig) {
                                                        return {
                                                                oneGraphAppId: oldConfig.oneGraphAppId,
                                                                persistQueryToken: value,
                                                                accessToken: oldConfig.accessToken
                                                              };
                                                      }));
                                        })
                                    })), React.createElement("div", {
                                  className: "mb-6"
                                }, React.createElement("label", {
                                      className: "text-sm text-gray-400",
                                      htmlFor: "phone"
                                    }, "Personal Auth Token", Belt_Option.getWithDefault(accessTokenLink, null)), React.createElement("input", {
                                      className: "w-full px-3 py-2 placeholder-gray-300 border border-gray-300 rounded-md focus:outline-none focus:ring bg-gray-700 text-white placeholder-gray-500 border-gray-600 focus:ring-gray-900 focus:border-gray-500",
                                      id: "accessToken",
                                      disabled: Belt_Option.isNone(validOneGraphAppId),
                                      name: "accessToken",
                                      required: true,
                                      type: "password",
                                      onChange: (function ($$event) {
                                          var other = $$event.target.value;
                                          var value = other === "" ? undefined : other;
                                          return Curry._1(setConfig, (function (oldConfig) {
                                                        return {
                                                                oneGraphAppId: oldConfig.oneGraphAppId,
                                                                persistQueryToken: oldConfig.persistQueryToken,
                                                                accessToken: value
                                                              };
                                                      }));
                                        })
                                    })), React.createElement("div", {
                                  className: "mb-6"
                                }, React.createElement("button", {
                                      className: "w-full px-3 py-4 text-white rounded-md focus:bg-indigo-600 focus:outline-none " + (
                                        Belt_Result.isOk(validConfig) ? "bg-indigo-500" : "bg-gray-500"
                                      ),
                                      disabled: Belt_Result.isError(validConfig),
                                      type: "submit"
                                    }, tmp)), React.createElement("p", {
                                  className: "text-base text-center text-gray-400",
                                  id: "result"
                                }))))));
}

function $$default(param) {
  var match = React.useState(function () {
        return {
                msg: "Retrieving config...",
                mod: undefined,
                config: loadFromLocalStorage(undefined)
              };
      });
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          var __x = import("./components/Studio.js");
          __x.then(function (Studio) {
                return Promise.resolve(Curry._1(setState, (function (oldState) {
                                  return {
                                          msg: "Loaded!",
                                          mod: Studio,
                                          config: oldState.config
                                        };
                                })));
              });
          
        }), []);
  var mod = state.mod;
  var tmp;
  if (mod !== undefined) {
    var config = state.config;
    tmp = config !== undefined ? React.createElement(Index$Inner, {
            mod: mod,
            config: config
          }) : React.createElement(Index$ConfigEditor, {
            onUpdated: (function (config) {
                saveToLocalStorage(config);
                return Curry._1(setState, (function (oldState) {
                              return {
                                      msg: oldState.msg,
                                      mod: oldState.mod,
                                      config: config
                                    };
                            }));
              })
          });
  } else {
    tmp = React.createElement(React.Fragment, undefined, React.createElement("div", {
              className: "flex h-screen"
            }, React.createElement("div", {
                  className: "m-auto"
                }, React.createElement("div", {
                      className: "bg-white rounded-lg border-gray-300 border p-3 shadow-lg"
                    }, React.createElement("div", {
                          className: "flex flex-row"
                        }, React.createElement("div", {
                              className: "px-2"
                            }, React.createElement(Icons.Play.make, {
                                  color: "gray"
                                })), React.createElement("div", {
                              className: "ml-2 mr-6"
                            }, React.createElement("span", {
                                  className: "font-semibold"
                                }, state.msg)))))));
  }
  return React.createElement(React.Fragment, undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "OneGraph Serverless Studio")
                }), tmp);
}

export {
  $$default ,
  $$default as default,
  
}
/*  Not a pure module */
