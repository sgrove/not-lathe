// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Card from "./Card.js";
import * as Uuid from "./bindings/Uuid.js";
import * as Utils from "./bindings/Utils.js";
import * as Belt_Array from "bs-platform/lib/es6/belt_Array.mjs";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
import * as Belt_SetString from "bs-platform/lib/es6/belt_SetString.mjs";
import * as Belt_SortArray from "bs-platform/lib/es6/belt_SortArray.mjs";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.mjs";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.mjs";

function stringOfIfMissing(x) {
  if (x === "ALLOW") {
    return "ALLOW";
  } else if (x === "SKIP") {
    return "SKIP";
  } else {
    return "ERROR";
  }
}

function ifMissingOfString(s) {
  switch (s) {
    case "ALLOW" :
        return {
                TAG: 0,
                _0: "ALLOW",
                [Symbol.for("name")]: "Ok"
              };
    case "ERROR" :
        return {
                TAG: 0,
                _0: "ERROR",
                [Symbol.for("name")]: "Ok"
              };
    case "SKIP" :
        return {
                TAG: 0,
                _0: "SKIP",
                [Symbol.for("name")]: "Ok"
              };
    default:
      return {
              TAG: 1,
              _0: s,
              [Symbol.for("name")]: "Error"
            };
  }
}

function stringOfIfList(x) {
  if (x === "ALL") {
    return "ALL";
  } else if (x === "EACH") {
    return "EACH";
  } else if (x === "LAST") {
    return "LAST";
  } else {
    return "FIRST";
  }
}

function ifListOfString(s) {
  switch (s) {
    case "ALL" :
        return {
                TAG: 0,
                _0: "ALL",
                [Symbol.for("name")]: "Ok"
              };
    case "EACH" :
        return {
                TAG: 0,
                _0: "EACH",
                [Symbol.for("name")]: "Ok"
              };
    case "FIRST" :
        return {
                TAG: 0,
                _0: "FIRST",
                [Symbol.for("name")]: "Ok"
              };
    case "LAST" :
        return {
                TAG: 0,
                _0: "LAST",
                [Symbol.for("name")]: "Ok"
              };
    default:
      return {
              TAG: 1,
              _0: s,
              [Symbol.for("name")]: "Error"
            };
  }
}

var base = "mutation ExecuteChainMutation($chain: OneGraphQueryChainInput!) {\n  oneGraph {\n    executeChain(\n      input: $chain\n    ) {\n      results {\n        request {\n          id\n        }\n        result\n        argumentDependencies {\n          name\n          returnValues\n          logs {\n            level\n            body\n          }\n          error {\n            name\n            message\n            stackString\n          }\n        }\n      }\n    }\n  }\n}";

function makeChain(operations) {
  return operations + "\n\n" + base;
}

var addToDocMutation_id = Uuid.parseExn("319e8375-16f0-434b-8f9a-3a1d364fe5df");

var addToDocMutation_body = "mutation AddToDocMutation($sheetId: String!, $row: [String!]!) {\n  google {\n    sheets {\n      appendValues(\n        id: $sheetId\n        valueInputOption: \"USER_ENTERED\"\n        majorDimenson: \"ROWS\"\n        range: \"'Raw Data'!A1\"\n        values: [$row]\n      ) {\n        updates {\n          spreadsheetId\n          updatedRange\n          updatedCells\n          updatedData {\n            values\n          }\n        }\n      }\n    }\n  }\n}";

var addToDocMutation_contributedBy = "@sgrove";

var addToDocMutation_services = ["google"];

var addToDocMutation = {
  id: addToDocMutation_id,
  title: "AddToDocMutation",
  description: "Insert a row into a Google Docs spreadsheet",
  body: addToDocMutation_body,
  kind: /* Mutation */1,
  contributedBy: addToDocMutation_contributedBy,
  services: addToDocMutation_services
};

var slackSub_id = Uuid.parseExn("942ae063-f7b4-4747-bae0-be427a8802e7");

var slackSub_body = "subscription SlackReactionSubscription(\n  $webhookUrl: String!\n) {\n  slack(webhookUrl: $webhookUrl) {\n    reactionAddedEvent {\n      eventTime\n      event {\n        user {\n          id\n          name          \n        }        \n        eventTs\n        reaction\n        item {\n          channel {\n            name\n          }\n          message {\n            permaLink\n            user {\n              id\n              name              \n            }\n            text\n            ts\n          }\n        }        \n      }\n    }\n  }\n}";

var slackSub_contributedBy = "@sgrove";

var slackSub_services = ["slack"];

var slackSub = {
  id: slackSub_id,
  title: "SlackReactionSubscription",
  description: "Provide notifications when someone reacts with an emoji to a message on Slack",
  body: slackSub_body,
  kind: /* Subscription */2,
  contributedBy: slackSub_contributedBy,
  services: slackSub_services
};

var npmDownloadsLastMonth_id = Uuid.parseExn("084beb2a-aae1-4a59-a3e8-7beaa383bd1a");

var npmDownloadsLastMonth_body = "query NpmDownloadsLastMonth {\n  npm {\n    downloads {\n      lastMonth {\n        count\n        end\n        start\n        ... on NpmOverallDownloadPeriodData {\n          end\n          start\n        }\n        perDay {\n          count\n          day\n        }\n      }\n    }\n  }\n}";

var npmDownloadsLastMonth_contributedBy = "@sgrove";

var npmDownloadsLastMonth_services = ["npm"];

var npmDownloadsLastMonth = {
  id: npmDownloadsLastMonth_id,
  title: "NpmDownloadsLastMonth",
  description: "Find the total number of downloads from npm in the past 30 days",
  body: npmDownloadsLastMonth_body,
  kind: /* Query */0,
  contributedBy: npmDownloadsLastMonth_contributedBy,
  services: npmDownloadsLastMonth_services
};

var testMutation_id = Uuid.parseExn("1886ccd2-7c37-49de-901b-e196221a94a0");

var testMutation_body = "mutation TestMutation($query: String!,\n  $another: [OneGraphQueryChainInput!]\n  #, $temp: String, $age: Int!, $unlisted: Boolean!\n  ) {\n  testMutate(query: $query)\n}";

var testMutation_contributedBy = "@sgrove";

var testMutation_services = [];

var testMutation = {
  id: testMutation_id,
  title: "TestMutation",
  description: "Test mutation as a sanity test for tooling",
  body: testMutation_body,
  kind: /* Mutation */1,
  contributedBy: testMutation_contributedBy,
  services: testMutation_services
};

var req1_variableDependencies = [{
    name: "webhookUrl",
    dependency: {
      TAG: 1,
      _0: {
        name: "webhookUrl",
        value: {
          TAG: 1,
          _0: "$webhookUrl",
          [Symbol.for("name")]: "Variable"
        }
      },
      [Symbol.for("name")]: "Direct"
    }
  }];

var req1_dependencyRequestIds = [];

var req1 = {
  id: "SlackReactionSubscription",
  variableDependencies: req1_variableDependencies,
  operation: slackSub,
  dependencyRequestIds: req1_dependencyRequestIds
};

var req2_variableDependencies = [
  {
    name: "row",
    dependency: {
      TAG: 0,
      _0: {
        functionFromScript: "getRow",
        maxRecur: undefined,
        ifMissing: "SKIP",
        ifList: "ALL",
        fromRequestIds: ["SlackReactionSubscription"],
        name: "row"
      },
      [Symbol.for("name")]: "ArgumentDependency"
    }
  },
  {
    name: "sheetId",
    dependency: {
      TAG: 1,
      _0: {
        name: "sheetId",
        value: {
          TAG: 1,
          _0: "$sheetId",
          [Symbol.for("name")]: "Variable"
        }
      },
      [Symbol.for("name")]: "Direct"
    }
  }
];

var req2_dependencyRequestIds = [];

var req2 = {
  id: "AddToDocMutation",
  variableDependencies: req2_variableDependencies,
  operation: addToDocMutation,
  dependencyRequestIds: req2_dependencyRequestIds
};

var req3_variableDependencies = [];

var req3_dependencyRequestIds = [];

var req3 = {
  id: "NpmDownloadsLastMonth",
  variableDependencies: req3_variableDependencies,
  operation: npmDownloadsLastMonth,
  dependencyRequestIds: req3_dependencyRequestIds
};

var req4_variableDependencies = [{
    name: "query",
    dependency: {
      TAG: 0,
      _0: {
        functionFromScript: "getStatus",
        maxRecur: undefined,
        ifMissing: "ERROR",
        ifList: "FIRST",
        fromRequestIds: ["NpmDownloadsLastMonth"],
        name: "query"
      },
      [Symbol.for("name")]: "ArgumentDependency"
    }
  }];

var req4_dependencyRequestIds = [];

var req4 = {
  id: "TestMutation",
  variableDependencies: req4_variableDependencies,
  operation: testMutation,
  dependencyRequestIds: req4_dependencyRequestIds
};

var req5_variableDependencies = [{
    name: "login",
    dependency: {
      TAG: 1,
      _0: {
        name: "login",
        value: {
          TAG: 1,
          _0: "gitHubLogin",
          [Symbol.for("name")]: "Variable"
        }
      },
      [Symbol.for("name")]: "Direct"
    }
  }];

var req5_dependencyRequestIds = [];

var req5 = {
  id: "GitHubStatus",
  variableDependencies: req5_variableDependencies,
  operation: Card.gitHubStatus,
  dependencyRequestIds: req5_dependencyRequestIds
};

var req6_variableDependencies = [{
    name: "jsonBody",
    dependency: {
      TAG: 0,
      _0: {
        functionFromScript: "",
        maxRecur: undefined,
        ifMissing: "SKIP",
        ifList: "FIRST",
        fromRequestIds: ["GitHubStatus"],
        name: "jsonBody"
      },
      [Symbol.for("name")]: "ArgumentDependency"
    }
  }];

var req6_dependencyRequestIds = ["GitHubStatus"];

var req6 = {
  id: "SetSlackStatus",
  variableDependencies: req6_variableDependencies,
  operation: Card.setSlackStatus,
  dependencyRequestIds: req6_dependencyRequestIds
};

var chain2_requests = [
  req1,
  req2,
  req3,
  req4
];

var chain2_blocks = [
  addToDocMutation,
  slackSub
];

var chain2 = {
  name: "chain2",
  script: "export function getRow(result) {\n          const event = result.SlackReactionSubscription[0].data.slack.reactionAddedEvent.event;\n          const reaction = event.reaction;\n          if (reaction !== 'eyes' && reaction !== 'white_check_mark') {\n            return null;\n          }\n          return [\n            event.item.message.permaLink, // message_permalink\n            event.item.message.text || '', // message_text\n            `=DATEOFTIMESTAMP(${event.item.message.ts} * 1000)`, // message_ts\n            event.item.message.user.id || '', // message_user_id (we don't have this yet :/)\n            event.item.message.user.name || '', // message_user_name\n            reaction === 'eyes' ? `=DATEOFTIMESTAMP(${event.eventTs} * 1000)` : '', // eyes_reaction_ts\n            reaction === 'eyes' ? event.user.id : '', // eyes_reaction_user_id\n            reaction === 'eyes' ? event.user.name : '', // eyes_reaction_user_name\n            reaction === 'white_check_mark' ? `=DATEOFTIMESTAMP(${event.eventTs} * 1000)` : '', //completed_reaction_ts\n            reaction === 'white_check_mark' ? event.user.id : '', // completed_reaction_user_id\n            reaction === 'white_check_mark' ? event.user.name : '', // completed_reaction_user_name\n            event.item.channel.name // channel_name\n          ]\n        }",
  requests: chain2_requests,
  blocks: chain2_blocks
};

var _chain_script = "import {\n  GitHubStatusInput,\n  GitHubStatusVariables,\n  SetSlackStatusInput,\n  SetSlackStatusVariables,\n} from 'oneGraphStudio';\n\nexport function makeVariablesForSetSlackStatus(\n  payload: SetSlackStatusInput\n): SetSlackStatusVariables {\n  let status = payload.GitHubStatus?.data?.gitHub?.user?.status?.message;\n\n  if (!status) {\n    return null;\n  }\n\n  return {\n    jsonBody: {\n      profile: {\n        status_text: status,\n      },\n    },\n  };\n}";

var _chain_requests = [
  req5,
  req6
];

var _chain_blocks = [
  Card.gitHubStatus,
  Card.setSlackStatus
];

var _chain = {
  name: "main",
  script: _chain_script,
  requests: _chain_requests,
  blocks: _chain_blocks
};

var emptyChain_script = "";

var emptyChain_requests = [];

var emptyChain_blocks = [];

var emptyChain = {
  name: "main",
  script: emptyChain_script,
  requests: emptyChain_requests,
  blocks: emptyChain_blocks
};

function compileAsObj(chain) {
  var operations = Belt_Array.joinWith(chain.blocks, "\n", (function (x) {
          return x.body;
        }));
  var makeRequest = function (request) {
    var variables = Belt_Array.keepMap(request.variableDependencies, (function (dep) {
            var variable = dep.dependency;
            if (variable.TAG === /* ArgumentDependency */0) {
              return ;
            }
            var variable$1 = variable._0;
            var json = variable$1.value;
            var tmp;
            tmp = json._0;
            return {
                    name: variable$1.name,
                    value: tmp
                  };
          }));
    var argumentDependencies = Belt_Array.keepMap(request.variableDependencies, (function (dep) {
            var dep$1 = dep.dependency;
            if (dep$1.TAG !== /* ArgumentDependency */0) {
              return ;
            }
            var dep$2 = dep$1._0;
            return {
                    name: dep$2.name,
                    ifList: dep$2.ifList,
                    ifMissing: dep$2.ifMissing,
                    fromRequestIds: dep$2.fromRequestIds,
                    maxRecur: dep$2.maxRecur,
                    functionFromScript: dep$2.functionFromScript
                  };
          }));
    return {
            id: request.id,
            operationName: request.operation.title,
            variables: variables,
            argumentDependencies: argumentDependencies
          };
  };
  var requests = Belt_Array.map(chain.requests, makeRequest);
  var input = {
    requests: requests,
    script: chain.script
  };
  return {
          operationDoc: "\n" + operations + "\n\n" + base,
          variables: {
            chain: input
          }
        };
}

function requestScriptNames(request) {
  var title = Utils.capitalizeFirstLetter(request.operation.title);
  var functionName = "makeVariablesFor" + title;
  var returnTypeName = title + "Variables";
  var inputTypeName = title + "Input";
  return {
          functionName: functionName,
          returnTypeName: returnTypeName,
          inputTypeName: inputTypeName
        };
}

function callForVariable(request, variableName) {
  var requestScriptName = requestScriptNames(request).functionName;
  return "export function " + requestScriptName + "_" + variableName + " (payload) {\n  return " + requestScriptName + "(payload)?.[\"" + variableName + "\"]\n}";
}

function compileOperationDoc(chain) {
  var blockOperations = Belt_Array.joinWith(chain.blocks, "\n", (function (x) {
          return x.body;
        }));
  var exposedVariables = Belt_Array.concatMany(Belt_Array.map(chain.requests, (function (request) {
              return Belt_Array.keepMap(request.variableDependencies, (function (dep) {
                            var variable = dep.dependency;
                            if (variable.TAG === /* ArgumentDependency */0) {
                              return ;
                            }
                            var variable$1 = variable._0;
                            var name = variable$1.value;
                            if (name.TAG === /* JSON */0) {
                              return ;
                            }
                            var name$1 = name._0;
                            return Belt_Option.map(Belt_Array.getBy(Card.getFirstVariables(request.operation), (function (param) {
                                              return param[0] === variable$1.name;
                                            })), (function (param) {
                                          return {
                                                  upstreamName: param[0],
                                                  upstreamType: param[1],
                                                  exposedName: name$1
                                                };
                                        }));
                          }));
            })));
  var match = Belt_Array.reduce(exposedVariables, [
        undefined,
        []
      ], (function (param, next) {
          var uniqueVariables = param[1];
          var names = param[0];
          if (Belt_SetString.has(names, next.exposedName)) {
            return [
                    names,
                    uniqueVariables
                  ];
          } else {
            return [
                    Belt_SetString.add(names, next.exposedName),
                    Belt_Array.concat(uniqueVariables, [next])
                  ];
          }
        }));
  var exposedVariableNamesAndTypes = match[1];
  var makeRequest = function (request) {
    var variables = Belt_Array.keepMap(request.variableDependencies, (function (dep) {
            var variable = dep.dependency;
            if (variable.TAG === /* ArgumentDependency */0) {
              return ;
            }
            var variable$1 = variable._0;
            var json = variable$1.value;
            if (json.TAG === /* JSON */0) {
              return "{name: \"" + variable$1.name + "\", value: " + JSON.stringify(json._0) + "}";
            } else {
              return "{name: \"" + variable$1.name + "\", value: \$" + json._0 + "}";
            }
          }));
    var argumentDependencies = Belt_Array.keepMap(request.variableDependencies, (function (dep) {
            var dep$1 = dep.dependency;
            if (dep$1.TAG !== /* ArgumentDependency */0) {
              return ;
            }
            var dep$2 = dep$1._0;
            var ids = Belt_Array.map(dep$2.fromRequestIds, (function (reqId) {
                      return "\"" + reqId + "\"";
                    })).join(", ");
            var reqIds = "[" + ids + "]";
            var fields = [
                "name: \"" + dep$2.name + "\"",
                "ifList: " + dep$2.ifList,
                "ifMissing: " + dep$2.ifMissing,
                "fromRequestIds: " + reqIds,
                "functionFromScript: \"" + dep$2.functionFromScript + "\""
              ].join(",\n                  ");
            return "\n                {\n                  " + fields + "\n                }\n";
          }));
    return "\n          {\n            id: \"" + request.id + "\",\n            operationName: \"" + request.operation.title + "\",\n            variables: [" + variables.join(",\n  ") + "],\n            argumentDependencies: [" + argumentDependencies.join(",") + "],\n          }";
  };
  var requests = Belt_Array.keepMap(Belt_SortArray.stableSortBy(chain.requests, (function (a, b) {
              var match = a.operation.kind;
              var match$1 = b.operation.kind;
              if (match !== 2) {
                if (match$1 !== 2) {
                  return 0;
                } else {
                  return 1;
                }
              } else {
                return -1;
              }
            })), (function (request) {
          var match = request.operation.kind;
          if (match >= 3) {
            return ;
          } else {
            return makeRequest(request);
          }
        }));
  var compiledString = "requests: [" + requests.join(",") + "],\n    script: \"\"\"\n" + chain.script + "\n\"\"\",\n  ";
  var operationVariables;
  if (exposedVariableNamesAndTypes.length !== 0) {
    var variableNames = Belt_Array.map(exposedVariableNamesAndTypes, (function (param) {
              var isRequired = param.upstreamType.endsWith("!") ? "!" : "";
              return "\$" + param.exposedName + ": JSON" + isRequired;
            })).join(",\n ");
    operationVariables = "(" + variableNames + ")";
  } else {
    operationVariables = "";
  }
  var operationName = "ExecuteChainMutation_" + chain.name;
  var base = "mutation " + operationName + operationVariables + " {\n  oneGraph {\n    executeChain(\n      input: {\n        " + compiledString + "\n      }\n    ) {\n      results {\n        request {\n          id\n        }\n        result\n        argumentDependencies {\n          name\n          returnValues\n          logs {\n            level\n            body\n          }\n          error {\n            name\n            message\n            stackString\n          }\n        }\n      }\n    }\n  }\n}";
  var operationDoc = "\n" + base + "\n\n" + blockOperations;
  return {
          operationDoc: operationDoc,
          chains: [{
              name: chain.name,
              operationName: operationName,
              exposedVariables: exposedVariables
            }]
        };
}

function saveToLocalStorage(chain, docId) {
  var jsonString = JSON.stringify(chain);
  localStorage.setItem(docId, jsonString);
  
}

function loadFromLocalStorage(docId) {
  var jsonString = localStorage.getItem(docId);
  return Belt_Option.map(jsonString === null ? undefined : Caml_option.some(jsonString), (function (jsonString) {
                return JSON.parse(jsonString);
              }));
}

function servicesRequired(chain) {
  return Utils.distinctStrings(Belt_Array.concatMany(Belt_Array.map(chain.requests, (function (request) {
                        return request.operation.services;
                      }))));
}

var CircularDependencyDetected = /* @__PURE__ */Caml_exceptions.create("Chain.CircularDependencyDetected");

function toposortRequests(requests) {
  var toposortHelper = function (request, visited, temp, requests, sorted) {
    if (Belt_SetString.has(visited, request.id)) {
      
    } else {
      console.log("Add Req: ", request.id);
      sorted.contents = Belt_Array.concat(sorted.contents, [request]);
    }
    var deps = request.dependencyRequestIds;
    var match = Belt_Array.reduce(deps, [
          visited,
          temp
        ], (function (param, depId) {
            var temp = param[1];
            var visited = param[0];
            var alreadyVisited = Belt_SetString.has(visited, depId);
            var loopDetected = Belt_SetString.has(temp, depId);
            if (loopDetected) {
              throw {
                    RE_EXN_ID: CircularDependencyDetected,
                    Error: new Error()
                  };
            }
            if (alreadyVisited) {
              return [
                      visited,
                      temp
                    ];
            } else {
              return Belt_Option.mapWithDefault(Belt_Array.getBy(requests, (function (existingRequest) {
                                return existingRequest.id === depId;
                              })), [
                          visited,
                          temp
                        ], (function (dependencyRequest) {
                            var visited$1 = Belt_SetString.add(visited, request.id);
                            var temp$1 = Belt_SetString.add(temp, request.id);
                            return toposortHelper(dependencyRequest, visited$1, temp$1, requests, sorted);
                          }));
            }
          }));
    var visited$1 = Belt_SetString.add(match[0], request.id);
    var temp$1 = Belt_SetString.remove(match[1], request.id);
    return [
            visited$1,
            temp$1
          ];
  };
  var sorted = {
    contents: []
  };
  try {
    Belt_Array.reduce(requests, [
          undefined,
          undefined
        ], (function (param, request) {
            return toposortHelper(request, param[0], param[1], requests, sorted);
          }));
    return {
            TAG: 0,
            _0: sorted.contents,
            [Symbol.for("name")]: "Ok"
          };
  }
  catch (raw_other){
    var other = Caml_js_exceptions.internalToOCamlException(raw_other);
    if (other.RE_EXN_ID === CircularDependencyDetected) {
      return {
              TAG: 1,
              _0: "circularDependencyDetected",
              [Symbol.for("name")]: "Error"
            };
    } else {
      console.warn("Unexpected exception", other);
      return {
              TAG: 1,
              _0: "circularDependencyDetected",
              [Symbol.for("name")]: "Error"
            };
    }
  }
}

function devJsonChain(param) {
  return {
  "name": "main",
  "script": "import {\n  CreateTreeInput,\n  CreateTreeVariables,\n  DefaultBranchRefInput,\n  DefaultBranchRefVariables,\n  FilesOnRefInput,\n  FilesOnRefVariables,\n  CreateCommitInput,\n  CreateCommitVariables,\n  CreateRefInput,\n  CreateRefVariables,\n  UpdateRefInput,\n  UpdateRefVariables,\n  UserInputInput,\n  UserInputVariables,\n} from 'oneGraphStudio';\n\nconst encoder = new TextEncoder();\n\nconst sha1 = (input) => {\n  return input;\n};\n\nconst computeGitHash = (source) =>\n  sha1('blob ' + encoder.encode(source).length + '\0' + source);\n\nexport function makeVariablesForCreateTree(\n  payload: CreateTreeInput\n): CreateTreeVariables {\n  let headRefTreeSha =\n    payload.DefaultBranchRef?.data?.gitHub?.repository?.defaultBranchRef?.target\n      ?.tree?.oid;\n\n  const treeJson = {\n    base_tree: headRefTreeSha,\n    tree: treeFiles,\n  };\n\n  return {};\n}\n\nexport function makeVariablesForDefaultBranchRef(\n  payload: DefaultBranchRefInput\n): DefaultBranchRefVariables {\n  return {};\n}\n\nexport function makeVariablesForFilesOnRef(\n  payload: FilesOnRefInput\n): FilesOnRefVariables {\n  return {};\n}\n\nexport function makeVariablesForCreateRepo(\n  payload: CreateRepoInput\n): CreateRepoVariables {\n  return {};\n}\n\nexport function makeVariablesForCreateCommit(\n  payload: CreateCommitInput\n): CreateCommitVariables {\n  const message = payload.UserInput?.data?.oneGraph?.message;\n  const newTreeSha = '1';\n  const headRefCommitSha = '1';\n\n  const commitJson = {\n    message: message,\n    tree: newTreeSha,\n    parents: [headRefCommitSha],\n  };\n\n  return { commitJson: commitJson };\n}\n\nexport function makeVariablesForCreateRef(\n  payload: CreateRefInput\n): CreateRefVariables {\n  return {};\n}\n\nexport function makeVariablesForUpdateRef(\n  payload: UpdateRefInput\n): UpdateRefVariables {\n  const jsonBody =\n    payload.CreateCommit?.data?.gitHub?.makeRestCall?.post?.jsonBody;\n  const commitRefId = jsonBody?.node_id;\n  const commitSha = jsonBody?.sha;\n  return {\n    refId: commitRefId,\n    sha: commitSha,\n  };\n}\n\nexport function makeVariablesForUserInput(\n  payload: UserInputInput\n): UserInputVariables {\n  return {};\n}\n\nexport function makeVariablesForAboutMe(\n  payload: AboutMeInput\n): AboutMeVariables {\n  return {};\n}\n",
  "requests": [
    {
      "id": "CreateTree",
      "variableDependencies": [
        {
          "name": "path",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "path",
              "value": {
                "TAG": 1,
                "_0": "path"
              }
            }
          }
        },
        {
          "name": "treeJson",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "treeJson",
              "value": {
                "TAG": 1,
                "_0": "treeJson"
              }
            }
          }
        }
      ],
      "operation": {
        "id": "7dca56ce-7ea5-44c7-a7e1-c3a185f53e0e",
        "title": "CreateTree",
        "description": "TODO",
        "body": "mutation CreateTree($path: String!, $treeJson: JSON!) {\n  gitHub {\n    makeRestCall {\n      post(\n        path: $path\n        jsonBody: $treeJson\n        contentType: \"application/json\"\n        accept: \"application/json\"\n      ) {\n        response {\n          statusCode\n        }\n        jsonBody\n      }\n    }\n  }\n}",
        "kind": 1,
        "services": [
          "github"
        ]
      },
      "dependencyRequestIds": [
        "DefaultBranchRef"
      ]
    },
    {
      "id": "DefaultBranchRef",
      "variableDependencies": [
        {
          "name": "owner",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "owner",
              "value": {
                "TAG": 1,
                "_0": "owner"
              }
            }
          }
        },
        {
          "name": "name",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "name",
              "value": {
                "TAG": 1,
                "_0": "name"
              }
            }
          }
        }
      ],
      "operation": {
        "id": "4bac04c8-f918-4868-9a69-cded5a9a85d8",
        "title": "DefaultBranchRef",
        "description": "TODO",
        "body": "query DefaultBranchRef($owner: String!, $name: String!) {\n  gitHub {\n    repository(name: $name, owner: $owner) {\n      id\n      defaultBranchRef {\n        ...GitHubRefFragment\n      }\n    }\n  }\n}",
        "kind": 0,
        "services": [
          "github"
        ]
      },
      "dependencyRequestIds": []
    },
    {
      "id": "FilesOnRef",
      "variableDependencies": [
        {
          "name": "owner",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "owner",
              "value": {
                "TAG": 1,
                "_0": "owner"
              }
            }
          }
        },
        {
          "name": "name",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "name",
              "value": {
                "TAG": 1,
                "_0": "name"
              }
            }
          }
        },
        {
          "name": "fullyQualifiedRefName",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "fullyQualifiedRefName",
              "value": {
                "TAG": 1,
                "_0": "fullyQualifiedRefName"
              }
            }
          }
        }
      ],
      "operation": {
        "id": "c0e9e88d-f6ac-4872-8687-ac9baa7f2110",
        "title": "FilesOnRef",
        "description": "TODO",
        "body": "query FilesOnRef($owner: String!, $name: String!, $fullyQualifiedRefName: String!) {\n  gitHub {\n    repository(name: $name, owner: $owner) {\n      id\n      ref(qualifiedName: $fullyQualifiedRefName) {\n        ...GitHubRefFragment\n      }\n    }\n  }\n}",
        "kind": 0,
        "services": [
          "github"
        ]
      },
      "dependencyRequestIds": [
        "DefaultBranchRef"
      ]
    },
    {
      "id": "CreateCommit",
      "variableDependencies": [
        {
          "name": "path",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "path",
              "value": {
                "TAG": 1,
                "_0": "path"
              }
            }
          }
        },
        {
          "name": "commitJson",
          "dependency": {
            "TAG": 0,
            "_0": {
              "functionFromScript": "INITIAL_UNKNOWN",
              "ifMissing": "SKIP",
              "ifList": "FIRST",
              "fromRequestIds": [
                "UserInput",
                "CreateTree"
              ],
              "name": "commitJson"
            }
          }
        }
      ],
      "operation": {
        "id": "6bd45c77-3d51-47ad-91e1-12347f000567",
        "title": "CreateCommit",
        "description": "TODO",
        "body": "mutation CreateCommit($path: String!, $commitJson: JSON!) {\n  gitHub {\n    makeRestCall {\n      post(path: $path, jsonBody: $commitJson) {\n        response {\n          statusCode\n        }\n        jsonBody\n      }\n    }\n  }\n}",
        "kind": 1,
        "services": [
          "github"
        ]
      },
      "dependencyRequestIds": [
        "UserInput",
        "CreateTree"
      ]
    },
    {
      "id": "CreateRef",
      "variableDependencies": [
        {
          "name": "repositoryId",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "repositoryId",
              "value": {
                "TAG": 1,
                "_0": "repositoryId"
              }
            }
          }
        },
        {
          "name": "name",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "name",
              "value": {
                "TAG": 1,
                "_0": "name"
              }
            }
          }
        },
        {
          "name": "oid",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "oid",
              "value": {
                "TAG": 1,
                "_0": "oid"
              }
            }
          }
        }
      ],
      "operation": {
        "id": "632ff2a2-bc7b-49ea-b1cf-40c8431921e0",
        "title": "CreateRef",
        "description": "TODO",
        "body": "mutation CreateRef($repositoryId: ID!, $name: String!, $oid: GitHubGitObjectID!) {\n  gitHub {\n    createRef(input: {repositoryId: $repositoryId, name: $name, oid: $oid}) {\n      ref {\n        ...GitHubRefFragment\n      }\n    }\n  }\n}",
        "kind": 1,
        "services": [
          "github"
        ]
      },
      "dependencyRequestIds": [
        "FilesOnRef",
        "DefaultBranchRef"
      ]
    },
    {
      "id": "UpdateRef",
      "variableDependencies": [
        {
          "name": "refId",
          "dependency": {
            "TAG": 0,
            "_0": {
              "functionFromScript": "INITIAL_UNKNOWN",
              "ifMissing": "ERROR",
              "ifList": "FIRST",
              "fromRequestIds": [],
              "name": "refId"
            }
          }
        },
        {
          "name": "sha",
          "dependency": {
            "TAG": 0,
            "_0": {
              "functionFromScript": "INITIAL_UNKNOWN",
              "ifMissing": "ERROR",
              "ifList": "FIRST",
              "fromRequestIds": [],
              "name": "sha"
            }
          }
        }
      ],
      "operation": {
        "id": "2f4d4266-db84-435b-bdf6-43e33224f4ed",
        "title": "UpdateRef",
        "description": "TODO",
        "body": "mutation UpdateRef($refId: ID!, $sha: GitHubGitObjectID!) {\n  gitHub {\n    updateRef(input: {refId: $refId, oid: $sha}) {\n      clientMutationId\n      ref {\n        name\n        id\n        target {\n          oid\n          id\n        }\n      }\n    }\n  }\n}",
        "kind": 1,
        "services": [
          "github"
        ]
      },
      "dependencyRequestIds": [
        "CreateRef",
        "DefaultBranchRef",
        "CreateCommit"
      ]
    },
    {
      "id": "UserInput",
      "variableDependencies": [
        {
          "name": "owner",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "owner",
              "value": {
                "TAG": 1,
                "_0": "owner"
              }
            }
          }
        },
        {
          "name": "name",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "name",
              "value": {
                "TAG": 1,
                "_0": "name"
              }
            }
          }
        },
        {
          "name": "branch",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "branch",
              "value": {
                "TAG": 1,
                "_0": "branch"
              }
            }
          }
        },
        {
          "name": "message",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "message",
              "value": {
                "TAG": 1,
                "_0": "message"
              }
            }
          }
        },
        {
          "name": "treeFiles",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "treeFiles",
              "value": {
                "TAG": 1,
                "_0": "treeFiles"
              }
            }
          }
        },
        {
          "name": "acceptOverrides",
          "dependency": {
            "TAG": 1,
            "_0": {
              "name": "acceptOverrides",
              "value": {
                "TAG": 1,
                "_0": "acceptOverrides"
              }
            }
          }
        }
      ],
      "operation": {
        "id": "9ea3b1ac-ebdd-4401-853c-29bb9607a1b8",
        "title": "UserInput",
        "description": "TODO",
        "body": "query UserInput($owner: String!, $name: String!, $branch: String!, $message: String!, $treeFiles: JSON!, $acceptOverrides: Boolean!) {\n  oneGraph {\n    owner: identity(input: $owner)\n    name: identity(input: $name)\n    branch: identity(input: $branch)\n    message: identity(input: $message)\n    treeFiles: identity(input: $treeFiles)\n    treeFiles: identity(input: $acceptOverrides)\n  }\n}",
        "kind": 0,
        "services": [
          "onegraph"
        ]
      },
      "dependencyRequestIds": []
    }
  ],
  "blocks": [
    {
      "id": "7dca56ce-7ea5-44c7-a7e1-c3a185f53e0e",
      "title": "CreateTree",
      "description": "TODO",
      "body": "mutation CreateTree($path: String!, $treeJson: JSON!) {\n  gitHub {\n    makeRestCall {\n      post(\n        path: $path\n        jsonBody: $treeJson\n        contentType: \"application/json\"\n        accept: \"application/json\"\n      ) {\n        response {\n          statusCode\n        }\n        jsonBody\n      }\n    }\n  }\n}",
      "kind": 1,
      "services": [
        "github"
      ]
    },
    {
      "id": "f19222f6-90e8-4650-882b-1de94a6d4a21",
      "title": "GitHubRefFragment",
      "description": "TODO",
      "body": "fragment GitHubRefFragment on GitHubRef {\n  id\n  name\n  target {\n    id\n    oid\n    ... on GitHubCommit {\n      history(first: 1) {\n        edges {\n          node {\n            tree {\n              entries {\n                name\n                path\n                oid\n                object {\n                  ... on GitHubTree {\n                    id\n                    entries {\n                      name\n                      path\n                      oid\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      tree {\n        id\n        oid\n      }\n    }\n  }\n}",
      "kind": 3,
      "services": [
        "github"
      ]
    },
    {
      "id": "4bac04c8-f918-4868-9a69-cded5a9a85d8",
      "title": "DefaultBranchRef",
      "description": "TODO",
      "body": "query DefaultBranchRef($owner: String!, $name: String!) {\n  gitHub {\n    repository(name: $name, owner: $owner) {\n      id\n      defaultBranchRef {\n        ...GitHubRefFragment\n      }\n    }\n  }\n}",
      "kind": 0,
      "services": [
        "github"
      ]
    },
    {
      "id": "c0e9e88d-f6ac-4872-8687-ac9baa7f2110",
      "title": "FilesOnRef",
      "description": "TODO",
      "body": "query FilesOnRef($owner: String!, $name: String!, $fullyQualifiedRefName: String!) {\n  gitHub {\n    repository(name: $name, owner: $owner) {\n      id\n      ref(qualifiedName: $fullyQualifiedRefName) {\n        ...GitHubRefFragment\n      }\n    }\n  }\n}",
      "kind": 0,
      "services": [
        "github"
      ]
    },
    {
      "id": "6bd45c77-3d51-47ad-91e1-12347f000567",
      "title": "CreateCommit",
      "description": "TODO",
      "body": "mutation CreateCommit($path: String!, $commitJson: JSON!) {\n  gitHub {\n    makeRestCall {\n      post(path: $path, jsonBody: $commitJson) {\n        response {\n          statusCode\n        }\n        jsonBody\n      }\n    }\n  }\n}",
      "kind": 1,
      "services": [
        "github"
      ]
    },
    {
      "id": "632ff2a2-bc7b-49ea-b1cf-40c8431921e0",
      "title": "CreateRef",
      "description": "TODO",
      "body": "mutation CreateRef($repositoryId: ID!, $name: String!, $oid: GitHubGitObjectID!) {\n  gitHub {\n    createRef(input: {repositoryId: $repositoryId, name: $name, oid: $oid}) {\n      ref {\n        ...GitHubRefFragment\n      }\n    }\n  }\n}",
      "kind": 1,
      "services": [
        "github"
      ]
    },
    {
      "id": "2f4d4266-db84-435b-bdf6-43e33224f4ed",
      "title": "UpdateRef",
      "description": "TODO",
      "body": "mutation UpdateRef($refId: ID!, $sha: GitHubGitObjectID!) {\n  gitHub {\n    updateRef(input: {refId: $refId, oid: $sha}) {\n      clientMutationId\n      ref {\n        name\n        id\n        target {\n          oid\n          id\n        }\n      }\n    }\n  }\n}",
      "kind": 1,
      "services": [
        "github"
      ]
    },
    {
      "id": "9ea3b1ac-ebdd-4401-853c-29bb9607a1b8",
      "title": "UserInput",
      "description": "TODO",
      "body": "query UserInput($owner: String!, $name: String!, $branch: String!, $message: String!, $treeFiles: JSON!, $acceptOverrides: Boolean!) {\n  oneGraph {\n    owner: identity(input: $owner)\n    name: identity(input: $name)\n    branch: identity(input: $branch)\n    message: identity(input: $message)\n    treeFiles: identity(input: $treeFiles)\n    treeFiles: identity(input: $acceptOverrides)\n  }\n}",
      "kind": 0,
      "services": [
        "onegraph"
      ]
    }
  ]
};
}

var target = "mutation ExecuteChainMutation(\n  $webhookUrl: JSON!\n  $chain: OneGraphQueryChainInput!\n  $sheetId: JSON!\n) {\n  oneGraph {\n    executeChain(\n      input: {\n        requests: [\n          {\n            id: \"SlackReactionSubscription\"\n            operationName: \"SlackReactionSubscription\"\n            variables: [\n              { name: \"webhookUrl\", value: $webhookUrl }\n            ]\n          }\n          {\n            id: \"AddToDocMutation\"\n            operationName: \"AddToDocMutation\"\n            argumentDependencies: {\n              name: \"row\"\n              ifList: ALL\n              fromRequestIds: [\"SlackReactionSubscription\"]\n              functionFromScript: \"getRow\"\n              ifMissing: SKIP\n            }\n            variables: { name: \"sheetId\", value: $sheetId }\n          }\n        ]\n        script: \"const a = true;\"\n      }\n    ) {\n      results {\n        request {\n          id\n        }\n        result\n        argumentDependencies {\n          name\n          returnValues\n          logs {\n            level\n            body\n          }\n          name\n        }\n      }\n    }\n  }\n}\n\nmutation AddToDocMutation(\n  $sheetId: String!\n  $row: [String!]!\n) {\n  google {\n    sheets {\n      appendValues(\n        id: $sheetId\n        valueInputOption: \"USER_ENTERED\"\n        majorDimenson: \"ROWS\"\n        range: \"'Raw Data'!A1\"\n        values: [$row]\n      ) {\n        updates {\n          spreadsheetId\n          updatedRange\n          updatedCells\n          updatedData {\n            values\n          }\n        }\n      }\n    }\n  }\n}\n\nsubscription SlackReactionSubscription(\n  $webhookUrl: String!\n) {\n  slack(webhookUrl: $webhookUrl) {\n    reactionAddedEvent {\n      eventTime\n      event {\n        user {\n          id\n          name\n        }\n        eventTs\n        reaction\n        item {\n          channel {\n            name\n          }\n          message {\n            permaLink\n            user {\n              id\n              name\n            }\n            text\n            ts\n          }\n        }\n      }\n    }\n  }\n}";

var chain = emptyChain;

export {
  stringOfIfMissing ,
  ifMissingOfString ,
  stringOfIfList ,
  ifListOfString ,
  base ,
  makeChain ,
  target ,
  addToDocMutation ,
  slackSub ,
  npmDownloadsLastMonth ,
  testMutation ,
  req1 ,
  req2 ,
  req3 ,
  req4 ,
  req5 ,
  req6 ,
  chain2 ,
  _chain ,
  emptyChain ,
  chain ,
  compileAsObj ,
  requestScriptNames ,
  callForVariable ,
  compileOperationDoc ,
  saveToLocalStorage ,
  loadFromLocalStorage ,
  servicesRequired ,
  CircularDependencyDetected ,
  toposortRequests ,
  devJsonChain ,
  
}
/* addToDocMutation Not a pure module */
