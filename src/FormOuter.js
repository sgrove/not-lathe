// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Form from "./Form.js";
import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Debug from "./Debug.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.mjs";
import * as Graphql from "graphql";
import * as GraphQLJs from "./bindings/GraphQLJs.js";
import Head from "next/head";
import * as OneGraphRe from "./OneGraphRe.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as Router from "next/router";
import * as OneGraphAuth from "./bindings/OneGraphAuth.js";
import * as Mock from "@graphql-tools/mock";

function FormOuter$Inner(Props) {
  var oneGraphAppId = Props.oneGraphAppId;
  var match = React.useState(function () {
        return {
                schema: {
                  TAG: 0,
                  _0: "Loading schema...",
                  [Symbol.for("name")]: "Loading"
                },
                oneGraphAuth: OneGraphAuth.create({
                      appId: oneGraphAppId
                    })
              };
      });
  var setState = match[1];
  var state = match[0];
  React.useEffect((function () {
          Belt_Option.forEach(state.oneGraphAuth, (function (oneGraphAuth) {
                  var promise = OneGraphRe.fetchOneGraph(oneGraphAuth, Graphql.getIntrospectionQuery(), undefined, undefined);
                  GraphQLJs.install(undefined);
                  var __x = promise.then(function (result) {
                        var basicSchema = Graphql.buildClientSchema(result.data);
                        var schema = Mock.addMocksToSchema({
                              schema: basicSchema,
                              mocks: {
                                JSON: (function (param) {
                                    return {};
                                  })
                              }
                            });
                        Debug.assignToWindowForDeveloperDebug("mockedSchema", schema);
                        return Promise.resolve(Curry._1(setState, (function (oldState) {
                                          return {
                                                  schema: {
                                                    TAG: 2,
                                                    _0: schema,
                                                    [Symbol.for("name")]: "Loaded"
                                                  },
                                                  oneGraphAuth: oldState.oneGraphAuth
                                                };
                                        })));
                      });
                  __x.catch(function (error) {
                        var msg = "Error loading schema, check that CORS is allowed on https://onegraph.com/dashboard/app/" + oneGraphAppId;
                        return Promise.resolve(Curry._1(setState, (function (oldState) {
                                          return {
                                                  schema: {
                                                    TAG: 1,
                                                    msg: msg,
                                                    error: error,
                                                    [Symbol.for("name")]: "Dead"
                                                  },
                                                  oneGraphAuth: oldState.oneGraphAuth
                                                };
                                        })));
                      });
                  
                }));
          
        }), []);
  var router = Router.useRouter();
  var chainId = Js_dict.get(router.query, "form_id");
  var msg = state.schema;
  var tmp;
  switch (msg.TAG | 0) {
    case /* Loading */0 :
        tmp = msg._0;
        break;
    case /* Dead */1 :
        tmp = React.createElement(React.Fragment, undefined, React.createElement("h1", undefined, msg.msg), React.createElement("pre", undefined, JSON.stringify(msg.error, null, 2)));
        break;
    case /* Loaded */2 :
        tmp = React.createElement(React.Fragment, undefined, chainId !== undefined ? React.createElement(Form.make, {
                    schema: msg._0,
                    chainId: chainId,
                    appId: oneGraphAppId
                  }) : "No form id found");
        break;
    
  }
  return React.createElement("div", undefined, React.createElement(Head, {
                  children: React.createElement("title", undefined, "OneGraph Serverless Studio Form")
                }), tmp);
}

var Inner = {
  make: FormOuter$Inner
};

function $$default(param) {
  return React.createElement(FormOuter$Inner, {
              oneGraphAppId: "4b34d36f-83e5-4789-9cf7-fe1ebe1ce527"
            });
}

export {
  Inner ,
  $$default ,
  $$default as default,
  
}
/* Form Not a pure module */
