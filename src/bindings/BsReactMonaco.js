// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import React from "@monaco-editor/react";

var makeRange = (function(monaco, a,b,c,d) {
return new monaco.Range(a,b,c,d)
});

var setUri = (function (monaco, model1, language, newURI) {
  // Assuming model1 is the previous model
var model2 = monaco.editor.createModel(model1.getValue(), language, newURI);

var cm2 = model2._commandManager;
var cm1 = model1._commandManager;
var temp;

// SWAP currentOpenStackElement
temp = cm2.currentOpenStackElement;
cm2.currentOpenStackElement = cm1.currentOpenStackElement;
cm1.currentOpenStackElement = temp;

// SWAP past
temp = cm2.past;
cm2.past = cm1.past;
cm1.past = temp;

// SWAP future
temp = cm2.future;
cm2.future = cm1.future;
cm1.future = temp;

return model2
});

var Model = {
  setUri: setUri
};

var Editor = {
  make: React
};

var options = {
  readOnly: true
};

function formatDocument(editor) {
  return Belt_Option.forEach(editor.getAction("editor.action.formatDocument"), (function (action) {
                action.run();
                
              }));
}

function transpileFile(monaco, uri, onComplete) {
  var __x = monaco.languages.typescript.getTypeScriptWorker();
  __x.then(function (worker) {
        var __x = Curry._1(worker, uri);
        return __x.then(function (client) {
                    var __x = client.getEmitOutput(uri);
                    return __x.then(function (result) {
                                return Promise.resolve(Curry._1(onComplete, result));
                              });
                  });
      });
  
}

var getSemanticDiagnostics = (function gatherDiagnostics(monaco, uri, onComplete) {
  var results = {};
  monaco.languages.typescript.getTypeScriptWorker().then((_worker) => {
    model = monaco.editor.getModel(uri);
    _worker(model.uri).then((worker) => {
      worker.getScriptFileNames().then((filename) => {
        var promises = filename.map((sf) => {
          return worker.getSemanticDiagnostics(sf).then((dd) => {
            results[sf] = dd;
          });
        });

        Promise.all(promises).then(() => onComplete(results));
      });
    });
  });
});

var addLib = (function (monaco, types, content) {
monaco.languages.typescript.typescriptDefaults.addExtraLib(
    types,
    'file:///node_modules/@types/oneGraphStudio/index.d.ts'
);
});

var TypeScript = {
  transpileFile: transpileFile,
  getSemanticDiagnostics: getSemanticDiagnostics,
  addLib: addLib
};

var registerPrettier = ((function (monaco) {
monaco.languages.registerDocumentFormattingEditProvider('typescript', {
  async provideDocumentFormattingEdits(model, options, token) {
    const prettier = await import('prettier/standalone');
    const babel = await import('prettier/parser-babel');
    const value = model.getValue();
    const text = prettier.format(value, {
      parser: 'babel',
      plugins: [babel],
      singleQuote: true,
    });

    return [
      {
        range: model.getFullModelRange(),
        text,
      },
    ];
  },
})

}));

export {
  makeRange ,
  Model ,
  Editor ,
  options ,
  formatDocument ,
  TypeScript ,
  registerPrettier ,
  
}
/* Editor Not a pure module */
