// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.mjs";
import * as Debug from "../Debug.js";
import * as Belt_Option from "bs-platform/lib/es6/belt_Option.mjs";
import * as Belt_Result from "bs-platform/lib/es6/belt_Result.mjs";
import * as Caml_option from "bs-platform/lib/es6/caml_option.mjs";
import * as Caml_js_exceptions from "bs-platform/lib/es6/caml_js_exceptions.mjs";
import * as QuickjsEmscripten from "@dww/quickjs-emscripten";
import * as CreateRecorder from "insight-kit/lib/core/createRecorder";

var consoleCode = "function logImpl(level, message) {\n  __ogLogs.push({level, message});\n}\n\nfunction log(...args) {\n  logImpl('info', args);\n}\n\nfunction info(...args) {\n  logImpl('info', args);\n}\n\nfunction debug(...args) {\n  logImpl('debug', args);\n}\n\nfunction warn(...args) {\n  logImpl('warn', args);\n}\n\nfunction error(...args) {\n  logImpl('error', args);\n}\n\nglobalThis.console = {log, info, debug, warn, error};";

function wasmQuickJSRunner(transformResult) {
  var rs = [];
  var recorder = CreateRecorder.createRecorder(function (r) {
        rs.push(r);
        
      });
  var __x = QuickjsEmscripten.getQuickJS();
  return __x.then(function (quickjs) {
              try {
                QuickjsEmscripten.Scope.withScope(function (scope) {
                      var vm = scope.manage(quickjs.createVm());
                      vm.setMemoryLimit(1048576);
                      var start = Date.now();
                      vm.setInterruptHandler(function (_vm) {
                            return Date.now() > start + 250;
                          });
                      Debug.assignToWindowForDeveloperDebug("myVm", vm);
                      var $$global = vm.global;
                      var logsVar = scope.manage(vm.newArray());
                      vm.setProp($$global, "__ogLogs", logsVar);
                      var result = vm.evalModuleCode("console", consoleCode);
                      var unwrapped = vm.unwrapResult(result);
                      scope.manage(unwrapped);
                      var recorderFnHandle = vm.newFunction("baseRecorder", (function (value) {
                              var value$1 = vm.dump(value);
                              var json = JSON.parse(value$1);
                              var temp = Curry.app(recorder, [
                                    json.value,
                                    json.source,
                                    json.line,
                                    json.name,
                                    json.filePath,
                                    json.runId,
                                    json.runGroup,
                                    json.fileVersion,
                                    json.scopeId,
                                    json.callNum
                                  ]);
                              Belt_Option.forEach((temp == null) ? undefined : Caml_option.some(temp), (function (temp) {
                                      rs.push(temp);
                                      
                                    }));
                              return vm.undefined;
                            }));
                      vm.setProp($$global, "baseRecorder", recorderFnHandle);
                      var code = transformResult.code + "\n\n" + "function __$i(value,source,line,name,filePath,runId,runGroup,fileVersion,scopeId,callNum) {\nlet serializedRecord = JSON.stringify({\n  value: value,\n  source: source,\n  line: line,\n  name: name,\n  filePath: filePath,\n  runId: runId,\n  runGroup: runGroup,\n  fileVersion: fileVersion,\n  scopeId: scopeId,\n  callNum: callNum\n  });\n\n  baseRecorder(serializedRecord)\n\n  return value\n}" + "\n\n" + consoleCode;
                      vm.evalCode(code);
                      
                    });
              }
              catch (exn){
                
              }
              return Promise.resolve(rs);
            });
}

function exampleRunner(transformResult) {
  var rs = [];
  var recorder = CreateRecorder.createRecorder(function (r) {
        rs.push(r);
        
      });
  Debug.assignToWindowForDeveloperDebug("__$i", recorder);
  Debug.assignToWindowForDeveloperDebug("createRecorder", (function (prim) {
          return CreateRecorder.createRecorder(prim);
        }));
  try {
    (((function (code) { eval(code) }))(transformResult.code));
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    console.warn("!Error in exampleRunner.eval: ", error);
  }
  return rs;
}

function exampleHyperEval(transformResult, runner) {
  try {
    return Belt_Result.map(transformResult, Curry.__1(runner));
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    console.warn("Error in hypereval.runner: ", error);
    return {
            TAG: 1,
            _0: error,
            [Symbol.for("name")]: "Error"
          };
  }
}

function asyncHyperEval(transformResult, runner) {
  try {
    return Belt_Result.map(transformResult, Curry.__1(runner));
  }
  catch (raw_error){
    var error = Caml_js_exceptions.internalToOCamlException(raw_error);
    console.warn("Error in hypereval.runner: ", error);
    return {
            TAG: 1,
            _0: error,
            [Symbol.for("name")]: "Error"
          };
  }
}

var Insight = {
  consoleCode: consoleCode,
  wasmQuickJSRunner: wasmQuickJSRunner,
  exampleRunner: exampleRunner,
  exampleHyperEval: exampleHyperEval,
  asyncHyperEval: asyncHyperEval
};

export {
  Insight ,
  
}
/* @dww/quickjs-emscripten Not a pure module */
